/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/SRW Core/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/SRW Core/GameSystem.js":
/*!***********************************!*\
  !*** ./js/SRW Core/GameSystem.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t\r\n\t//====================================================================\r\n\t// ●Game_System\r\n\t//====================================================================\r\n\t//初期化処理\r\n\t\tvar _SRPG_Game_System_initialize = Game_System.prototype.initialize;\r\n\t\tGame_System.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_System_initialize.call(this);\r\n\t\t\tthis._SRPGMode = false;\r\n\t\t\tthis._isBattlePhase = 'initialize';\r\n\t\t\tthis._isSubBattlePhase = 'initialize';\r\n\t\t\tthis._AutoUnitId = 0;\r\n\t\t\tthis._EventToUnit = [];\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [false, null];\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [false, null, null];\r\n\t\t\tthis._SrpgWaitMoving = false;\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [false, null];\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [false, null];\r\n\t\t\tthis._srpgAllActors = []; //SRPGモードに参加する全てのアクターの配列\r\n\t\t\tthis._searchedItemList = [];\r\n\t\t\tthis.initOptions();\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.initOptions = function() {\r\n\t\t\tif(this.optionDisableGrid == null){\r\n\t\t\t\tthis.optionDisableGrid = false;\r\n\t\t\t}\r\n\t\t\tif(this.showWillIndicator == null){\r\n\t\t\t\tthis.showWillIndicator = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionDefaultSupport == null){\r\n\t\t\t\tthis.optionDefaultSupport = true;\r\n\t\t\t}\r\n\t\t\tif(this.optionSkipUnitMoving == null){\r\n\t\t\t\tthis.optionSkipUnitMoving = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionBattleBGM == null){\r\n\t\t\t\tthis.optionBattleBGM = true;\r\n\t\t\t}\r\n\t\t\tif(this.optionAfterBattleBGM == null){\r\n\t\t\t\tthis.optionAfterBattleBGM = true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//変数関係の処理\r\n\t\t//戦闘中かどうかのフラグを返す\r\n\t\tGame_System.prototype.isSRPGMode = function() {\r\n\t\t\treturn this._SRPGMode;\r\n\t\t};\r\n\r\n\t\t//戦闘のフェーズを返す\r\n\t\t// initialize：初期化状態\r\n\t\t// actor_phase：アクター行動フェーズ\r\n\t\t// auto_actor_phase：アクター自動行動フェーズ\r\n\t\t// enemy_phase：エネミー行動フェーズ\r\n\t\tGame_System.prototype.isBattlePhase = function() {\r\n\t\t\treturn this._isBattlePhase;\r\n\t\t};\r\n\r\n\t\t//戦闘のフェーズを変更する\r\n\t\tGame_System.prototype.setBattlePhase = function(phase) {\r\n\t\t\tthis._isBattlePhase = phase;\r\n\t\t};\r\n\r\n\t\t//戦闘のサブフェーズを返す。各BattlePhase内で使用され、処理の進行を制御する。\r\n\t\t// initialize：初期化を行う状態\r\n\t\t// normal：行動アクターが選択されていない状態\r\n\t\t// actor_move：移動範囲が表示され、移動先を選択している状態\r\n\t\t// actor_target：行動対象を選択している状態\r\n\t\t// status_window：ステータスウィンドウが開かれている状態\r\n\t\t// actor_command_window：アクターコマンドウィンドウが開かれている状態\r\n\t\t// battle_window：攻撃確認ウィンドウが開かれている状態\r\n\t\t// auto_actor_command：自動行動アクターをイベント順に行動決定する状態\r\n\t\t// auto_actor_move : 自動行動アクターが移動先を決定し、移動する状態\r\n\t\t// auto_actor_action：自動行動アクターの実際の行動を行う状態\r\n\t\t// enemy_command：エネミーをイベント順に行動決定する状態\r\n\t\t// enemy_move : エネミーが移動先を決定し、移動する状態\r\n\t\t// enemy_action：エネミーの実際の行動を行う状態\r\n\t\t// invoke_action：戦闘を実行している状態\r\n\t\t// after_battle：戦闘終了後の処理を呼び出す状態\r\n\t\tGame_System.prototype.isSubBattlePhase = function() {\r\n\t\t\treturn this._isSubBattlePhase;\r\n\t\t};\r\n\r\n\t\t//戦闘のサブフェーズを変更する\r\n\t\tGame_System.prototype.setSubBattlePhase = function(phase) {\r\n\t\t\t$SRWGameState.requestNewState(phase);\r\n\t\t\tthis._isSubBattlePhase = phase;\r\n\t\t};\r\n\r\n\t\t//自動行動・エネミーの実行ＩＤを返す\r\n\t\tGame_System.prototype.isAutoUnitId = function() {\r\n\t\t\treturn this._AutoUnitId;\r\n\t\t};\r\n\r\n\t\t//自動行動・エネミーの実行ＩＤを設定する\r\n\t\tGame_System.prototype.setAutoUnitId = function(num) {\r\n\t\t\tthis._AutoUnitId = num;\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgStatusWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgStatusWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgStatusWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgStatusWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgBattleWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgBattleWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgBattleWindowNeedRefresh = function(actionBattlerArray, targetBattlerArray) {\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [true, actionBattlerArray, targetBattlerArray];\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgBattleWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [false, null, null];\r\n\t\t};\r\n\r\n\t\t//移動範囲を表示するスプライトの最大数\r\n\t\tGame_System.prototype.spriteMoveTileMax = function() {\r\n\t\t\treturn Math.min($dataMap.width * $dataMap.height, 1000);\r\n\t\t};\r\n\r\n\t\t// 移動中のウェイトフラグを返す\r\n\t\tGame_System.prototype.srpgWaitMoving = function() {\r\n\t\t\treturn this._SrpgWaitMoving;\r\n\t\t};\r\n\r\n\t\t// 移動中のウェイトフラグを設定する\r\n\t\tGame_System.prototype.setSrpgWaitMoving = function(flag) {\r\n\t\t\tthis._SrpgWaitMoving = flag;\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgActorCommandWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgActorCommandWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgActorCommandWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgActorCommandWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgActorCommandStatusWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgActorCommandStatusWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgActorCommandStatusWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgActorCommandStatusWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t//戦闘に参加するアクターのリスト\r\n\t\tGame_System.prototype.srpgAllActors = function() {\r\n\t\t\treturn this._srpgAllActors;\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.clearSrpgAllActors = function() {\r\n\t\t\tthis._srpgAllActors = [];\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.pushSrpgAllActors = function(actor) {\r\n\t\t\tthis._srpgAllActors.push(actor);\r\n\t\t};\r\n\r\n\t\t// 探査済み座標のリスト\r\n\t\tGame_System.prototype.pushSearchedItemList = function(xy) {\r\n\t\t\tif (!this._searchedItemList) {\r\n\t\t\t\tthis._searchedItemList = [];\r\n\t\t\t}\r\n\t\t\tthis._searchedItemList.push(xy);\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.indexOfSearchedItemList = function(xy) {\r\n\t\t\tif (!this._searchedItemList) {\r\n\t\t\t\tthis._searchedItemList = [];\r\n\t\t\t}\r\n\t\t\tvar flag = -1;\r\n\t\t\tfor (var i=0; i < this._searchedItemList.length; i++) {\r\n\t\t\t\tvar xy2 = this._searchedItemList[i];\r\n\t\t\t\tif (xy[0] === xy2[0] && xy[1] === xy2[1]) {\r\n\t\t\t\t\tflag = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn flag;\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.resetSearchedItemList = function() {\r\n\t\t\tthis._searchedItemList = [];\r\n\t\t};\r\n\r\n\t//戦闘開始に関係する処理\r\n\t\t//戦闘開始するためのプラグイン・コマンド\r\n\t\tGame_System.prototype.startIntermission = function(){\r\n\t\t\tthis._isIntermission = true;\r\n\t\t\tthis._availableUnits = $gameParty.allMembers();\r\n\t\t\tthis.dummyId = 0;\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\tactor.isSubPilot = false;\r\n\t\t\t\t$statCalc.attachDummyEvent(actor, actor.SRWStats.mech.id);\r\n\t\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\t$statCalc.initSRWStats(actor);\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tthis._availableMechs = [];\r\n\t\t\tvar tmp = Object.keys($SRWSaveManager.getUnlockedUnits());\t\t\t\r\n\t\t\tfor(var i = 0; i < tmp.length; i++){\r\n\t\t\t\tvar currentPilot = $statCalc.getCurrentPilot(tmp[i]);\r\n\t\t\t\tif(!currentPilot){\r\n\t\t\t\t\tvar mechData = $statCalc.getMechData($dataClasses[tmp[i]], true);\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar result = $statCalc.createEmptyActor();\t\t\t\t\r\n\t\t\t\t\tresult.SRWStats.mech = mechData;\t\t\r\n\t\t\t\t\t$statCalc.attachDummyEvent(result, mechData.id);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis._availableMechs.push(result);\r\n\t\t\t\t\t$statCalc.invalidateAbilityCache();\t\r\n\t\t\t\t\t$statCalc.calculateSRWMechStats(mechData, false, result);\t\t\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t$gameTemp.deployMode = \"\";\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isIntermission = function(id){\r\n\t\t\treturn this._isIntermission;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAvailableUnits = function(id){\r\n\t\t\treturn this._availableUnits;\r\n\t\t}\r\n\t\t\r\n\t\t//use $gameActors.actor instead!\r\n\t\tGame_System.prototype.getActorById = function(id){\r\n\t\t\tvar result;\r\n\t\t\tvar ctr = 0; \r\n\t\t\twhile(!result && ctr < this._availableUnits.length){\r\n\t\t\t\tif(this._availableUnits[ctr].actorId() == id){\r\n\t\t\t\t\tresult = this._availableUnits[ctr];\r\n\t\t\t\t}\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.endIntermission = function(){\r\n\t\t\t$gameTemp.intermissionPending = false;\r\n\t\t\tthis._isIntermission = false;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.startSRPG = function() {\r\n\t\t\tthis._SRPGMode = true;\r\n\t\t\tthis.enableGrid = true;\r\n\t\t\t$gameTemp.listContext = \"actor\";\r\n\t\t\t$gameSwitches.setValue(_srpgBattleSwitchID, true);\r\n\t\t\tthis._isBattlePhase = 'start_srpg';\r\n\t\t\tthis._isSubBattlePhase = 'start_srpg';\r\n\t\t\t$gamePlayer.refresh();\r\n\t\t\t$gameTemp.clearActiveEvent();\r\n\t\t\t$gameTemp.actorAction = {};\r\n\t\t\t$gameTemp.enemyAction = {};\r\n\t\t\tthis.clearData(); //データの初期化\r\n\t\t\tthis.setAllEventType(); //イベントタイプの設定\r\n\t\t\tthis._availableUnits = [];\r\n\t\t\tthis.setSrpgActors(); //アクターデータの作成\r\n\t\t\tthis.setSrpgEnemys(); //エネミーデータの作成\r\n\t\t\t\r\n\t\t\t$gameMap.setEventImages();   // ユニットデータに合わせてイベントのグラフィックを変更する\r\n\t\t\tthis.runBattleStartEvent(); // ゲーム開始時の自動イベントを実行する\r\n\t\t\tthis.runAfterDeployEvent();\r\n\t\t\t//clear stage temp variables\r\n\t\t\tfor(var i = 21; i <= 60; i++){\r\n\t\t\t\t$gameVariables.setValue(i, 0);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t$gameVariables.setValue(_turnVarID, 1); //ターン数を初期化する\r\n\t\t\t$gameSystem.resetSearchedItemList(); //探索済み座標を初期化する\r\n\t\t\t$gameSystem._specialTheme = -1;\r\n\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t$gameSystem.regionHighlights = {};\r\n\t\t\t$gameSystem.enemyUpgradeLevel = 0;\r\n\t\t\t$gameSystem.persuadeOptions = {};\r\n\t\t\t$gameTemp.currentSwapSource = -1;\r\n\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t$gameSystem.defaultBattleEnv = null;\r\n\t\t\t$gameSystem.skyBattleEnv = null;\r\n\t\t\t$gameSystem.regionBattleEnv = {};\r\n\t\t\t$gameSystem.regionSkyBattleEnv = {};\r\n\t\t\t$gameSystem.stageTextId = null;\r\n\t\t\t\r\n\t\t\tif($gameSystem.foregroundSpriteToggleState == null){\r\n\t\t\t\t$gameSystem.foregroundSpriteToggleState = 0;\r\n\t\t\t}\r\n\t\t\t//$gameSystem.showWillIndicator = false;\r\n\t\t\t$gameTemp.disappearQueue = [];\r\n\r\n\t\t\t$gameSystem.actorRankLookup = $statCalc.getActorRankLookup();\r\n\t\t\t$gameTemp.AIWaitTimer = 0;\r\n\t\t\t\r\n\t\t\t$gameVariables.setValue(_masteryConditionText, APPSTRINGS.GENERAL.label_default_mastery_condition);\t\r\n\t\t\t$gameVariables.setValue(_victoryConditionText, APPSTRINGS.GENERAL.label_default_victory_condition);\t\r\n\t\t\t$gameVariables.setValue(_defeatConditionText, APPSTRINGS.GENERAL.label_default_defeat_condition);\r\n\t\t\t\r\n\t\t\t$gameSystem.factionConfig = {\r\n\t\t\t\t0: {\r\n\t\t\t\t\tattacksPlayers:true,\r\n\t\t\t\t\tattacksFactions: [1,2],\r\n\t\t\t\t\tactive: true\r\n\t\t\t\t},\r\n\t\t\t\t1: {\r\n\t\t\t\t\tattacksPlayers:false,\r\n\t\t\t\t\tattacksFactions: [0],\r\n\t\t\t\t\tactive: false\r\n\t\t\t\t},\r\n\t\t\t\t2: {\r\n\t\t\t\t\tattacksPlayers:false,\r\n\t\t\t\t\tattacksFactions: [0],\r\n\t\t\t\t\tactive: false\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t$gameTemp.preventedDeathQuotes = {};\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t\t\r\n\t\t\tSceneManager._scene.createPauseWindow(); //ensure pause menu is updated to reflect the new mode\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tGame_System.prototype.enableFaction = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].active = true;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.disableFaction = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].active = false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setFactionAggro = function(id, aggro) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].attacksFactions = [];\r\n\t\t\t\tfor(var i = 0; i < aggro.length; i++){\r\n\t\t\t\t\tif(aggro[i] == \"player\"){\r\n\t\t\t\t\t\tthis.factionConfig[id].attacksPlayers = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.factionConfig[id].attacksFactions.push(aggro[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\tGame_System.prototype.clearFactionAggro = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].attacksFactions = [];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPlayerFactionInfo = function() {\r\n\t\t\t var aggressiveFactions = [];\r\n\t\t\t if(this.factionConfig[0].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(0);\r\n\t\t\t }\r\n\t\t\t if(this.factionConfig[1].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(1);\r\n\t\t\t }\r\n\t\t\t if(this.factionConfig[2].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(2);\r\n\t\t\t }\r\n\t\t\t return {\r\n\t\t\t\tattacksPlayers:false,\r\n\t\t\t\tattacksFactions: aggressiveFactions,\r\n\t\t\t\tactive: true \r\n\t\t\t };\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getFactionId = function(actor) {\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn \"player\";\r\n\t\t\t} else {\r\n\t\t\t\treturn actor.factionId;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getEnemyFactionInfo = function(enemy) {\r\n\t\t\t return this.factionConfig[enemy.factionId];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isFriendly = function(actor, factionId) {\r\n\t\t\tvar factionInfo = this.getUnitFactionInfo(actor);\r\n\t\t\tif(factionId == \"player\"){\r\n\t\t\t\treturn !factionInfo.attacksPlayers;\r\n\t\t\t} else {\r\n\t\t\t\treturn factionInfo.attacksFactions.indexOf(factionId) == -1;\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.getUnitFactionInfo = function(actor) {\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn this.getPlayerFactionInfo();\r\n\t\t\t} else {\r\n\t\t\t\treturn this.getEnemyFactionInfo(actor);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isEnemy = function(actor) {\r\n\t\t\tif(!actor.isActor){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.getEnemyFactionInfo(actor).attacksPlayers;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isEnemyPhase = function(actor) {\r\n\t\t\treturn $gameSystem.factionConfig[$gameTemp.currentFaction].attacksPlayers;\r\n\t\t}\r\n\r\n\t\t//イベントＩＤに対応するアクター・エネミーデータを初期化する\r\n\t\tGame_System.prototype.clearData = function() {\r\n\t\t\tthis._EventToUnit = [];\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t};\r\n\r\n\t\t//イベントＩＤに対応するアクター・エネミーデータをセットする\r\n\t\tGame_System.prototype.setEventToUnit = function(event_id, type, data) {\r\n\t\t\tthis._EventToUnit[event_id] = [type, data];\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.clearEventToUnit = function(event_id) {\r\n\t\t\tdelete this._EventToUnit[event_id];\r\n\t\t}\r\n\r\n\t\t//イベントＩＤから対応するアクター・エネミーデータを返す\r\n\t\tGame_System.prototype.EventToUnit = function(event_id) {\r\n\t\t\t//return this._EventToUnit[event_id];\r\n\t\t\tvar battlerArray = this._EventToUnit[event_id];\r\n\t\t\tif (battlerArray) {\r\n\t\t\t\tif (battlerArray[0] === 'actor') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(battlerArray[1]);\r\n\t\t\t\t\treturn [battlerArray[0], actor]\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn battlerArray;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//アクターＩＤから対応するイベントＩＤを返す\r\n\t\tGame_System.prototype.ActorToEvent = function(actor_id) {\r\n\t\t\tvar eventId = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tvar unit =  $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\t\tif(unit){\r\n\t\t\t\t\t\tvar actor = unit[1];\r\n\t\t\t\t\t\tif (actor && actor.actorId() == actor_id) {\r\n\t\t\t\t\t\t\teventId = event.eventId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}              \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn eventId;\r\n\t\t};\r\n\t\t\r\n\r\n\t\t// イベントのメモからイベントのタイプを設定する\r\n\t\tGame_System.prototype.setAllEventType = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.event().meta.type) {\r\n\t\t\t\t\tevent.setType(event.event().meta.type);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActorsWithAction = function(){\r\n\t\t\tvar _this = this;\t\t\r\n\t\t\tvar result = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = _this.EventToUnit(event.eventId());\r\n\t\t\t\tif(!event.isErased() && battlerArray){\r\n\t\t\t\t\tvar actor = battlerArray[1];\r\n\t\t\t\t\tif(actor.isActor() && !actor.srpgTurnEnd()){\r\n\t\t\t\t\t\tresult.push(actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// イベントのメモからアクターを読み込み、対応するイベントＩＤに紐づけする\r\n\t\tGame_System.prototype.setSrpgActors = function() {\r\n\t  \r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameVariables.setValue(_actorsDestroyed, 0);\r\n\t\t\t$gameVariables.setValue(_existShipVarId, 0);\t\r\n\r\n\t\t\tthis._availableUnits = $gameParty.allMembers();\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t\tactor.event = null;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.deployShips = function(toAnimQueue) {\t\t\r\n\t\t\tvar _this = this;\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar deployList = _this.getActiveShipDeployList();\t\t\t\r\n\t\t\t\r\n\t\t\tvar shipCtr = 0;\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) { //ensure to spawn ships first so that are drawn below the other actor sprites\r\n\t\t\t\tif (event.isType() === 'ship' && !event.isDeployed) {\r\n\t\t\t\t\tvar actor_unit;\r\n\t\t\t\t\tvar entry = deployList[shipCtr] || {};\r\n\t\t\t\t\tvar actorId = entry.main;\t\t\t\t\t\r\n\t\t\t\t\tif(typeof actorId != \"undefined\"){\r\n\t\t\t\t\t\tactor_unit = $gameActors.actor(actorId);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (actor_unit) {\r\n\t\t\t\t\t\tactor_unit.event = event;\r\n\t\t\t\t\t\t_this.pushSrpgAllActors(event.eventId());\r\n\t\t\t\t\t\tevent.isDeployed = true;\r\n\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(actor_unit.faceName()); //顔グラフィックをプリロードする\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existShipVarId);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existShipVarId, oldValue + 1);\r\n\t\t\t\t\t\t_this.setEventToUnit(event.eventId(), 'actor', actor_unit.actorId());\r\n\t\t\t\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t\t\t\tactor_unit.setSrpgTurnEnd(false);\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(toAnimQueue){\t\t\t\t\r\n\t\t\t\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tevent.appear();\r\n\t\t\t\t\t\t\t$gameMap.setEventImages();\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tshipCtr++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.deployActor = function(actor_unit, event, toAnimQueue, subId) {\r\n\t\t\tvar _this = this;\r\n\t\t\tactor_unit.event = event;\r\n\t\t\t_this.pushSrpgAllActors(event.eventId());\r\n\t\t\tevent.isDeployed = true;\r\n\t\t\tvar bitmap = ImageManager.loadFace(actor_unit.faceName()); //顔グラフィックをプリロードする\r\n\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t$gameVariables.setValue(_existActorVarID, oldValue + 1);\r\n\t\t\t_this.setEventToUnit(event.eventId(), 'actor', actor_unit.actorId());\r\n\t\t\tactor_unit.isSubPilot = false;\r\n\t\t\t\r\n\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t\r\n\t\t\t$statCalc.applyDeployActions(actor_unit.SRWStats.pilot.id, actor_unit.SRWStats.mech.id);\r\n\t\t\t\r\n\t\t\t$statCalc.applyBattleStartWill(actor_unit);\r\n\t\t\tactor_unit.SRPGActionTimesSet($statCalc.applyStatModsToValue(actor_unit, 1, [\"extra_action\"]));\r\n\t\t\tactor_unit.setSrpgTurnEnd(false);\t\r\n\t\t\tactor_unit.setBattleMode(\"\");\r\n\r\n\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: event.posX(), y: event.posY()}, null, event.eventId());\r\n\t\t\tevent.locate(position.x, position.y);\r\n\t\t\t\r\n\t\t\tif(!$gameTemp.enemyAppearQueue){\r\n\t\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t}\t\r\n\t\t\tif(toAnimQueue){\t\t\t\t\r\n\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\tevent.erase();\r\n\t\t\t\tevent.isPendingDeploy = true;\r\n\t\t\t} else {\r\n\t\t\t\tevent.appear();\r\n\t\t\t\t//event.refreshImage();\r\n\t\t\t\t$gameMap.setEventImages();\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*var deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\tvar currentSlot = -1;\r\n\t\t\tvar currentMaxSlot = -1;\r\n\t\t\t\r\n\t\t\tObject.keys(deployInfo.assigned).forEach(function(slot){\r\n\t\t\t\tif(slot > currentMaxSlot){\r\n\t\t\t\t\tcurrentMaxSlot = slot;\r\n\t\t\t\t}\r\n\t\t\t\tif(deployInfo.assigned[slot] == actor_unit.actorId()){\r\n\t\t\t\t\tcurrentSlot = slot;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\r\n\t\t\tif(currentSlot == -1){\r\n\t\t\t\tdeployInfo.assigned[currentMaxSlot+1] = actor_unit.actorId();\r\n\t\t\t}\r\n\t\t\t$gameSystem.setDeployInfo(deployInfo);*/\r\n\t\t\t\r\n\t\t\tif(subId != null){\r\n\t\t\t\tactor_unit.subTwinId = subId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t$statCalc.updateFlightState(actor_unit);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getEventDeploySlot = function(event) {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!this.eventToDeploySlot){\r\n\t\t\t\tthis.eventToDeploySlot = {};\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\t\tif(event.isType() === 'actor') {\r\n\t\t\t\t\t\t_this.eventToDeploySlot[event.eventId()] = i++;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn this.eventToDeploySlot[event.eventId()];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.highlightDeployTiles = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!$gameSystem.highlightedTiles){\r\n\t\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t}\r\n\t\t\tthis.removeDeployTileHighlights();\r\n\t\t\t$gameTemp.currentDeployTileHighlights = [];\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar i = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif(event.isType() === 'actor') {\r\n\t\t\t\t\tif(i == $gameTemp.currentSwapSource){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"#00FF00\"});\r\n\t\t\t\t\t} else if(deployInfo.lockedSlots[i]){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"yellow\"});\r\n\t\t\t\t\t} else if(deployInfo.assigned[i] && !$statCalc.canStandOnTile($gameActors.actor(deployInfo.assigned[i]), {x: event.posX(), y: event.posY()})){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"red\"});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"white\"});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.currentDeployTileHighlights.push({x: event.posX(), y: event.posY()});\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.removeDeployTileHighlights = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif($gameTemp.currentDeployTileHighlights && $gameSystem.highlightedTiles){\r\n\t\t\t\tvar tileLookup = {};\r\n\t\t\t\t$gameTemp.currentDeployTileHighlights.forEach(function(coords){\r\n\t\t\t\t\tif(!tileLookup[coords.x]){\r\n\t\t\t\t\t\ttileLookup[coords.x] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttileLookup[coords.x][coords.y] = true;\r\n\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tvar tmp = [];\r\n\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\t\tif(!tileLookup[$gameSystem.highlightedTiles[i].x] || !tileLookup[$gameSystem.highlightedTiles[i].x][$gameSystem.highlightedTiles[i].y]){\r\n\t\t\t\t\t\ttmp.push($gameSystem.highlightedTiles);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.highlightedTiles = tmp;\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.undeployActors = function(){\r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t\t$gameMap.events().forEach(function(event) {\t\t\t\r\n\t\t\t\tif (event.isType() === 'actor') {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.redeployActors = function(validatePositions){                                                                                                                                                                                                                             \r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor') {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t}\r\n\t\t\t });\r\n\t\t\t this.deployActors(false, $gameTemp.manualDeployType, validatePositions);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.redeployActor = function(actorId, toAnimQueue){  \r\n\t\t\tvar actor = $gameActors.actor(actorId);\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.eventId() === actor.event.eventId()) {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.deployActor(actor, actor.event, toAnimQueue);\r\n\t\t\tactor.initImages(actor.SRWStats.mech.classData.meta.srpgOverworld.split(\",\"));\r\n\t\t\tif(!toAnimQueue){\r\n\t\t\t\tactor.event.refreshImage();\r\n\t\t\t}\t\t \r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.deployActors = function(toAnimQueue, lockedOnly, validatePositions) {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(lockedOnly == null){\r\n\t\t\t\tlockedOnly = \"all\";\r\n\t\t\t}\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar deployList = _this.getActiveDeployList();\r\n\t\t\tvar i = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' && !event.isDeployed) {\r\n\t\t\t\t\tvar actor_unit;\r\n\t\t\t\t\tvar entry = deployList[i] || {};\r\n\t\t\t\t\tvar actorId =entry.main;\t\t\r\n\t\t\t\t\tif(lockedOnly == \"all\" || (lockedOnly == \"locked\" && deployInfo.lockedSlots[i]) || (lockedOnly == \"unlocked\" && !deployInfo.lockedSlots[i])){\r\n\t\t\t\t\t\tif(typeof actorId != \"undefined\"){\r\n\t\t\t\t\t\t\tactor_unit = $gameActors.actor(actorId);\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\tif (actor_unit) {\r\n\t\t\t\t\t\t\tvar validPosition;\r\n\t\t\t\t\t\t\tif(validatePositions && !deployInfo.lockedSlots[i]){\r\n\t\t\t\t\t\t\t\tvalidPosition = $statCalc.canStandOnTile(actor_unit, {x: event.posX(), y: event.posY()})\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvalidPosition = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(validPosition){\r\n\t\t\t\t\t\t\t\t_this.deployActor(actor_unit, event, toAnimQueue, entry.sub);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\t\r\n\t\t\t\t\ti++;\t\r\n\t\t\t\t}\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t// イベントのメモからエネミーを読み込み、対応するイベントＩＤに紐づけする\r\n\t\tGame_System.prototype.setSrpgEnemys = function() {\r\n\t\t\t$gameVariables.setValue(_existEnemyVarID, 0);\r\n\t\t\t$gameVariables.setValue(_enemiesDestroyed, 0);\r\n\t\t\tvar i = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemy') {\r\n\t\t\t\t\tvar enemyId = event.event().meta.id ? Number(event.event().meta.id) : 1;\r\n\t\t\t\t\tvar enemy_unit = new Game_Enemy(enemyId, 0, 0);\t\t\t\t\r\n\t\t\t\t\tenemy_unit._mechClass = parseInt(event.event().meta.mechClass)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (enemy_unit) {\r\n\t\t\t\t\t\tenemy_unit.event = event;\r\n\t\t\t\t\t\tif (event.event().meta.mode) {\r\n\t\t\t\t\t\t\tenemy_unit.setBattleMode(event.event().meta.mode);\r\n\t\t\t\t\t\t\tif (event.event().meta.targetId) {\r\n\t\t\t\t\t\t\t\tenemy_unit.setTargetId(event.event().meta.targetId);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tenemy_unit.initTp(); //TPを初期化\r\n\t\t\t\t\t\tvar faceName = enemy_unit.enemy().meta.faceName; //顔グラフィックをプリロードする\r\n\t\t\t\t\t\tif (faceName) {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(faceName);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\t\tvar bitmap = ImageManager.loadSvEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar bitmap = ImageManager.loadEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\t\t\t$gameSystem.setEventToUnit(event.eventId(), 'enemy', enemy_unit);\r\n\t\t\t\t\t\t$statCalc.initSRWStats(enemy_unit);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//２イベント間の距離を返す\r\n\t\tGame_System.prototype.unitDistance = function(event1, event2) {\r\n\t\t\tvar minDisX = Math.abs(event1.posX() - event2.posX());\r\n\t\t\tvar minDisY = Math.abs(event1.posY() - event2.posY());\r\n\t\t\tif ($gameMap.isLoopHorizontal() == true) {\r\n\t\t\t\tvar event1X = event1.posX() > event2.posX() ? event1.posX() - $gameMap.width() : event1.posX() + $gameMap.width();\r\n\t\t\t\tvar disX = Math.abs(event1X - event2.posX());\r\n\t\t\t\tminDisX = minDisX < disX ? minDisX : disX;\r\n\t\t\t}\r\n\t\t\tif ($gameMap.isLoopVertical() == true) {\r\n\t\t\t\tvar event1Y = event1.posY() > event2.posY() ? event1.posY() - $gameMap.height() : event1.posY() + $gameMap.height();\r\n\t\t\t\tvar disY = Math.abs(event1Y - event2.posY());\r\n\t\t\t\tminDisY = minDisY < disY ? minDisY : disY;\r\n\t\t\t}\r\n\t\t\treturn minDisX + minDisY;\r\n\t\t};\r\n\r\n\t//戦闘終了に関係する処理\r\n\t\t//戦闘終了するためのプラグイン・コマンド\r\n\t\tGame_System.prototype.endSRPG = function() {\r\n\t\t\t$gameTemp.clearActiveEvent();\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tif (_srpgBattleEndAllHeal == 'true') {\r\n\t\t\t\t\t\tbattlerArray[1].recoverAll();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbattlerArray[1].onTurnEnd();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._SRPGMode = false;\r\n\t\t\t$gameSwitches.setValue(_srpgBattleSwitchID, false);\r\n\t\t\tthis._isBattlePhase = 'initialize';\r\n\t\t\tthis._isSubBattlePhase = 'initialize';\r\n\t\t\t$gamePlayer.refresh();\r\n\t\t\tthis.clearData(); //データの初期化\r\n\t\t\t$gameMap.setEventImages();   // ユニットデータに合わせてイベントのグラフィックを変更する\r\n\t\t\t\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t\tSceneManager._scene.createPauseWindow(); //ensure pause menu is updated to reflect the new mode\r\n\t\t};\r\n\r\n\t//戦闘の進行に関係する処理\r\n\t\t// 戦闘開始時のイベントを起動する\r\n\t\tGame_System.prototype.runBattleStartEvent = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'battleStart') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.runAfterDeployEvent = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'afterDeploy') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(R)\r\n\t\tGame_System.prototype.getNextRActor = function() {\r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\");\r\n\t\t\tthis.actorLRId++;\r\n\t\t\tif(this.actorLRId >= candidates.length){\r\n\t\t\t\tthis.actorLRId = 0;\r\n\t\t\t}\r\n\t\t\tvar candidate = candidates[this.actorLRId];\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \r\n\t\t}\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(L)\r\n\t\tGame_System.prototype.getNextLActor = function() {       \r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\");\r\n\t\t\tthis.actorLRId--;\r\n\t\t\tif(this.actorLRId < 0){\r\n\t\t\t\tthis.actorLRId = candidates.length-1;\r\n\t\t\t}\r\n\t\t\tvar candidate = candidates[this.actorLRId];\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}        \r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isValidAttackTarget = function(candidate){\r\n\t\t\tvar actionBattlerArray = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId());\r\n\t\t\tvar targetBattlerArray = $gameSystem.EventToUnit(candidate.event.eventId());\r\n\t\t   \r\n\t\t\tvar isInRange = $battleCalc.isTargetInRange({x: $gameTemp.activeEvent()._x, y: $gameTemp.activeEvent()._y}, {x: candidate.event.posX(), y: candidate.event.posY()}, $statCalc.getRealWeaponRange(actionBattlerArray[1], $gameTemp.actorAction.attack), $gameTemp.actorAction.attack.minRange);\r\n\t\t\tvar validTarget = $statCalc.canUseWeapon(actionBattlerArray[1], $gameTemp.actorAction.attack, false, targetBattlerArray[1]);\r\n\t\t\t\r\n\t\t\treturn isInRange && validTarget;\r\n\t\t}                               \r\n\t\t\r\n\t\tGame_System.prototype.getNextRTarget = function() {\r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetLRId++;\r\n\t\t\t\tif(this.targetLRId >= candidates.length){\r\n\t\t\t\t\tthis.targetLRId = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.isValidAttackTarget(candidates[this.targetLRId])){\r\n\t\t\t\t\tcandidate = candidates[this.targetLRId];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \r\n\t\t}\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(L)\r\n\t\tGame_System.prototype.getNextLTarget = function() {       \r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetLRId--;\r\n\t\t\t\tif(this.targetLRId < 0){\r\n\t\t\t\t\tthis.targetLRId = candidates.length-1;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.isValidAttackTarget(candidates[this.targetLRId])){\r\n\t\t\t\t\tcandidate = candidates[this.targetLRId];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \t\t\r\n\t\t}\r\n\r\n\t\t//アクターターンの開始\r\n\t\tGame_System.prototype.srpgStartActorTurn = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\t$gameTemp.currentFaction = -1;\r\n\t\t\t$songManager.playStageSong();\r\n\t\t\tthis.aliveActorIdList = [];\r\n\t\t\tthis.actorLRId = 0;\r\n\t\t\tthis.targetLRId = 0;\r\n\t\t\tvar spiritActivations = [];\r\n\t\t\tvar AIActors = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actorTurn') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'actor' && battlerArray[1].isAlive() && !event.isErased()) {\r\n\t\t\t\t\t$gameSystem.aliveActorIdList.push(event.eventId());\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet($statCalc.applyStatModsToValue(battlerArray[1], 1, [\"extra_action\"]));\r\n\t\t\t\t\tvar SPRegen = 0;\r\n\t\t\t\t\tSPRegen = $statCalc.applyStatModsToValue(battlerArray[1], SPRegen, [\"SP_regen\"]);\r\n\t\t\t\t\tif(ENGINE_SETTINGS.VXT_SP){\r\n\t\t\t\t\t\tSPRegen+=5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(ENGINE_SETTINGS.DEFAULT_SP_REGEN){\r\n\t\t\t\t\t\tSPRegen+=ENGINE_SETTINGS.DEFAULT_SP_REGEN;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($gameVariables.value(_turnVarID) != 1){\r\n\t\t\t\t\t\t$statCalc.recoverSP(battlerArray[1], SPRegen);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar autoSpirits = $statCalc.getModDefinitions(battlerArray[1], [\"auto_spirit\"]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tautoSpirits.forEach(function(autoSpirit){\t\t\r\n\t\t\t\t\t\t$statCalc.setAbilityUsed(battlerArray[1], \"auto_spirit_\"+autoSpirit.stackId);\r\n\t\t\t\t\t\tspiritActivations.push({actor: battlerArray[1], spirit: autoSpirit.value});\t\t\t\t\r\n\t\t\t\t\t});\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($statCalc.isAI(battlerArray[1])){\r\n\t\t\t\t\t\tAIActors.push(event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'enemy' && battlerArray[1].isAlive()) {\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet(1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"strike\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"wall\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"focus\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"disrupt\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"analyse\");\r\n\t\t\t$statCalc.clearTempEffectOnAll(\"actor\", \"victory_turn\");\r\n\t\t\t$statCalc.resetAllBattleTemp();\r\n\t\t\t$statCalc.resetAllStatus(\"enemy\");\r\n\t\t\tif($gameVariables.value(_turnVarID) != 1){\r\n\t\t\t\t$statCalc.applyTurnStartWill(\"actor\");\r\n\t\t\t}\r\n\t\t\t$statCalc.applyENRegen(\"actor\");\r\n\t\t\t$statCalc.applyAmmoRegen(\"actor\");\r\n\t\t\t$statCalc.applyHPRegen(\"actor\");\r\n\t\t\tthis.aliveActorIdList.sort(function(a, b) {\r\n\t\t\t\treturn a - b;\r\n\t\t\t});\r\n\t\t\tvar actor1 = $gameMap.event(this.aliveActorIdList[0]);\r\n\t\t\tif (actor1) {\r\n\t\t\t\t$gamePlayer.locate(actor1.posX(), actor1.posY());\r\n\t\t\t}\r\n\t\t\t$gameTemp.autoSpirits = spiritActivations;\r\n\t\t\t$gameTemp.autoSpiritsDelay = 150;\r\n\t\t\t\r\n\t\t\t_this.setBattlePhase('actor_phase');\r\n\t\t\t\r\n\t\t\t$gameTemp.AIActors = AIActors;\r\n\t\t\tif(spiritActivations.length){\t\t\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('auto_spirits');\r\n\t\t\t} else if($gameTemp.AIActors.length){\r\n\t\t\t\t_this.setBattlePhase('AI_phase');\r\n\t\t\t\t_this.setSubBattlePhase('enemy_command');\r\n\t\t\t} else {\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('initialize');\r\n\t\t\t}\t\r\n\t\t};\r\n\r\n\t\t//自動行動アクターターンの開始\r\n\t\tGame_System.prototype.srpgStartAutoActorTurn = function() {\r\n\t\t\tthis.setBattlePhase('auto_actor_phase');\r\n\t\t\tthis.setSubBattlePhase('auto_actor_command');\r\n\t\t};\r\n\r\n\t\t//エネミーターンの開始\r\n\t\tGame_System.prototype.srpgStartEnemyTurn = function(factionId) {\r\n\t\t\tvar _this = this;\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t$gameTemp.showAllyAttackIndicator = false;\r\n\t\t\t$gameTemp.showAllyDefendIndicator = false;\r\n\t\t\t$gameTemp.showEnemyAttackIndicator = false;\r\n\t\t\t$gameTemp.showEnemyDefendIndicator = false;\r\n\t\t\t$gameTemp.currentFaction = factionId;\r\n\t\t\tif(factionId > 2){\r\n\t\t\t\t$gameSystem.srpgTurnEnd();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!$gameSystem.factionConfig[factionId].active){\r\n\t\t\t\t$gameTemp.currentFaction++;\r\n\t\t\t\tthis.srpgStartEnemyTurn($gameTemp.currentFaction);\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\r\n\t\t\t$songManager.playStageSong();\r\n\t\t\tvar spiritActivations = [];\r\n\t\t\t$gameTemp.AIActors = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemyTurn') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'enemy' && battlerArray[1].isAlive()) {\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet($statCalc.applyStatModsToValue(battlerArray[1], 1, [\"extra_action\"]));\r\n\t\t\t\t\tvar SPRegen = 0;\r\n\t\t\t\t\tSPRegen = $statCalc.applyStatModsToValue(battlerArray[1], SPRegen, [\"SP_regen\"]);\r\n\t\t\t\t\t$statCalc.recoverSP(battlerArray[1], SPRegen);\r\n\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.AIActors.push(event);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar autoSpirits = $statCalc.getModDefinitions(battlerArray[1], [\"auto_spirit\"]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tautoSpirits.forEach(function(autoSpirit){\t\r\n\t\t\t\t\t\t$statCalc.setAbilityUsed(actor, \"auto_spirit_\"+autoSpirit.stackId);\r\n\t\t\t\t\t\tspiritActivations.push({actor: battlerArray[1], spirit: autoSpirit.value});\t\t\t\t\r\n\t\t\t\t\t});\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"strike\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"wall\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"focus\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"disrupt\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"analyse\");\r\n\t\t\t$statCalc.applyTurnStartWill(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyENRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyAmmoRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyHPRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.resetAllBattleTemp(null, factionId);\r\n\t\t\t$statCalc.resetAllStatus(\"actor\");\r\n\t\t\t$gameTemp.AIWaitTimer = 0;\r\n\t\t\t\r\n\t\t\t$gameTemp.autoSpirits = spiritActivations;\r\n\t\t\t$gameTemp.autoSpiritsDelay = 150;\r\n\t\t\t\r\n\t\t\tif(spiritActivations.length){\t\t\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('auto_spirits');\r\n\t\t\t} //else if($gameTemp.AIActors.length){\r\n\t\t\t\t_this.setBattlePhase('AI_phase');\r\n\t\t\t\t_this.setSubBattlePhase('enemy_command');\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t\t//this.setSubBattlePhase('enemy_command');\r\n\t\t};\r\n\r\n\t\t//ターン終了\r\n\t\tGame_System.prototype.srpgTurnEnd = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tbattlerArray[1].onTurnEnd();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'turnEnd') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.srpgTurnPlus();\r\n\t\t\tthis.srpgStartActorTurn();//アクターターンを開始する\r\n\t\t};\r\n\r\n\t\t//ターン数を増やす\r\n\t\tGame_System.prototype.srpgTurnPlus = function() {\r\n\t\t\tvar oldValue = $gameVariables.value(_turnVarID);\r\n\t\t\t$gameVariables.setValue(_turnVarID, oldValue + 1);\r\n\t\t\t\r\n\t\t\tvar oldValue = $gameVariables.value(_turnCountVariable);\r\n\t\t\t$gameVariables.setValue(_turnCountVariable, oldValue + 1);\r\n\t\t};\r\n\r\n\t//戦闘の計算に関係する処理\r\n\t\t// 移動範囲および攻撃範囲を計算・表示する\r\n\t\tGame_System.prototype.srpgMakeMoveTable = function(event) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\r\n\t\t\tvar moveRange = $statCalc.getCurrentMoveRange(battlerArray[1]);\r\n\t\t\t$gameTemp.clearMoveTable();\r\n\t\t\t$gameTemp.initialMoveTable(event.posX(), event.posY(), battlerArray[1].srpgThroughTag());\r\n\t\t\tevent.makeMoveTable(event.posX(), event.posY(), moveRange, [0], battlerArray[1]);\r\n\t\t\tvar list = $gameTemp.moveList();\r\n\t\t\t\r\n\t\t\t$gameTemp.pushRangeListToMoveList();\r\n\t\t};\r\n\r\n\t\t//移動先にアクターまたはエネミーがいる場合は移動できない（重なりを避ける）\r\n\t\tGame_System.prototype.areTheyNoUnits = function(x, y, type) {\r\n\t\t\tvar flag = true;\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event._eventId);\r\n\t\t\t\tif (battlerArray && event != $gameTemp.activeEvent() && !event.isErased() &&\r\n\t\t\t\t\tbattlerArray[0] === type || event.isType() === 'playerEvent') {\r\n\t\t\t\t\tflag = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn flag;\r\n\t\t};\r\n\r\n\t\t//移動先にイベントユニットがあるかどうか\r\n\t\tGame_System.prototype.isThereEventUnit = function(x, y) {\r\n\t\t\tvar flag = false;\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'unitEvent') {\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn flag;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getTwinInfo = function() {\r\n\t\t\tif(!$gameSystem.twinInfo){\r\n\t\t\t\t$gameSystem.twinInfo = {};\r\n\t\t\t} \r\n\t\t\treturn $gameSystem.twinInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getIsTwinInfo = function() {\r\n\t\t\tif(!$gameSystem.isTwinInfo){\r\n\t\t\t\t$gameSystem.isTwinInfo = {};\r\n\t\t\t} \r\n\t\t\treturn $gameSystem.isTwinInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPreferredSlotInfo = function() {\r\n\t\t\tif(!this.preferredSlotInfo){\r\n\t\t\t\tthis.preferredSlotInfo = {};\r\n\t\t\t} \r\n\t\t\treturn this.preferredSlotInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPreferredShipSlotInfo = function() {\r\n\t\t\tif(!this.preferredShipSlotInfo){\r\n\t\t\t\tthis.preferredShipSlotInfo = {};\r\n\t\t\t} \r\n\t\t\treturn this.preferredShipSlotInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.invalidateDeployList = function() {\r\n\t\t\t$gameSystem.deployList = null;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getDeployList = function() {\r\n\t\t\tif(!$gameSystem.deployList){\r\n\t\t\t\tthis.constructDeployList();\r\n\t\t\t}\r\n\t\t\treturn $gameSystem.deployList;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getShipDeployList = function() {\r\n\t\t\tif(!$gameSystem.shipDeployList){\r\n\t\t\t\tthis.constructShipDeployList();\r\n\t\t\t}\r\n\t\t\treturn $gameSystem.shipDeployList;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActiveDeployList = function() {\r\n\t\t\treturn this._activeDeploylist;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setActiveDeployList = function(list) {\r\n\t\t\tthis._activeDeploylist = list;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActiveShipDeployList = function() {\r\n\t\t\treturn this._activeShipDeploylist;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setActiveShipDeployList = function(list) {\r\n\t\t\tthis._activeShipDeploylist = list;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.constructDeployList = function(forShips) {\r\n\t\t\t$gameSystem.deployList = [];\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tvar usedUnits = {};\r\n\t\t\tvar slotLookup = {};\r\n\t\t\t\r\n\t\t\tvar validActors = {};\r\n\t\t\tvar candidates = $gameSystem.getAvailableUnits();\t\r\n\t\t\tvar tmp = [];\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif($statCalc.isValidForDeploy(candidate) && !$statCalc.isShip(candidate)){\r\n\t\t\t\t\tvalidActors[candidate.actorId()] = true;\r\n\t\t\t\t\ttmp.push(candidate);\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\tcandidates = tmp;\r\n\t\t\t\r\n\t\t\tvar sortedCandidates = [];\r\n\t\t\tvar usedActors = {};\r\n\t\t\tvar preferredSlotInfo = this.getPreferredSlotInfo();\r\n\t\t\tObject.keys(preferredSlotInfo).forEach(function(slot){\r\n\t\t\t\tvar info = preferredSlotInfo[slot];\t\t\t\r\n\t\t\t\tvar entry = {\r\n\t\t\t\t\tmain: null,\r\n\t\t\t\t\tsub: null\r\n\t\t\t\t};\r\n\t\t\t\tisValid = false;\r\n\t\t\t\tif(info.main != -1 && validActors[info.main]){\r\n\t\t\t\t\tentry.main = info.main;\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tusedActors[entry.main] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(info.sub != -1 && validActors[info.sub]){\r\n\t\t\t\t\tentry.sub = info.sub;\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tusedActors[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(isValid){\r\n\t\t\t\t\tsortedCandidates.push(entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\ttmp.forEach(function(candidate){\r\n\t\t\t\tif(!usedActors[candidate.actorId()]){\r\n\t\t\t\t\tsortedCandidates.push({\r\n\t\t\t\t\t\tmain: candidate.actorId(),\r\n\t\t\t\t\t\tsub: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(sortedCandidates.length){\t\r\n\t\t\t\tvar entry = {};\r\n\t\t\t\tif(i < deployInfo.count){\t\t\t\t\r\n\t\t\t\t\tvar isPredefined = false;\r\n\t\t\t\t\tif(deployInfo.assigned[i] && validActors[deployInfo.assigned[i]]){\r\n\t\t\t\t\t\tentry.main = deployInfo.assigned[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(deployInfo.assignedSub[i] && validActors[deployInfo.assigned[i]]){\r\n\t\t\t\t\t\tentry.sub = deployInfo.assignedSub[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!isPredefined){\r\n\t\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t\t} \t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.main]){\r\n\t\t\t\t\tentry.main = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.sub]){\r\n\t\t\t\t\tentry.sub = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(entry.main || entry.sub){\r\n\t\t\t\t\t$gameSystem.deployList.push(entry);\t\t\t\t\t\t\t\r\n\t\t\t\t\tusedUnits[entry.main] = true;\r\n\t\t\t\t\tusedUnits[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.constructShipDeployList = function() {\r\n\t\t\t$gameSystem.shipDeployList = [];\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tvar usedUnits = {};\r\n\t\t\t\r\n\t\t\tvar validActors = {};\r\n\t\t\tvar candidates = $gameSystem.getAvailableUnits();\t\r\n\t\t\tvar tmp = [];\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif($statCalc.isValidForDeploy(candidate) && $statCalc.isShip(candidate)){\r\n\t\t\t\t\tvalidActors[candidate.actorId()] = true;\r\n\t\t\t\t\ttmp.push(candidate);\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\tcandidates = tmp;\r\n\t\t\t\r\n\t\t\tvar sortedCandidates = [];\r\n\t\t\tvar usedActors = {};\r\n\t\t\tvar preferredSlotInfo = this.getPreferredShipSlotInfo();\r\n\t\t\tObject.keys(preferredSlotInfo).forEach(function(slot){\r\n\t\t\t\tvar info = preferredSlotInfo[slot];\t\t\t\r\n\t\t\t\tvar entry = {\r\n\t\t\t\t\tmain: null,\r\n\t\t\t\t\tsub: null\r\n\t\t\t\t};\r\n\t\t\t\tisValid = false;\r\n\t\t\t\tif(info.main != -1 && validActors[info.main]){\r\n\t\t\t\t\tentry.main = info.main;\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tusedActors[entry.main] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(isValid){\r\n\t\t\t\t\tsortedCandidates.push(entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\ttmp.forEach(function(candidate){\r\n\t\t\t\tif(!usedActors[candidate.actorId()]){\r\n\t\t\t\t\tsortedCandidates.push({\r\n\t\t\t\t\t\tmain: candidate.actorId(),\r\n\t\t\t\t\t\tsub: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(sortedCandidates.length){\t\r\n\t\t\t\tvar entry = {};\r\n\t\t\t\tif(i < deployInfo.shipCount){\t\t\t\t\r\n\t\t\t\t\tvar isPredefined = false;\r\n\t\t\t\t\tif(deployInfo.assignedShips[i] && validActors[deployInfo.assignedShips[i]]){\r\n\t\t\t\t\t\tentry.main = deployInfo.assignedShips[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!isPredefined){\r\n\t\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t\t} \t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.main]){\r\n\t\t\t\t\tentry.main = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.sub]){\r\n\t\t\t\t\tentry.sub = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(entry.main || entry.sub){\r\n\t\t\t\t\t$gameSystem.shipDeployList.push(entry);\t\t\t\t\t\t\t\r\n\t\t\t\t\tusedUnits[entry.main] = true;\r\n\t\t\t\t\tusedUnits[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.syncPreferredSlots = function() {\r\n\t\t\tvar deployInfo = this.getDeployList();\r\n\t\t\tthis.preferredSlotInfo = {};\r\n\t\t\tfor(var i = 0; i < deployInfo.length; i++){\r\n\t\t\t\tthis.preferredSlotInfo[i] = deployInfo[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getDeployInfo = function() {\r\n\t\t\tvar info = $gameVariables.value(_nextMapDeployVariable);\r\n\t\t\tif(!info){\r\n\t\t\t\tinfo = {\r\n\t\t\t\t\tcount: 0,\r\n\t\t\t\t\tshipCount: 0,\r\n\t\t\t\t\tassigned: {},\r\n\t\t\t\t\tassignedSub: {},\r\n\t\t\t\t\tassignedShips: {},\r\n\t\t\t\t\tlockedSlots: {},\t\t\r\n\t\t\t\t\tlockedShipSlots: {},\t\r\n\t\t\t\t\tfavorites: {}\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tinfo = JSON.parse(info);\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.setDeployInfo = function(info) {\r\n\t\t\tthis.invalidateDeployList();\r\n\t\t\t$gameVariables.setValue(_nextMapDeployVariable, JSON.stringify(info));\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.clearActorDeployInfo = function(actorId) {\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tObject.keys(deployInfo.assigned).forEach(function(slot){\r\n\t\t\t\tif(deployInfo.assigned[slot] == actorId){\r\n\t\t\t\t\tdelete deployInfo.assigned[slot];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.setDeployInfo(deployInfo);\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPersuadeOption = function(actor) {\r\n\t\t\tif(this.persuadeOptions && actor.isActor()){\r\n\t\t\t\tvar lookup = this.persuadeOptions[actor.actorId()];\r\n\t\t\t\tif(lookup){\r\n\t\t\t\t\tvar event = actor.event;\r\n\t\t\t\t\tvar position = {x: event.posX(), y: event.posY()};\r\n\t\t\t\t\tvar adjacentEvents = $statCalc.getAdjacentEvents(null, position);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar option;\r\n\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\twhile(!option && ctr < adjacentEvents.length){\r\n\t\t\t\t\t\tvar eventId = adjacentEvents[ctr].eventId();\r\n\t\t\t\t\t\tif(lookup[eventId] != null){\r\n\t\t\t\t\t\t\toption = {eventId: eventId, controlVar: lookup[eventId]};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tctr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn option;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t} \r\n\t\t\treturn null;\t\t\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getUnitSceneBgId = function(actor) {\r\n\t\t\tif($gameTemp.editMode){\r\n\t\t\t\treturn $SRWEditor.getBattleEnvironmentId();\r\n\t\t\t} else {\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\tvar region = $gameMap.regionId(event.posX(), event.posY());\r\n\t\t\t\tif($statCalc.isFlying(actor)){\r\n\t\t\t\t\tif($gameSystem.regionSkyBattleEnv[region] != null){\r\n\t\t\t\t\t\treturn $gameSystem.regionSkyBattleEnv[region];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($gameSystem.skyBattleEnv){\r\n\t\t\t\t\t\treturn $gameSystem.skyBattleEnv;\r\n\t\t\t\t\t} \r\n\t\t\t\t} \r\n\t\t\t\tif($gameSystem.regionBattleEnv[region] != null){\r\n\t\t\t\t\treturn $gameSystem.regionBattleEnv[region];\r\n\t\t\t\t}\r\n\t\t\t\treturn $gameSystem.defaultBattleEnv;\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.validateAbilityLockInfo = function(actorId, abilityId) {\r\n\t\t\tif(!this.abilityLockInfo){\r\n\t\t\t\tthis.abilityLockInfo = {\r\n\t\t\t\t\tactor: {},\r\n\t\t\t\t\tmech: {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityStatus = function(abilityInfo, id, abilityId, status) {\r\n\t\t\t//status: hidden, locked, \"\"\r\n\t\t\tif(!abilityInfo[id]){\r\n\t\t\t\tabilityInfo[id] = {};\r\n\t\t\t}\r\n\t\t\tabilityInfo[id][abilityId] = status;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAbilityStatus = function(abilityInfo, id, abilityId) {\r\n\t\t\t//status: hidden, locked, \"\"\t\t\r\n\t\t\tvar result = \"\";\r\n\t\t\tif(abilityInfo[id] && abilityInfo[id][abilityId]){\r\n\t\t\t\tresult = abilityInfo[id][abilityId];\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setPilotAbilityStatus = function(actorId, abilityId, status) {\t\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\tthis.setAbilityStatus(this.abilityLockInfo.actor, actorId, abilityId, status);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPilotAbilityStatus = function(actorId, abilityId) {\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\treturn this.getAbilityStatus(this.abilityLockInfo.actor, actorId, abilityId);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isHiddenActorAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\tvar status = this.getPilotAbilityStatus(actor.actorId(), abilityId);\r\n\t\t\t\tresult = status == \"hidden\" || status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isLockedActorAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\tvar status = this.getPilotAbilityStatus(actor.actorId(), abilityId);\r\n\t\t\t\tresult = status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setMechAbilityStatus = function(mechId, abilityId, status) {\t\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\tthis.setAbilityStatus(this.abilityLockInfo.mech, mechId, abilityId, status);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getMechAbilityStatus = function(mechId, abilityId) {\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\treturn this.getAbilityStatus(this.abilityLockInfo.mech, mechId, abilityId);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isHiddenMechAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.SRWStats && actor.SRWStats.mech){\r\n\t\t\t\tvar status = this.getMechAbilityStatus(actor.SRWStats.mech.id, abilityId);\r\n\t\t\t\tresult = status == \"hidden\" || status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isLockedMechAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.SRWStats && actor.SRWStats.mech){\r\n\t\t\t\tvar status = this.getMechAbilityStatus(actor.SRWStats.mech.id, abilityId);\r\n\t\t\t\tresult = status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.validateTransformationLockInfo = function() {\r\n\t\t\tif(!this.transformationLockInfo){\r\n\t\t\t\tthis.transformationLockInfo = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isTransformationLocked = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(this.transformationLockInfo[mechId]){\r\n\t\t\t\treturn this.transformationLockInfo[mechId][index];\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.lockTransformation = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(!this.transformationLockInfo[mechId]){\r\n\t\t\t\tthis.transformationLockInfo[mechId] = {};\r\n\t\t\t}\r\n\t\t\tthis.transformationLockInfo[mechId][index] = true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.lockAllTransformations = function() {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tfor(var i = 1; i < $dataClasses.length; i++){\r\n\t\t\t\tvar mechProperties = $dataClasses[i].meta;\r\n\t\t\t\tvar transformsInto;\r\n\t\t\t\ttransformsInto = mechProperties.mechTransformsInto * 1 || -1;\t\r\n\t\t\t\tif(transformsInto == -1 && mechProperties.mechTransformsInto != null){\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\ttransformsInto = JSON.parse(mechProperties.mechTransformsInto);\r\n\t\t\t\t\t} catch(e){\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(transformsInto && transformsInto != -1){\r\n\t\t\t\t\tif(!Array.isArray(transformsInto)){\r\n\t\t\t\t\t\ttransformsInto = [transformsInto];\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttransformsInto = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis.transformationLockInfo[i] = {};\r\n\t\t\t\tfor(var j = 0; j < transformsInto.length; j++){\t\t\t\t\r\n\t\t\t\t\tthis.transformationLockInfo[i][j] = true;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.unlockTransformation = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(this.transformationLockInfo[mechId]){\r\n\t\t\t\tthis.transformationLockInfo[mechId][index] = false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.unlockAllTransformations = function() {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tfor(var i = 1; i < $dataClasses.length; i++){\r\n\t\t\t\tdelete this.transformationLockInfo[i];\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tGame_System.prototype.validateAbilityUpgradesInfo = function(type) {\r\n\t\t\tif(!this.abilityUpgradesInfo){\r\n\t\t\t\tthis.abilityUpgradesInfo = {}\r\n\t\t\t}\r\n\t\t\tif(!this.abilityUpgradesInfo[type]){\r\n\t\t\t\tthis.abilityUpgradesInfo[type] = {};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityUpgrade = function(type, baseIdx, upgradeIdx) {\r\n\t\t\tthis.validateAbilityUpgradesInfo(type);\r\n\t\t\tthis.abilityUpgradesInfo[type][baseIdx] = upgradeIdx;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAbilityUpgrades = function(type) {\r\n\t\t\tthis.validateAbilityUpgradesInfo(type);\r\n\t\t\treturn this.abilityUpgradesInfo[type];\r\n\t\t}\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/GameSystem.js?");

/***/ }),

/***/ "./js/SRW Core/GameTemp.js":
/*!*********************************!*\
  !*** ./js/SRW Core/GameTemp.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// ●Game_Temp\r\n\t\t//====================================================================\r\n\t\t//初期化処理\r\n\t\tvar _SRPG_Game_Temp_initialize = Game_Temp.prototype.initialize;\r\n\t\tGame_Temp.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_Temp_initialize.call(this);\r\n\t\t\tthis._MoveTable = [];\r\n\t\t\tthis._MoveList = [];\r\n\t\t\tthis._RangeTable = [];\r\n\t\t\tthis._RangeList = [];\r\n\t\t\tthis._ResetMoveList = false;\r\n\t\t\tthis._SrpgDistance = 0;\r\n\t\t\tthis._SrpgSpecialRange = true;\r\n\t\t\tthis._ActiveEvent = null;\r\n\t\t\tthis._TargetEvent = null;\r\n\t\t\tthis._OriginalPos = [];\r\n\t\t\tthis._SrpgEventList = [];\r\n\t\t\tthis._autoMoveDestinationValid = false;\r\n\t\t\tthis._autoMoveDestinationX = -1;\r\n\t\t\tthis._autoMoveDestinationY = -1;\r\n\t\t\tthis._srpgLoadFlag = false;\r\n\t\t\tthis._srpgActorEquipFlag = false;\r\n\t\t\tthis._SrpgTurnEndFlag = false;\r\n\t\t\tthis._srpgBestSearchFlag = false;\r\n\t\t\tthis._srpgBestSearchRoute = [null, []];\r\n\t\t\tthis._srpgPriorityTarget = null;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.killMenu = function(id) {\r\n\t\t\tif(!this.killMenus){\r\n\t\t\t\tthis.killMenus = {};\r\n\t\t\t}\r\n\t\t\tthis.killMenus[id] = true;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//移動範囲と移動経路を記録する配列変数を返す\r\n\t\tGame_Temp.prototype.MoveTable = function(x, y) {\r\n\t\t\treturn this._MoveTable[x][y];\r\n\t\t};\r\n\r\n\t\t//移動範囲を設定する\r\n\t\tGame_Temp.prototype.setMoveTable = function(x, y, move, route) {\r\n\t\t\tthis._MoveTable[x][y] = [move, route];\r\n\t\t};\r\n\r\n\t\t//攻撃射程と計算経路を記録する配列変数を返す\r\n\t\tGame_Temp.prototype.RangeTable = function(x, y) {\r\n\t\t\treturn this._RangeTable[x][y];\r\n\t\t};\r\n\r\n\t\t//攻撃射程を設定する\r\n\t\tGame_Temp.prototype.setRangeTable = function(x, y, move, route) {\r\n\t\t\tthis._RangeTable[x][y] = [move, route];\r\n\t\t};\r\n\r\n\t\t//移動可能な座標のリストを返す(移動範囲表示で使用)\r\n\t\tGame_Temp.prototype.moveList = function() {\r\n\t\t\treturn this._MoveList;\r\n\t\t};\r\n\r\n\t\t//移動可能な座標のリストに追加する\r\n\t\tGame_Temp.prototype.pushMoveList = function(xy) {\r\n\t\t\tthis._MoveList.push(xy);\r\n\t\t};\r\n\r\n\t\t//座標リストにデータが入っているか返す\r\n\t\tGame_Temp.prototype.isMoveListValid = function() {\r\n\t\t\treturn this._MoveList.length > 0;\r\n\t\t};\r\n\r\n\t\t//攻撃可能な座標のリストを返す(攻撃射程表示で使用)\r\n\t\tGame_Temp.prototype.rangeList = function() {\r\n\t\t\treturn this._RangeList;\r\n\t\t};\r\n\r\n\t\t//攻撃可能な座標のリストに追加する\r\n\t\tGame_Temp.prototype.pushRangeList = function(xy) {\r\n\t\t\tthis._RangeList.push(xy);\r\n\t\t};\r\n\r\n\t\t//移動範囲の配列に射程範囲の配列を結合する\r\n\t\tGame_Temp.prototype.pushRangeListToMoveList = function(array) {\r\n\t\t\tArray.prototype.push.apply(this._MoveList, this._RangeList);\r\n\t\t};\r\n\r\n\t\t//射程範囲から最低射程を除く\r\n\t\tGame_Temp.prototype.minRangeAdapt = function(oriX, oriY, minRange) {\r\n\t\t\tvar newList = [];\r\n\t\t\tfor (var i = 0; i < this._RangeList.length; i++) {\r\n\t\t\t\tvar x = this._RangeList[i][0];\r\n\t\t\t\tvar y = this._RangeList[i][1];\r\n\t\t\t\tvar dis = Math.abs(x - oriX) + Math.abs(y - oriY);\r\n\t\t\t\tif (dis >= minRange) {\r\n\t\t\t\t\tnewList.push(this._RangeList[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._RangeList = [];\r\n\t\t\tthis._RangeList = newList;\r\n\t\t};\r\n\r\n\t\t//移動範囲を初期化する\r\n\t\tGame_Temp.prototype.clearMoveTable = function() {\r\n\t\t\t$gameTemp.validTiles = {};\r\n\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = false;\r\n\t\t\tthis._MoveTable = [];\r\n\t\t\tthis._MoveList = [];\r\n\t\t\tfor (var i = 0; i < $dataMap.width; i++) {\r\n\t\t\t  var vartical = [];\r\n\t\t\t  for (var j = 0; j < $dataMap.height; j++) {\r\n\t\t\t\tvartical[j] = [-1, []];\r\n\t\t\t  }\r\n\t\t\t  this._MoveTable[i] = vartical;\r\n\t\t\t}\r\n\t\t\tthis._RangeTable = [];\r\n\t\t\tthis._RangeList = [];\r\n\t\t\tfor (var i = 0; i < $dataMap.width; i++) {\r\n\t\t\t  var vartical = [];\r\n\t\t\t  for (var j = 0; j < $dataMap.height; j++) {\r\n\t\t\t\tvartical[j] = [-1, []];\r\n\t\t\t  }\r\n\t\t\t  this._RangeTable[i] = vartical;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//移動範囲のスプライト消去のフラグを返す\r\n\t\tGame_Temp.prototype.resetMoveList = function() {\r\n\t\t\treturn this._ResetMoveList;\r\n\t\t};\r\n\r\n\t\t//移動範囲のスプライト消去のフラグを設定する\r\n\t\tGame_Temp.prototype.setResetMoveList = function(flag) {\r\n\t\t\tthis._ResetMoveList = flag;\r\n\t\t};\r\n\r\n\t\t//自身の直下は常に歩けるようにする\r\n\t\tGame_Temp.prototype.initialMoveTable = function(oriX, oriY, oriMove) {\r\n\t\t\tthis.setMoveTable(oriX, oriY, oriMove, [0]);\r\n\t\t\tthis.pushMoveList([oriX, oriY, false]);\r\n\t\t}\r\n\r\n\t\t//自身の直下は常に攻撃射程に含める\r\n\t\tGame_Temp.prototype.initialRangeTable = function(oriX, oriY, oriMove) {\r\n\t\t\tthis.setRangeTable(oriX, oriY, oriMove, [0]);\r\n\t\t\tthis.pushRangeList([oriX, oriY, true]);\r\n\t\t}\r\n\r\n\t\t//攻撃ユニットと対象の距離を返す\r\n\t\tGame_Temp.prototype.SrpgDistance = function() {\r\n\t\t\treturn this._SrpgDistance;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象の距離を設定する\r\n\t\tGame_Temp.prototype.setSrpgDistance = function(val) {\r\n\t\t\tthis._SrpgDistance = val;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象が特殊射程内にいるかを返す\r\n\t\tGame_Temp.prototype.SrpgSpecialRange = function() {\r\n\t\t\treturn this._SrpgSpecialRange;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象が特殊射程内にいるかを設定する\r\n\t\tGame_Temp.prototype.setSrpgSpecialRange = function(val) {\r\n\t\t\tthis._SrpgSpecialRange = val;\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの設定\r\n\t\tGame_Temp.prototype.activeEvent = function() {\r\n\t\t\treturn this._ActiveEvent;\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.setActiveEvent = function(event) {\r\n\t\t\tthis._ActiveEvent = event;\r\n\t\t\t$gameVariables.setValue(_activeEventID, event.eventId());\r\n\t\t\tvar actor = $gameSystem.EventToUnit(event.eventId())[1];\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\t$gameVariables.setValue(_currentActorId, actor.actorId());\r\n\t\t\t} else {\r\n\t\t\t\t$gameVariables.setValue(_currentEnemyId, actor.enemyId());\r\n\t\t\t}\t\t\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.clearActiveEvent = function() {\r\n\t\t\tthis._ActiveEvent = null;\r\n\t\t\t$gameVariables.setValue(_activeEventID, 0);\r\n\t\t};\r\n\r\n\t\t//行動対象となるユニットの設定\r\n\t\tGame_Temp.prototype.targetEvent = function() {\r\n\t\t\treturn this._TargetEvent;\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.setTargetEvent = function(event) {\r\n\t\t\tthis._TargetEvent = event;\r\n\t\t\tif (this._TargetEvent) {\r\n\t\t\t\t$gameVariables.setValue(_targetEventID, event.eventId());\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(event.eventId())[1];\r\n\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t$gameVariables.setValue(_currentActorId, actor.actorId());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$gameVariables.setValue(_currentEnemyId, actor.enemyId());\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.clearTargetEvent = function() {\r\n\t\t\tthis._TargetEvent = null;\r\n\t\t\t$gameVariables.setValue(_targetEventID, 0);\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの座標を返す\r\n\t\tGame_Temp.prototype.originalPos = function() {\r\n\t\t\treturn this._OriginalPos;\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの座標を記録する\r\n\t\tGame_Temp.prototype.reserveOriginalPos = function(x, y) {\r\n\t\t\tthis._OriginalPos = [x, y];\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストを確認する\r\n\t\tGame_Temp.prototype.isSrpgEventList = function() {\r\n\t\t\treturn this._SrpgEventList.length > 0;\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストを追加する\r\n\t\tGame_Temp.prototype.pushSrpgEventList = function(event) {\r\n\t\t\tthis._SrpgEventList.push(event);\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストの先頭を取得し、前に詰める\r\n\t\tGame_Temp.prototype.shiftSrpgEventList = function() {\r\n\t\t\tvar event = this._SrpgEventList[0];\r\n\t\t\tthis._SrpgEventList.shift();\r\n\t\t\treturn event;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動フラグを返す\r\n\t\tGame_Temp.prototype.isAutoMoveDestinationValid = function() {\r\n\t\t\treturn this._autoMoveDestinationValid;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動フラグを設定する\r\n\t\tGame_Temp.prototype.setAutoMoveDestinationValid = function(val) {\r\n\t\t\tthis._autoMoveDestinationValid = val;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を返す(X)\r\n\t\tGame_Temp.prototype.autoMoveDestinationX = function() {\r\n\t\t\treturn this._autoMoveDestinationX;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を返す(Y)\r\n\t\tGame_Temp.prototype.autoMoveDestinationY = function() {\r\n\t\t\treturn this._autoMoveDestinationY;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を設定する\r\n\t\tGame_Temp.prototype.setAutoMoveDestination = function(x, y) {\r\n\t\t\tthis._autoMoveDestinationX = x;\r\n\t\t\tthis._autoMoveDestinationY = y;\r\n\t\t};\r\n\r\n\t\t//戦闘中にロードしたフラグを返す\r\n\t\tGame_Temp.prototype.isSrpgLoadFlag = function() {\r\n\t\t\treturn this._srpgLoadFlag;\r\n\t\t};\r\n\r\n\t\t//戦闘中にロードしたフラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgLoadFlag = function(flag) {\r\n\t\t\tthis._srpgLoadFlag = flag;\r\n\t\t};\r\n\r\n\t\t//ターン終了フラグを返す\r\n\t\tGame_Temp.prototype.isTurnEndFlag = function() {\r\n\t\t\treturn this._SrpgTurnEndFlag;\r\n\t\t};\r\n\r\n\t\t//ターン終了フラグを変更する\r\n\t\tGame_Temp.prototype.setTurnEndFlag = function(flag) {\r\n\t\t\tthis._SrpgTurnEndFlag = flag;\r\n\t\t};\r\n\r\n\t\t//オート戦闘フラグを返す\r\n\t\tGame_Temp.prototype.isAutoBattleFlag = function() {\r\n\t\t\treturn this._SrpgAutoBattleFlag;\r\n\t\t};\r\n\r\n\t\t//オート戦闘フラグを変更する\r\n\t\tGame_Temp.prototype.setAutoBattleFlag = function(flag) {\r\n\t\t\tthis._SrpgAutoBattleFlag = flag;\r\n\t\t};\r\n\r\n\t\t//アクターコマンドから装備を呼び出したフラグを返す\r\n\t\tGame_Temp.prototype.isSrpgActorEquipFlag = function() {\r\n\t\t\treturn this._srpgActorEquipFlag;\r\n\t\t};\r\n\r\n\t\t//アクターコマンドから装備を呼び出したフラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgActorEquipFlag = function(flag) {\r\n\t\t\tthis._srpgActorEquipFlag = flag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の実行フラグを返す\r\n\t\tGame_Temp.prototype.isSrpgBestSearchFlag = function() {\r\n\t\t\treturn this._srpgBestSearchFlag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の実行フラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgBestSearchFlag = function(flag) {\r\n\t\t\tthis._srpgBestSearchFlag = flag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の最適ルートを返す\r\n\t\tGame_Temp.prototype.isSrpgBestSearchRoute = function() {\r\n\t\t\treturn this._srpgBestSearchRoute;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の最適ルートを設定する\r\n\t\tGame_Temp.prototype.setSrpgBestSearchRoute = function(array) {\r\n\t\t\tthis._srpgBestSearchRoute = array;\r\n\t\t};\r\n\r\n\t\t//優先ターゲットを返す\r\n\t\tGame_Temp.prototype.isSrpgPriorityTarget = function() {\r\n\t\t\treturn this._srpgPriorityTarget;\r\n\t\t};\r\n\r\n\t\t//優先ターゲットを設定する\r\n\t\tGame_Temp.prototype.setSrpgPriorityTarget = function(event) {\r\n\t\t\tthis._srpgPriorityTarget = event;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.isMapTarget = function(eventId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(this.currentMapTargets){\r\n\t\t\t\tfor(var i = 0; i < this.currentMapTargets.length; i++){\r\n\t\t\t\t\tif($statCalc.getReferenceEvent(this.currentMapTargets[i]).eventId() == eventId){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\tGame_Temp.prototype.updatePlayerSpriteVisibility = function(id) {\r\n\t\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\t\tif(this.upperPlayerSprite){\r\n\t\t\t\t\tthis.upperPlayerSprite.show();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.lowerPlayerSprite){\r\n\t\t\t\t\tthis.lowerPlayerSprite.hide();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif(this.upperPlayerSprite){\r\n\t\t\t\t\tthis.upperPlayerSprite.hide();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.lowerPlayerSprite){\r\n\t\t\t\t\tthis.lowerPlayerSprite.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/GameTemp.js?");

/***/ }),

/***/ "./js/SRW Core/PluginCommands.js":
/*!***************************************!*\
  !*** ./js/SRW Core/PluginCommands.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tvar _Game_Interpreter_pluginCommand =\r\n            Game_Interpreter.prototype.pluginCommand;\r\n\t\tGame_Interpreter.prototype.pluginCommand = function(command, args) {\r\n\t\t\t_Game_Interpreter_pluginCommand.call(this, command, args);\r\n\t\t\t\r\n\t\t\tif (command === 'SRPGBattle') {\r\n\t\t\t\tswitch (args[0]) {\r\n\t\t\t\tcase 'Start':\r\n\t\t\t\t\t$gameSystem.startSRPG();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'End':\r\n\t\t\t\t\t$gameSystem.endSRPG();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'Intermission') {\r\n\t\t\t\tswitch (args[0]) {\r\n\t\t\t\tcase 'Start':\r\n\t\t\t\t\t$gameSystem.startIntermission();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'End':\r\n\t\t\t\t\t$gameSystem.endIntermission();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'UnlockUnit') {\r\n\t\t\t\t$SRWSaveManager.setUnitUnlocked(args[0]);\r\n\t\t\t}\r\n\t\t\tif (command === 'unlockUnit') {\r\n\t\t\t\t$SRWSaveManager.setUnitUnlocked(args[0]);\r\n\t\t\t}\r\n\t\t\tif (command === 'lockUnit') {\r\n\t\t\t\t$SRWSaveManager.setUnitLocked(args[0]);\r\n\t\t\t}\r\n\t\t\tif (command === 'SetLevel') {\r\n\t\t\t\t$SRWSaveManager.setPilotLevel(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'setLevel') {\r\n\t\t\t\t$SRWSaveManager.setPilotLevel(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'addKills') {\r\n\t\t\t\t$SRWSaveManager.addKills(args[0], args[1]);\r\n\t\t\t}\t\t\r\n\t\t\tif (command === 'addPP') {\r\n\t\t\t\t$SRWSaveManager.addPP(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'addExp') {\r\n\t\t\t\t$SRWSaveManager.addExp(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'setStageSong') {\r\n\t\t\t\t$gameSystem.currentStageSong  = args[0];\r\n\t\t\t}\t\r\n\t\t\tif (command === 'setSpecialTheme') {\r\n\t\t\t\t$songManager.setSpecialTheme(args[0]);\r\n\t\t\t}\t\r\n\t\t\tif (command === 'clearSpecialTheme') {\r\n\t\t\t\t$songManager.clearSpecialTheme();\r\n\t\t\t}\t\t\t\r\n\t\t\tif (command === 'addItem') {\r\n\t\t\t\t$inventoryManager.addItem(args[0]);\r\n\t\t\t}\t\r\n\t\t\tif (command === 'addAllItems') {            \r\n\t\t\t\tfor(var i = 0; i < $itemEffectManager.getDefinitionCount(); i++){\r\n\t\t\t\t\t$inventoryManager.addItem(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'removeItem') {\r\n\t\t\t\t$inventoryManager.removeItem(args[0]);\r\n\t\t\t}\t\r\n\t\t\tif (command === 'addItemToHolder') {\r\n\t\t\t\t$inventoryManager.addItemHolder(args[0], args[1], args[2]);\r\n\t\t\t}\r\n\t\t\tif (command === 'removeItemFromHolder') {\r\n\t\t\t\t$inventoryManager.removeItemHolder(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'focusActor') {\r\n\t\t\t\tvar actorId = args[0];\r\n\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(actorId));\r\n\t\t\t\tif(event && !event.isErased()){\r\n\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'focusEvent') {\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event && !event.isErased()){\r\n\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearDeployInfo') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.count = 0;\r\n\t\t\t\tdeployInfo.assigned = {};\r\n\t\t\t\tdeployInfo.assignedSub = {};\r\n\t\t\t\tdeployInfo.assignedShips = {};\r\n\t\t\t\tdeployInfo.lockedSlots = {};\r\n\t\t\t\tdeployInfo.lockedShipSlots = {};\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'populateDeployList') {\r\n\t\t\t\t$gameSystem.constructDeployList();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setDeployCount') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.count = args[0];\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setShipDeployCount') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.shipCount = args[0];\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'assignSlot') {\r\n\t\t\t\t//args[0]: slot \r\n\t\t\t\t//args[1]: actor id\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar actorId = args[1];\r\n\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\tdeployInfo.assigned[args[0]] = actorId;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'assignSlotSub') {\r\n\t\t\t\t//args[0]: slot \r\n\t\t\t\t//args[1]: actor id\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar actorId = args[1];\r\n\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\tdeployInfo.assignedSub[args[0]] = actorId;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'assignShipSlot') {\r\n\t\t\t\t//args[0]: slot \r\n\t\t\t\t//args[1]: actor id\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.assignedShips[args[0]] = args[1];\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockDeploySlot') {\r\n\t\t\t\t//prevents a slot from being changed by the player in the menu, assignSlot can still override\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedSlots[args[0]] = true;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockDeploySlot') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedSlots[args[0]] = false;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockShipDeploySlot') {\r\n\t\t\t\t//prevents a slot from being changed by the player in the menu, assignSlot can still override\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedShipSlots[args[0]] = true;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockShipDeploySlot') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedShipSlots[args[0]] = false;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleBg') {\r\n\t\t\t\t$gameSystem.battleBg = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax1') {\r\n\t\t\t\t$gameSystem.battleParallax1 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax2') {\r\n\t\t\t\t$gameSystem.battleParallax2 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax3') {\r\n\t\t\t\t$gameSystem.battleParallax3 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax3') {\r\n\t\t\t\t$gameSystem.battleParallax3 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleFloor') {\r\n\t\t\t\t$gameSystem.battleFloor = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleSkybox') {\r\n\t\t\t\t$gameSystem.battleSkyBox = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWSkyBattleBg') {\r\n\t\t\t\t$gameSystem.skyBattleBg = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWSkyBattleParallax1') {\r\n\t\t\t\t$gameSystem.skyBattleParallax1 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWDefaultBattleEnv') {\r\n\t\t\t\t$gameSystem.defaultBattleEnv = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setDefaultBattleEnv') {\r\n\t\t\t\t$gameSystem.defaultBattleEnv = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSkyBattleEnv') {\r\n\t\t\t\t$gameSystem.skyBattleEnv = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setRegionBattleEnv') {\r\n\t\t\t\t$gameSystem.regionBattleEnv[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setRegionSkyBattleEnv') {\r\n\t\t\t\t$gameSystem.regionSkyBattleEnv[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'resetRegionAttributes') {\t\t\t\r\n\t\t\t\tif(!$gameSystem.regionAttributes){\r\n\t\t\t\t\t$gameSystem.regionAttributes = {};\r\n\t\t\t\t}\t\r\n\t\t\t\tdelete $gameSystem.regionAttributes[args[0] * 1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'addRegionAttributes') {\r\n\t\t\t\tif(!$gameSystem.regionAttributes){\r\n\t\t\t\t\t$gameSystem.regionAttributes = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.regionAttributes[args[0] * 1] = {\r\n\t\t\t\t\tdefense: args[1] * 1,\r\n\t\t\t\t\tevasion: args[2] * 1,\r\n\t\t\t\t\thp_regen: args[3] * 1, \r\n\t\t\t\t\ten_regen: args[4] * 1\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'addMapHighlight') {\r\n\t\t\t\tif(!$gameSystem.highlightedTiles){\r\n\t\t\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.highlightedTiles.push({x: args[0], y: args[1], color: args[2] || \"white\"});\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'removeMapHighlight') {\r\n\t\t\t\tif($gameSystem.highlightedTiles){\r\n\t\t\t\t\tvar x = args[0];\r\n\t\t\t\t\tvar y = args[1];\r\n\t\t\t\t\tvar tmp = [];\r\n\t\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\t\t\tif($gameSystem.highlightedTiles[i].x != x || $gameSystem.highlightedTiles[i].y != y){\r\n\t\t\t\t\t\t\ttmp.push($gameSystem.highlightedTiles);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.highlightedTiles = tmp;\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'addMapRegionHighlight') {\r\n\t\t\t\tif(!$gameSystem.regionHighlights){\r\n\t\t\t\t\t$gameSystem.regionHighlights = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.regionHighlights[args[0]] = args[1] || \"white\";\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'removeMapRegionHighlight') {\r\n\t\t\t\tdelete $gameSystem.regionHighlights[args[0]];\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEnemyUpgradeLevel') {\r\n\t\t\t\t$gameSystem.enemyUpgradeLevel = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setMechUpgradeLevel') {\r\n\t\t\t\tvar mechId = args[0]*1;\r\n\t\t\t\tvar targetLevel = args[1]*1;\r\n\t\t\t\tvar force = args[2]*1;\r\n\t\t\t\tvar mechData = $statCalc.getMechData($dataClasses[mechId], true);\r\n\t\t\t\tif(mechData && mechData.id != -1){\r\n\t\t\t\t\tvar upgradeLevels = mechData.stats.upgradeLevels;\r\n\t\t\t\t\tvar targetUpgrades = [\"maxHP\",\"maxEN\",\"armor\",\"mobility\",\"accuracy\",\"weapons\"];\r\n\t\t\t\t\ttargetUpgrades.forEach(function(upgrade){\r\n\t\t\t\t\t\tif(upgradeLevels[upgrade] < targetLevel || force){\r\n\t\t\t\t\t\t\tupgradeLevels[upgrade] = targetLevel;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$statCalc.storeMechData(mechData);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setPilotRelationship') {\r\n\t\t\t\tvar actorId = parseInt(args[0]);\r\n\t\t\t\tvar otherActorId = parseInt(args[1]);\r\n\t\t\t\tvar effectId = parseInt(args[2]);\r\n\t\t\t\tvar level = parseInt( args[3]);\r\n\t\t\t\t\r\n\t\t\t\tvar actor = $gameActors.actor(actorId);\r\n\t\t\t\tif(!actor.SRWStats.pilot.relationships){\r\n\t\t\t\t\tactor.SRWStats.pilot.relationships = {};\r\n\t\t\t\t}\r\n\t\t\t\tactor.SRWStats.pilot.relationships[otherActorId] = {\r\n\t\t\t\t\tactor: otherActorId,\r\n\t\t\t\t\teffectId: effectId,\r\n\t\t\t\t\tlevel: level\r\n\t\t\t\t};\r\n\t\t\t\t$statCalc.storeActorData(actor);\t\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\tif (command === 'addPersuadeOption') {\r\n\t\t\t\t//args[0] = actorId\r\n\t\t\t\t//args[1] = eventId\r\n\t\t\t\t//args[2] = varId\r\n\t\t\t\tif(!$gameSystem.persuadeOptions[args[0]]){\r\n\t\t\t\t\t$gameSystem.persuadeOptions[args[0]] = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.persuadeOptions[args[0]][args[1]] = args[2];\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'removePersuadeOption') {\r\n\t\t\t\t//args[0] = actorId\r\n\t\t\t\t//args[1] = eventId\r\n\t\t\t\tif($gameSystem.persuadeOptions[args[0]]){\r\n\t\t\t\t\tdelete $gameSystem.persuadeOptions[args[0]][args[1]];\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\tif (command === 'deployShips') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar deployList = $gameSystem.getShipDeployList();\t\t\t\r\n\t\t\t\tvar activeDeployList = [];\r\n\t\t\t\tfor(var i = 0; i < deployInfo.shipCount; i++){\r\n\t\t\t\t\tactiveDeployList.push(deployList[i]);\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.setActiveShipDeployList(activeDeployList);\r\n\t\t\t\t$gameSystem.deployShips(args[0]);\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployAll') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar deployList = $gameSystem.getDeployList();\r\n\t\t\t\tvar activeDeployList = [];\r\n\t\t\t\tfor(var i = 0; i < deployInfo.count; i++){\r\n\t\t\t\t\tactiveDeployList.push(deployList[i]);\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.setActiveDeployList(activeDeployList);\r\n\t\t\t\t$gameSystem.deployActors(args[0], \"all\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployAllLocked') {\r\n\t\t\t\t$gameSystem.deployActors(args[0], \"locked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployAllUnLocked') {\r\n\t\t\t\t$gameSystem.deployActors(args[0], \"unlocked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployActor') {\r\n\t\t\t\tvar actor_unit = $gameActors.actor(args[0]);\r\n\t\t\t\tvar event = $gameMap.event(args[1]);\r\n\t\t\t\tif(actor_unit && event){\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\tif(event.event().meta.type){\r\n\t\t\t\t\t\ttype = event.event().meta.type;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttype = \"actor\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevent.setType(type);\r\n\t\t\t\t\t$gameSystem.deployActor(actor_unit, event, args[2] * 1, args[3]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deploySlot') {\r\n\t\t\t\tvar slot = args[0];\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar actor_id = deployInfo.assigned[slot];\r\n\t\t\t\tvar actor_unit = $gameActors.actor(actor_id);\r\n\t\t\t\tvar eventId = -1;\r\n\t\t\t\tvar ctr = 0;\r\n\t\t\t\tvar actorEventCtr = 0;\r\n\t\t\t\tvar events = $gameMap.events();\r\n\t\t\t\twhile(eventId == -1 && ctr < events.length){\r\n\t\t\t\t\tvar event = events[ctr];\r\n\t\t\t\t\tif (event.isType() === 'actor'){\r\n\t\t\t\t\t\tif(actorEventCtr == slot){\r\n\t\t\t\t\t\t\teventId = event.eventId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tactorEventCtr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctr++;\r\n\t\t\t\t}\r\n\t\t\t\tif(actor_unit && eventId != -1){\r\n\t\t\t\t\t$gameSystem.deployActor(actor_unit, $gameMap.event(eventId), args[1], deployInfo.assignedSub[slot]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'redeployActor') {\r\n\t\t\t\t$gameSystem.redeployActor(args[0], args[1] * 1);\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveEventToPoint') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: args[1], y: args[2]}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[3] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveActorToPoint') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: args[1], y: args[2]}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[3] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveEventToEvent') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $gameMap.event(args[1]);\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveActorToEvent') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $gameMap.event(args[1]);\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveEventToActor') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $statCalc.getReferenceEvent($gameActors.actor(args[1]));\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveActorToActor') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $statCalc.getReferenceEvent($gameActors.actor(args[1]));\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventFlying') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\tif($statCalc.canFly(actor)){\r\n\t\t\t\t\t$statCalc.setFlying(actor, true);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventLanded') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\r\n\t\t\t\t$statCalc.setFlying(actor, false);\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'enableFaction') {\r\n\t\t\t\t$gameSystem.enableFaction(args[0]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'disableFaction') {\r\n\t\t\t\t$gameSystem.disableFaction(args[0]);\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tif (command === 'setFactionAggro') {\r\n\t\t\t\t$gameSystem.setFactionAggro(args[0], JSON.parse(args[1]));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearFactionAggro') {\r\n\t\t\t\t$gameSystem.clearFactionAggro(args[0]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'transformEvent') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t}*/\r\n\t\t\t\t$statCalc.transform(actor, args[1], true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'combineEvent') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t$statCalc.combine(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'splitEvent') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t$statCalc.split(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'transformActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t}*/\r\n\t\t\t\t$statCalc.transform(actor, args[1], true, args[2]);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\r\n\t\t\tif (command === 'transformActorDirect') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t}*/\r\n\t\t\t\t$statCalc.transform(actor, 0, true, args[1]);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\r\n\t\t\tif (command === 'combineActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.combine(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'splitActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.split(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'separateActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\tactor = $statCalc.getMainTwin(actor);\r\n\t\t\t\t}\r\n\t\t\t\tif(actor.subTwin || actor.isSubTwin){\r\n\t\t\t\t\t$statCalc.separate(actor, true);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'makeActorMainTwin') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\tactor = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(actor, true);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'preventActorDeathQuote') {\r\n\t\t\t\tif(!$gameTemp.preventedDeathQuotes){\r\n\t\t\t\t\t$gameTemp.preventedDeathQuotes = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameTemp.preventedDeathQuotes[args[0]] = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSaveDisplayName') {\t\t\t\r\n\t\t\t\t$gameSystem.saveDisplayName = (args[0] || \"\").replace(/\\_/ig, \" \");\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'setStageTextId') {\t\t\t\r\n\t\t\t\t$gameSystem.stageTextId = args[0];\r\n\t\t\t}\t\t\t\t\r\n\t\t\t\r\n\t\t\tif (command === 'setEventWill') {\t\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t$statCalc.setWill(actor, args[1] * 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setActorWill') {\t\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setWill(actor, args[1] * 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'makeActorAI') {\t\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setIsAI(actor, true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'makeActorControllable') {\t\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setIsAI(actor, false);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setActorEssential') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setEssential(actor, true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setActorNonEssential') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setEssential(actor, false);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockMechWeapon') {\t\t\t\r\n\t\t\t\t$statCalc.setWeaponUnlocked(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockMechWeapon') {\r\n\t\t\t\t$statCalc.setWeaponLocked(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setUnlockedUpgradeLevel') {\r\n\t\t\t\tvar tmp = parseInt(args[0]);\r\n\t\t\t\tif(!isNaN(tmp)){\r\n\t\t\t\t\t$gameSystem.unlockedUpgradeLevel = tmp;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setRequiredFUBLevel') {\r\n\t\t\t\tvar tmp = parseInt(args[0]);\r\n\t\t\t\tif(!isNaN(tmp)){\r\n\t\t\t\t\t$gameSystem.requiredFUBLevel = tmp;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventCounterAction') {\t\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\tactor.counterBehavior = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventAttackAction') {\t\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\tactor.attackBehavior = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventBattleMode') {\t\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(args[0]);\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tbattlerArray[1].setBattleMode(args[1], true);\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(battlerArray[0] === 'enemy'){\r\n\t\t\t\t\tif(battlerArray[1].squadId != -1){\r\n\t\t\t\t\t\tthis.setSquadMode(squadId, args[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (command === 'hidePilotAbility') {\t\r\n\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"hidden\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockPilotAbility') {\t\r\n\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"locked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockPilotAbility') {\t\r\n\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'hideMechAbility') {\t\r\n\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"hidden\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockMechAbility') {\t\r\n\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"locked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockMechAbility') {\t\r\n\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockTransformation') {\t\r\n\t\t\t\t$gameSystem.lockTransformation(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockAllTransformations') {\t\r\n\t\t\t\t$gameSystem.lockAllTransformations();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockTransformation') {\t\r\n\t\t\t\t$gameSystem.unlockTransformation(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockAllTransformations') {\t\r\n\t\t\t\t$gameSystem.unlockAllTransformations();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setFaceAlias') {\t\r\n\t\t\t\tif(!$gameSystem.faceAliases){\r\n\t\t\t\t\t$gameSystem.faceAliases = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.faceAliases[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setCharacterIndexAlias') {\t\r\n\t\t\t\tif(!$gameSystem.characterIdexAliases){\r\n\t\t\t\t\t$gameSystem.characterIdexAliases = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.characterIdexAliases[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setPilotAbilityUpgrade') {\t\r\n\t\t\t\t$pilotAbilityManager.setUpgrade(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setMechAbilityUpgrade') {\t\r\n\t\t\t\t$mechAbilityManager.setUpgrade(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command == 'showTargetingReticule'){\t\t\t\r\n\t\t\t\tvar eventIdSource;\r\n\t\t\t\tvar parts = args[0].match(/\\actor\\:(.*)/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\teventIdSource = $gameSystem.ActorToEvent(parts[1]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\teventIdSource = args[0];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar eventIdTarget;\r\n\t\t\t\tvar parts = args[1].match(/\\actor\\:(.*)/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\teventIdTarget = $gameSystem.ActorToEvent(parts[1]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\teventIdTarget = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar actionArray = $gameSystem.EventToUnit(eventIdSource);\r\n\t\t\t\tvar targetArray = $gameSystem.EventToUnit(eventIdTarget);\r\n\t\t\t\tif(actionArray && targetArray){\r\n\t\t\t\t\t$gameTemp.reticuleInfo = {\r\n\t\t\t\t\t\tactor: actionArray[1],\r\n\t\t\t\t\t\ttargetActor: targetArray[1]\r\n\t\t\t\t\t};\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearTile') {\r\n\t\t\t\tvar position = {x: args[0], y: args[1]};\r\n\t\t\t\tvar actor = $statCalc.activeUnitAtPosition(position);\r\n\t\t\t\tif(actor){\r\n\t\t\t\t\tvar newPosition = $statCalc.getAdjacentFreeSpace(position);\r\n\t\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\t\tvar actorId = -1;\r\n\t\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t\tactorId = actor.actorId();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(event.eventId() != args[2] && actorId != args[3]){\r\n\t\t\t\t\t\tevent.locate(newPosition.x, newPosition.y);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction clearAdjacentToTile(position, includeDiagonal){\r\n\t\t\t\tvar positions  = [];\r\n\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y}, biasPosition:{x: position.x - 2, y: position.y}});\r\n\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y}, biasPosition:{x: position.x + 2, y: position.y}});\r\n\t\t\t\tpositions.push({position: {x: position.x, y: position.y + 1}, biasPosition:{x: position.x, y: position.y + 2}});\r\n\t\t\t\tpositions.push({position: {x: position.x, y: position.y - 1}, biasPosition:{x: position.x, y: position.y - 2}});\r\n\t\t\t\t\r\n\t\t\t\tif(includeDiagonal){\r\n\t\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y - 1}, biasPosition:{x: position.x - 2, y: position.y - 2}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y + 1}, biasPosition:{x: position.x + 2, y: position.y + 2}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y + 1}, biasPosition:{x: position.x - 2, y: position.y + 2}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y - 1}, biasPosition:{x: position.x + 2, y: position.y - 2}});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar usedPositions = {};\r\n\t\t\t\tpositions.forEach(function(currentInfo){\t\t\t\t\r\n\t\t\t\t\tvar actor = $statCalc.activeUnitAtPosition(currentInfo.position);\r\n\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\tvar newPosition = $statCalc.getAdjacentFreeSpace(currentInfo.position, null, null, currentInfo.biasPosition, true, usedPositions);\r\n\t\t\t\t\t\tif(!usedPositions[newPosition.x]){\r\n\t\t\t\t\t\t\tusedPositions[newPosition.x] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!usedPositions[newPosition.x][newPosition.y]){\r\n\t\t\t\t\t\t\tusedPositions[newPosition.x][newPosition.y] = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\t\t\tvar actorId = -1;\t\t\t\t\t\r\n\t\t\t\t\t\tevent.locate(newPosition.x, newPosition.y);\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearAdjacentToTile') {\r\n\t\t\t\tclearAdjacentToTile({x: args[0] * 1, y: args[1] * 1}, args[2] * 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearAdjacentToEvent') {\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tclearAdjacentToTile({x: event.posX(), y:  event.posY()}, args[1] * 1);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearAdjacentToActor') {\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tclearAdjacentToTile({x: event.posX(), y:  event.posY()}, args[1] * 1);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\tif (command === 'stopSkipping') {\r\n\t\t\t\t//exists purely to manually ensure A+Start skipping stops at the point the command is called.\r\n\t\t\t}\r\n\t\t};\t\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/PluginCommands.js?");

/***/ }),

/***/ "./js/SRW Core/Windows.js":
/*!********************************!*\
  !*** ./js/SRW Core/Windows.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t\tWindow_CounterCommand: Window_CounterCommand,\r\n\t\tWindow_SRWItemBattle: Window_SRWItemBattle,\r\n\t\tWindow_SRWAbilityCommand: Window_SRWAbilityCommand,\r\n\t\tWindow_SRWTransformSelection: Window_SRWTransformSelection,\r\n\t\tWindow_StageInfo: Window_StageInfo,\r\n\t\tWindow_ConditionsInfo: Window_ConditionsInfo,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tWindow_SavefileList.prototype.drawItem = function(index) {\r\n\t\t\tvar id = index + 1;\r\n\t\t\tvar valid = DataManager.isThisGameFile(id);\r\n\t\t\tvar info = DataManager.loadSavefileInfo(id);\r\n\t\t\tvar rect = this.itemRectForText(index);\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tif (this._mode === 'load') {\r\n\t\t\t\tthis.changePaintOpacity(valid);\r\n\t\t\t}\r\n\t\t\tthis.drawFileId(id, rect.x, rect.y);\r\n\t\t\tif (info) {\r\n\t\t\t\tthis.changePaintOpacity(valid);\r\n\t\t\t\tthis.drawContents(info, rect, valid);\r\n\t\t\t\tthis.changePaintOpacity(true);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_SavefileList.prototype.drawContents = function(info, rect, valid) {\r\n\t\t\tvar bottom = rect.y + rect.height;\r\n\t\t\tif (rect.width >= 420) {\r\n\t\t\t\tthis.drawGameTitle(info, rect.x + 192, rect.y, rect.width - 192);\r\n\t\t\t\tif (valid) {\r\n\t\t\t\t\tthis.drawPartyCharacters(info, rect.x + 220, bottom - 4);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar lineHeight = this.lineHeight();\r\n\t\t\tvar y2 = bottom - lineHeight;\r\n\t\t\tif (y2 >= lineHeight) {\r\n\t\t\t\tthis.drawPlaytime(info, rect.x, y2, rect.width);\r\n\t\t\t}\r\n\t\t\tvar offSetX = 20;\r\n\t\t\tvar bottomOffset = 54;\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_funds+\": \"+info.funds, offSetX + rect.x, bottom - bottomOffset, 240);\r\n\t\t\t}\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_SR_count+\": \"+info.SRCount, offSetX + rect.x + 240, bottom - bottomOffset, 240);\r\n\t\t\t}\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_turn_count+\": \"+info.turnCount, offSetX + rect.x + 480, bottom - bottomOffset, 240);\r\n\t\t\t}\t\t\r\n\t\t};\t\r\n\t\t\r\n\t\tWindow_Message.prototype.isInstantText = function() {\r\n\t\t\treturn Input.isPressed('ok') && Input.isPressed('pagedown');\r\n\t\t}\r\n\t\t\r\n\t\tWindow_Message.prototype.updateMessage = function() {\r\n\t\t\tif (this._textState) {\r\n\t\t\t\twhile (!this.isEndOfText(this._textState)) {\r\n\t\t\t\t\tif (this.needsNewPage(this._textState)) {\r\n\t\t\t\t\t\tthis.newPage(this._textState);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.updateShowFast();\r\n\t\t\t\t\tthis.processCharacter(this._textState);\r\n\t\t\t\t\tif(!this.isInstantText()){\t\t\t\r\n\t\t\t\t\t\tif (!this._showFast && !this._lineShowFast) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.pause || this._waitCount > 0) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tif (this.isEndOfText(this._textState)) {\r\n\t\t\t\t\tthis.onEndOfText();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.updateInput = function() {\t\t\r\n\t\t\tif (this.isAnySubWindowActive()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (this.pause) {\r\n\t\t\t\tif (this.isTriggered() || this.isInstantText()) {\r\n\t\t\t\t\tInput.update();\r\n\t\t\t\t\tthis.pause = false;\r\n\t\t\t\t\tif (!this._textState) {\r\n\t\t\t\t\t\tthis.terminateMessage();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.startPause = function() {\r\n\t\t\tvar waitCount;\r\n\t\t\tif(this.isInstantText()){\r\n\t\t\t\twaitCount = 2;\r\n\t\t\t} else {\r\n\t\t\t\twaitCount = 10;\r\n\t\t\t}\r\n\t\t\tthis.startWait(waitCount);\r\n\t\t\tthis.pause = true;\r\n\t\t};\t\t\r\n\r\n\t//====================================================================\r\n\t// ●Window_ActorCommand\r\n\t//====================================================================\r\n\t\tWindow_Command.prototype.isList = function() {\r\n\t\t\tif (this._list) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_numVisibleRows = Window_ActorCommand.prototype.numVisibleRows;\r\n\t\tWindow_ActorCommand.prototype.numVisibleRows = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this.isList()) {\r\n\t\t\t\t\treturn this.maxItems();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Window_ActorCommand_numVisibleRows.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_makeCommandList = Window_ActorCommand.prototype.makeCommandList;\r\n\t\tWindow_ActorCommand.prototype.makeCommandList = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this._actor) {\r\n\t\t\t\t\t//TODO: turn different menus into subclasses\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar battler = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\t\t\t\tvar type = battler.isActor() ? \"enemy\" : \"actor\";\r\n\t\t\t\t\tvar pos = {\r\n\t\t\t\t\t\tx: $gameTemp.activeEvent().posX(),\r\n\t\t\t\t\t\ty: $gameTemp.activeEvent().posY()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar fullRange = $statCalc.getFullWeaponRange(battler, $gameTemp.isPostMove);\r\n\t\t\t\t\tvar hasTarget = $statCalc.getAllInRange($gameSystem.getPlayerFactionInfo(), pos, fullRange.range, fullRange.minRange).length > 0;\r\n\t\t\t\t\tvar hasMapWeapon = $statCalc.hasMapWeapon(battler);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction boardingMenu(){\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.board, 'board');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction regularMenu(){\r\n\t\t\t\t\t\tif(_this._actor.battleMode() != \"fixed\"){\r\n\t\t\t\t\t\t\t_this.addMoveCommand();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(hasTarget || hasMapWeapon){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_attack, 'attack');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.isShip(_this._actor) && $statCalc.hasBoardedUnits(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.deploy, 'deploy');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_spirit, 'spirit');\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"heal\"])){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_repair, 'heal');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"resupply\"])){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_resupply, 'resupply');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getConsumables(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_item, 'item');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getAbilityCommands(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_ability, 'ability');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.canFly(_this._actor) && $statCalc.getCurrentTerrain(_this._actor) != \"space\"){\r\n\t\t\t\t\t\t\tif($statCalc.isFlying(_this._actor)){\r\n\t\t\t\t\t\t\t\tif(($statCalc.getTileType(_this._actor) == \"land\" && $statCalc.canBeOnLand(_this._actor)) || ($statCalc.getTileType(_this._actor) == \"water\" && $statCalc.canBeOnWater(_this._actor))){\r\n\t\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_land, 'land');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_fly, 'fly');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\r\n\t\t\t\t\t\tif($gameSystem.getPersuadeOption(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_persuade, 'persuade');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif($statCalc.canCombine(_this._actor).isValid){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_combine, 'combine');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif($statCalc.isCombined(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_split, 'split');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TWIN_SYSTEM && !ENGINE_SETTINGS.DISABLE_ALLY_TWINS){\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canSwap(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_swap, 'swap');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.isMainTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_separate, 'separate');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_join, 'join');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif($statCalc.canTransform(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_transform, 'transform');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addWaitCommand();\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction hitAndAwayMenu(){\r\n\t\t\t\t\t\t_this.addMoveCommand();\r\n\t\t\t\t\t\t_this.addWaitCommand();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction disabledMenu(){\r\n\t\t\t\t\t\t_this.addWaitCommand();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction postMoveMenu(){\r\n\t\t\t\t\t\tif(hasTarget || hasMapWeapon){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_attack, 'attack');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($gameSystem.getPersuadeOption(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_persuade, 'persuade');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"heal\"])){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_repair, 'heal');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TWIN_SYSTEM && !ENGINE_SETTINGS.DISABLE_ALLY_TWINS){\r\n\t\t\t\t\t\t\tif($statCalc.canTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_join, 'join');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_this.addWaitCommand();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction deployMenu(){\r\n\t\t\t\t\t\t_this.addMoveCommand();\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_spirit, 'spirit');\r\n\t\t\t\t\t\tif($statCalc.canFly(_this._actor) && $statCalc.getCurrentTerrain(_this._actor) != \"space\"){\r\n\t\t\t\t\t\t\tif($statCalc.isFlying(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_land, 'land');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_fly, 'fly');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getConsumables(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_item, 'item');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($gameSystem.isSubBattlePhase() == 'confirm_boarding'){\r\n\t\t\t\t\t\tboardingMenu();\r\n\t\t\t\t\t} else if($gameTemp.isHitAndAway){\r\n\t\t\t\t\t\thitAndAwayMenu();\r\n\t\t\t\t\t} else if($gameTemp.isPostMove){\r\n\t\t\t\t\t\tpostMoveMenu();\r\n\t\t\t\t\t} else if($gameTemp.activeShip){\r\n\t\t\t\t\t\tdeployMenu();\r\n\t\t\t\t\t} else if(this._actor.battleMode() == \"disabled\"){\r\n\t\t\t\t\t\tdisabledMenu();\r\n\t\t\t\t\t} else {\t\r\n\t\t\t\t\t\tregularMenu();\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Window_ActorCommand_makeCommandList.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.addEquipCommand = function() {\r\n\t\t\tthis.addCommand(_textSrpgEquip, 'equip', this._actor.canSrpgEquip());\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.addWaitCommand = function() {\r\n\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_wait, 'wait');\r\n\t\t};\r\n\t\t\r\n\t\tWindow_ActorCommand.prototype.addMoveCommand = function() {\r\n\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_move, 'move');\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_setup = Window_ActorCommand.prototype.setup;\r\n\t\tWindow_ActorCommand.prototype.setup = function(actor) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis._actor = actor;\r\n\t\t\t\tthis.clearCommandList();\r\n\t\t\t\tthis.makeCommandList();\r\n\t\t\t\tthis.updatePlacement();\r\n\t\t\t\tthis.refresh();\r\n\t\t\t\tthis.selectLast();\r\n\t\t\t\tthis.activate();\r\n\t\t\t\tthis.open();\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Window_ActorCommand_setup.call(this, actor);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.updatePlacement = function() {\r\n\t\t\tthis.width = this.windowWidth();\r\n\t\t\tthis.height = this.windowHeight();\r\n\t\t\tthis.x = Math.max($gameTemp.activeEvent().screenX() - $gameMap.tileWidth() / 2 - this.windowWidth(), 0);\r\n\t\t\tif ($gameTemp.activeEvent().screenY() < Graphics.boxHeight - 160) {\r\n\t\t\t\tvar eventY = $gameTemp.activeEvent().screenY();\r\n\t\t\t} else {\r\n\t\t\t\tvar eventY = Graphics.boxHeight - 160;\r\n\t\t\t}\r\n\t\t\tthis.y = Math.max(eventY - this.windowHeight(), 0);\r\n\t\t};\r\n\t}\r\n\t\r\n\t//A window that lists the counter/evade/defend options for the player when counter attacking\r\n\tfunction Window_CounterCommand(){\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_CounterCommand.prototype = Object.create(Window_Command.prototype);\r\n\tWindow_CounterCommand.prototype.constructor = Window_CounterCommand;\r\n\r\n\tWindow_CounterCommand.prototype.initialize = function() {\r\n\t\tWindow_Command.prototype.initialize.call(this, 0, 0);\r\n\t\tthis._actor = null;\r\n\t\tthis._item = null;\r\n\t\tthis.openness = 0;\r\n\t\tthis.setup();\r\n\t\tthis.hide();\r\n\t\tthis.deactivate();\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.makeCommandList = function() {  \r\n\t\tthis.addCommand(\"Counter\", 'counter');\t\r\n\t\tthis.addCommand(\"Defend\", 'defend');\r\n\t\tthis.addCommand(\"Evade\", 'evade');\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.setup = function(actorArray) {\r\n\t\tthis.clearCommandList();\r\n\t\tthis.makeCommandList();\r\n\t\tthis.refresh();\r\n\t\tthis.activate();\r\n\t\tthis.open();\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.maxCols = function() {\r\n\t\treturn 1;\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(3);\r\n\t};\r\n\t\r\n\t\r\n\tWindow_Base.prototype.drawSectionRect = function(x, y, w, h, margin, color) {\r\n\t\tvar lineWidth = 1;\r\n\t\tx+=margin;\r\n\t\ty+=margin;\r\n\t\tw-=2*margin;\r\n\t\th-=2*margin;\r\n\t\t//top\r\n\t\tthis.contents.fillRect(x ,y, w, lineWidth, color);\r\n\t\t//bottom\r\n\t\tthis.contents.fillRect(x, y + h, w + lineWidth, lineWidth, color);\r\n\t\t//left\r\n\t\tthis.contents.fillRect(x ,y, lineWidth, h, color);\r\n\t\t//right\r\n\t\tthis.contents.fillRect(x + w, y, lineWidth, h, color);\r\n\t}\r\n\t\r\n\tWindow_Base.prototype.drawRect = function(x, y, w, h, margin, color) {\r\n\t\tx+=margin;\r\n\t\ty+=margin;\r\n\t\tw-=2*margin;\r\n\t\th-=2*margin;\r\n\t\tthis.contents.fillRect(x ,y, w, h, color);\r\n\t}\r\n\t\r\n\tWindow_Base.prototype.windowInnerWidth = function() {\r\n        return this.windowWidth() - 38;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.setFontSize = function(size) {\r\n        this.contents.fontSize = size;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.setItalic = function(state) {\r\n        this.contents.fontItalic = state;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.centerTextOffset = function(text, containerWidth) {\r\n        return containerWidth / 2 - this.textWidth(text) / 2;\r\n    };\r\n\t\r\n\t\r\n\t\r\n\tfunction Window_SRWItemBattle() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWItemBattle.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWItemBattle.prototype.constructor = Window_SRWItemBattle;\r\n\t\r\n\tWindow_SRWItemBattle.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWItemBattle.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWItemBattle.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWItemBattle.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWItemBattle.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item) {\r\n\t\t\titem = $itemEffectManager.getAbilityDisplayInfo(item.itemIdx);\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getConsumables(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.isEnabled = function(item) {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tvar itemDef = $itemEffectManager.getAbilityDef(item.itemIdx);\r\n\t\treturn itemDef.isActiveHandler(actor);\r\n\t};\t\r\n\t\r\n\tfunction Window_SRWAbilityCommand() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWAbilityCommand.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWAbilityCommand.prototype.constructor = Window_SRWAbilityCommand;\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWAbilityCommand.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item != null) {\r\n\t\t\titem = $abilityCommandManger.getAbilityDisplayInfo(item);\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getAbilityCommands(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.isEnabled = function(item) {\r\n\t\treturn true;\r\n\t};\t\r\n\t\r\n\tfunction Window_SRWTransformSelection() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWTransformSelection.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWTransformSelection.prototype.constructor = Window_SRWTransformSelection;\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWTransformSelection.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item != null) {\r\n\t\t\titem = $dataClasses[item];\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getTransformationList(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.isEnabled = function(item) {\r\n\t\treturn true;\r\n\t};\t\r\n\t\r\n\t\r\n\t\r\n\tfunction Window_StageInfo() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_StageInfo.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_StageInfo.prototype.constructor = Window_StageInfo;\r\n\r\n\tWindow_StageInfo.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.windowWidth = function() {\r\n\t\treturn 240;\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.windowHeight = function() {\r\n\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\treturn this.fittingHeight(4);\r\n\t\t} else {\r\n\t\t\treturn this.fittingHeight(1);\r\n\t\t}\t\t\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.refresh = function() {\r\n\t\tvar lineheight = 35;\r\n\t\tvar columnOffset = 95;\r\n\t\tvar x = 5;\r\n\t\tvar y = 0;\r\n\t\tvar width = this.contents.width - this.textPadding() * 2;\r\n\t\tthis.contents.clear();\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t//this.drawCurrencyValue(this.value(), this.currencyUnit(), x, 0, width);\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_funds, x, 0, width);\r\n\t\tthis.drawText(this.value(), x + columnOffset , 0, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_turn, x,  lineheight, width);\r\n\t\t/*--text-color-highlight: #f9e343;\t\r\n\t \t--text-color-highlight2: #43dbf9;\t*/\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_turnVarID), x + columnOffset, lineheight, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_enemy, x,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#AA2222\");\r\n\t\tthis.drawText($gameVariables.value(_enemiesDestroyed), x + columnOffset,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(\"/\", x + columnOffset + 30,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_enemiesDestroyed) + $gameVariables.value(_existEnemyVarID), x + columnOffset + 45,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_ally, x,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#AA2222\");\r\n\t\tthis.drawText($gameVariables.value(_actorsDestroyed), x + columnOffset,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(\"/\", x + columnOffset + 30,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_actorsDestroyed) + $gameVariables.value(_existActorVarID), x + columnOffset + 45,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.value = function() {\r\n\t\treturn $gameParty.gold();\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.currencyUnit = function() {\r\n\t\treturn TextManager.currencyUnit;\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\t\r\n\tfunction Window_ConditionsInfo() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_ConditionsInfo.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_ConditionsInfo.prototype.constructor = Window_ConditionsInfo;\r\n\r\n\tWindow_ConditionsInfo.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.windowWidth = function() {\r\n\t\treturn 760;\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(6);\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.refresh = function() {\r\n\t\tvar lineheight = 35;\r\n\t\tvar columnOffset = 95;\r\n\t\tvar x = 5;\r\n\t\tvar y = 0;\r\n\t\tvar width = this.contents.width - this.textPadding() * 2;\r\n\t\tthis.contents.clear();\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\t\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_victory_condition, x, 0, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_defeat_condition, x, lineheight * 2, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_mastery_condition, x, lineheight * 4, width);\r\n\t\t\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\tvar valueOffset = 20;\r\n\t\tthis.drawText($gameVariables.value(_victoryConditionText) || \"\", x + valueOffset, lineheight, width - valueOffset);\r\n\t\t\r\n\t\tthis.drawText($gameVariables.value(_defeatConditionText) || \"\", x + valueOffset, lineheight * 3, width - valueOffset);\r\n\t\t\r\n\t\tvar masteryText = $gameVariables.value(_masteryConditionText);\r\n\t\tif($SRWSaveManager.isMapSRPointLocked($gameMap.mapId())){\r\n\t\t\tmasteryText = APPSTRINGS.GENERAL.label_mastery_locked;\r\n\t\t}\r\n\t\tthis.drawText(masteryText || \"\", x + valueOffset, lineheight * 5, width - valueOffset);\r\n\t\t\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.value = function() {\r\n\t\treturn $gameParty.gold();\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.currencyUnit = function() {\r\n\t\treturn TextManager.currencyUnit;\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\t\n\n//# sourceURL=webpack:///./js/SRW_Core/Windows.js?");

/***/ }),

/***/ "./js/SRW Core/main.js":
/*!*****************************!*\
  !*** ./js/SRW Core/main.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Windows_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Windows.js */ \"./js/SRW Core/Windows.js\");\n/* harmony import */ var _PluginCommands_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PluginCommands.js */ \"./js/SRW Core/PluginCommands.js\");\n/* harmony import */ var _GameTemp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameTemp.js */ \"./js/SRW Core/GameTemp.js\");\n/* harmony import */ var _GameSystem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GameSystem.js */ \"./js/SRW Core/GameSystem.js\");\nfunction importGlobal(exports){\r\n\tObject.keys(exports).forEach(function(className){\r\n\t\twindow[className] = exports[className];\r\n\t});\r\n}\r\n\r\n\r\n\r\nimportGlobal(_Windows_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\r\n_Windows_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].patches.apply();\r\n\r\n\r\n_PluginCommands_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].patches.apply();\r\n\r\n\r\n_GameTemp_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].patches.apply();\r\n\r\n\r\n_GameSystem_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].patches.apply();\n\n//# sourceURL=webpack:///./js/SRW_Core/main.js?");

/***/ })

/******/ });