/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/SRW Core/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/SRW Core/DataManagement.js":
/*!***************************************!*\
  !*** ./js/SRW Core/DataManagement.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// Save Management\r\n\t\t//====================================================================\t\r\n\r\n\t\tDataManager.loadGameWithoutRescue = function(savefileId) {\r\n\t\t\tif (this.isThisGameFile(savefileId)) {\r\n\t\t\t\tvar json = StorageManager.load(savefileId);\r\n\t\t\t\tthis.createGameObjects();\r\n\t\t\t\tthis.extractSaveContents(JsonEx.parse(json));\r\n\t\t\t\tthis._lastAccessedId = savefileId;\r\n\t\t\t\t//$gameSystem.setSrpgActors();\r\n\t\t\t\t//$gameSystem.setSrpgEnemys();\r\n\t\t\t\tif($gameSystem.isIntermission()){\r\n\t\t\t\t\t$gameSystem.startIntermission();\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$statCalc.softRefreshUnits();\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tDataManager.makeSavefileInfo = function() {\r\n\t\t\tvar info = {};\r\n\t\t\tinfo.globalId   = this._globalId;\r\n\t\t\tinfo.title      = $gameSystem.saveDisplayName || $dataSystem.gameTitle;\r\n\t\t\tinfo.characters = $gameParty.charactersForSavefile();\r\n\t\t\tinfo.faces      = $gameParty.facesForSavefile();\r\n\t\t\tinfo.playtime   = $gameSystem.playtimeText();\r\n\t\t\tinfo.timestamp  = Date.now();\r\n\t\t\tinfo.funds = $gameParty.gold();\r\n\t\t\tinfo.SRCount = $SRWSaveManager.getSRCount();\r\n\t\t\tinfo.turnCount =  $gameVariables.value(_turnCountVariable)\r\n\t\t\treturn info;\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.saveContinueSlot = function() {\r\n\t\t\tvar savefileId = \"continue\";\r\n\t\t\t$gameSystem.onBeforeSave();\r\n\t\t\tvar json = JsonEx.stringify({date: Date.now(), content: this.makeSaveContents()});\t\t\r\n\t\t\tStorageManager.save(savefileId, json);\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.loadContinueSlot = function() {\r\n\t\t\ttry{\r\n\t\t\t\tvar savefileId = \"continue\";\r\n\t\t\t\tvar globalInfo = this.loadGlobalInfo();\t\t\r\n\t\t\t\tvar json = StorageManager.load(savefileId);\r\n\t\t\t\tthis.createGameObjects();\r\n\t\t\t\tthis.extractSaveContents(JsonEx.parse(json).content);\r\n\t\t\t\t$statCalc.softRefreshUnits();\r\n\t\t\t\tSceneManager._scene.fadeOutAll()\r\n\t\t\t\tSceneManager.goto(Scene_Map);\r\n\t\t\t\tif($gameSystem._bgmOnSave){\r\n\t\t\t\t\t$gameTemp.continueLoaded = true;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t} catch(e){\r\n\t\t\t\tconsole.log(\"Attempted to load non existant continue save!\");\r\n\t\t\t}\t\t\r\n\t\t\treturn true;\t\t\r\n\t\t};\r\n\t\t\r\n\t\tDataManager.latestSavefileDate = function() {\r\n\t\t\tvar globalInfo = this.loadGlobalInfo();\r\n\t\t\tvar savefileId = 1;\r\n\t\t\tvar timestamp = 0;\r\n\t\t\tif (globalInfo) {\r\n\t\t\t\tfor (var i = 1; i < globalInfo.length; i++) {\r\n\t\t\t\t\tif (this.isThisGameFile(i) && globalInfo[i].timestamp > timestamp) {\r\n\t\t\t\t\t\ttimestamp = globalInfo[i].timestamp;\r\n\t\t\t\t\t\tsavefileId = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn timestamp;\r\n\t\t};\t\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/DataManagement.js?");

/***/ }),

/***/ "./js/SRW Core/Entities.js":
/*!*********************************!*\
  !*** ./js/SRW Core/Entities.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t\r\n\t//==================================================================\r\n\t// ●Game_BattlerBase\r\n\t//====================================================================\r\n\t\t// 初期処理\r\n\t\tObject.defineProperties(Game_BattlerBase.prototype, {\r\n\t\t\t// Hit Points\r\n\t\t\thp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.currentHP;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this._hp; \r\n\t\t\t\t}\t\t\t\r\n\t\t\t}, configurable: true },\r\n\t\t\t// Magic Points\r\n\t\t\tmp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.currentEN;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this._mp; \r\n\t\t\t\t}\r\n\t\t\t}, configurable: true },\r\n\t\t\t// Tactical Points\r\n\t\t\tmhp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.maxHP;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.param(0); \r\n\t\t\t\t}\t\t\r\n\t\t\t}, configurable: true },\r\n\t\t\t// Maximum Magic Points\r\n\t\t\tmmp: { get: function() { \r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\treturn this.SRWStats.mech.stats.calculated.maxEN;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.param(1); \r\n\t\t\t\t}\r\n\t\t\t}, configurable: true },\r\n\t\t\t// ATtacK power\r\n\t\t});\r\n\t\t\r\n\t\tGame_BattlerBase.prototype.setHp = function(hp) {\r\n\t\t\tif(!isNaN(hp)){\r\n\t\t\t\tif(hp < 0){\r\n\t\t\t\t\thp = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\tthis.SRWStats.mech.stats.calculated.currentHP = hp;\r\n\t\t\t\t}\r\n\t\t\t\tthis._hp = hp;\r\n\t\t\t\tthis.refresh();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"setHp received invalid value!\");\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_BattlerBase.prototype.setMp = function(mp) {\r\n\t\t\tif(!isNaN(mp)){\r\n\t\t\t\tif(mp < 0){\r\n\t\t\t\t\tmp = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\tthis.SRWStats.mech.stats.calculated.currentEN = mp;\r\n\t\t\t\t}\r\n\t\t\t\tthis._mp = mp;\r\n\t\t\t\tthis.refresh();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"setMp received invalid value!\");\r\n\t\t\t}\t\t\r\n\t\t};\t\r\n\t\t\r\n\t\tvar _SRPG_Game_BattlerBase_initMembers = Game_BattlerBase.prototype.initMembers;\r\n\t\tGame_BattlerBase.prototype.initMembers = function() {\r\n\t\t\t_SRPG_Game_BattlerBase_initMembers.call(this);\r\n\t\t\tthis._srpgTurnEnd = false;\r\n\t\t\tthis._srpgActionTiming = -1; // 0:攻撃側、1:防御側\r\n\t\t};\r\n\r\n\t\t// 移動力を返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgMove = function() {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの射程を返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgSkillRange = function(skill) {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t// 武器の攻撃射程を返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgWeaponRange = function() {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t// 武器が反撃可能かを返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgWeaponCounter = function() {\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 通行可能タグを返す（定義は、gameActor, gameEnemyで行う）\r\n\t\tGame_BattlerBase.prototype.srpgThroughTag = function() {\r\n\t\t\treturn 0;\r\n\t\t};\r\n\r\n\t\t//行動終了かどうかを返す\r\n\t\tGame_BattlerBase.prototype.srpgTurnEnd = function() {\r\n\t\t\treturn this._srpgTurnEnd;\r\n\t\t};\r\n\r\n\t\t//行動終了を設定する\r\n\t\tGame_BattlerBase.prototype.setSrpgTurnEnd = function(flag) {\r\n\t\t\tif(flag){\r\n\t\t\t\t$statCalc.setTurnEnd(this);\r\n\t\t\t}\t\t\r\n\t\t\tthis._srpgTurnEnd = flag;\r\n\t\t};\r\n\r\n\t\t//攻撃側か防御側かを返す\r\n\t\tGame_BattlerBase.prototype.srpgActionTiming = function() {\r\n\t\t\treturn this._srpgActionTiming;\r\n\t\t};\r\n\r\n\t\t//攻撃側か防御側かを設定する\r\n\t\tGame_BattlerBase.prototype.setActionTiming = function(timing) {\r\n\t\t\tthis._srpgActionTiming = timing;\r\n\t\t};\r\n\r\n\t\t// 入力可能かどうかの判定\r\n\t\tvar _SRPG_Game_BattlerBase_canInput = Game_BattlerBase.prototype.canInput;\r\n\t\tGame_BattlerBase.prototype.canInput = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.isAppeared() && !this.isRestricted() && !this.isAutoBattle() &&\r\n\t\t\t\t\t   !this.srpgTurnEnd();\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_BattlerBase_canInput.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムが使用可能かの判定\r\n\t\tvar _SRPG_Game_BattlerBase_isOccasionOk = Game_BattlerBase.prototype.isOccasionOk;\r\n\t\tGame_BattlerBase.prototype.isOccasionOk = function(item) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif ($gameSystem.isBattlePhase() === 'actor_phase' &&\r\n\t\t\t\t\t$gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn item.occasion === 0 || item.occasion === 1;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_BattlerBase_isOccasionOk.call(this, item);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムが使用可能かの判定\r\n\t\tvar _SRPG_Game_BattlerBase_canUse = Game_BattlerBase.prototype.canUse;\r\n\t\tGame_BattlerBase.prototype.canUse = function(item) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (!item) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif ($gameSystem.isBattlePhase() === 'actor_phase' && \r\n\t\t\t\t\t$gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif (($gameSystem.isSubBattlePhase() === 'invoke_action' ||\r\n\t\t\t\t\t $gameSystem.isSubBattlePhase() === 'auto_actor_action' ||\r\n\t\t\t\t\t $gameSystem.isSubBattlePhase() === 'enemy_action' ||\r\n\t\t\t\t\t $gameSystem.isSubBattlePhase() === 'battle_window') &&\r\n\t\t\t\t\t(this.srpgSkillRange(item) < $gameTemp.SrpgDistance() ||\r\n\t\t\t\t\tthis.srpgSkillMinRange(item) > $gameTemp.SrpgDistance() ||\r\n\t\t\t\t\t$gameTemp.SrpgSpecialRange() == false ||\r\n\t\t\t\t\t(this._srpgActionTiming == 1 && this.srpgWeaponCounter() == false))) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn _SRPG_Game_BattlerBase_canUse.call(this, item);\r\n\t\t};\r\n\r\n\t\t// ステートのターン経過処理（ＳＲＰＧ用）\r\n\t\t// 行動終了時：行動ごとに１ターン経過\r\n\t\t// ターン終了時：全体のターン終了ごとに１ターン経過\r\n\t\tGame_BattlerBase.prototype.updateSrpgStateTurns = function(timing) {\r\n\t\t\tthis._states.forEach(function(stateId) {\r\n\t\t\t\tif (this._stateTurns[stateId] > 0 && $dataStates[stateId].autoRemovalTiming === timing) {\r\n\t\t\t\t\tthis._stateTurns[stateId]--;\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t};\r\n\r\n\r\n\t//====================================================================\r\n\t// ●Game_Battler\r\n\t//====================================================================\r\n\t\t\r\n\r\n\t\tvar _SRPG_Game_Battler_initMembers = Game_Battler.prototype.initMembers;\r\n\t\tGame_Battler.prototype.initMembers = function() {\r\n\t\t\t_SRPG_Game_Battler_initMembers.call(this);\r\n\t\t\tthis._battleMode = 'normal';\r\n\t\t\tthis._searchItem = false;\r\n\t\t\tthis._targetId = -1;\r\n\t\t\tthis._SRPGActionTimes = 1;\r\n\t\t};\r\n\r\n\t\t// 行動モードの設定\r\n\t\tGame_Battler.prototype.setBattleMode = function(mode, force) {\r\n\t\t\tif(force || (this._battleMode != \"fixed\" && this._battleMode != \"disabled\")){\r\n\t\t\t\tthis._battleMode = mode;\t\r\n\t\t\t}        \r\n\t\t};\r\n\t\t\r\n\t\tGame_Battler.prototype.setSquadMode = function(mode) {\r\n\t\t\tvar _this = this;\r\n\t\t\t_this.setBattleMode(mode);\r\n\t\t\tif(_this.squadId != -1){\r\n\t\t\t\tvar type = _this.isActor() ? \"actor\" : \"enemy\";\r\n\t\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\t\tif (event.isType() === type) {\r\n\t\t\t\t\t\tvar enemy = $gameSystem.EventToUnit(event.eventId())[1];\t\r\n\t\t\t\t\t\tif(enemy.squadId == _this.squadId){\r\n\t\t\t\t\t\t\tenemy.setBattleMode(_this._battleMode);\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\t\t\r\n\t\t}\r\n\r\n\t\tGame_Battler.prototype.battleMode = function() {\r\n\t\t\treturn this._battleMode;\r\n\t\t};\r\n\r\n\t\t// アイテム探査モードの設定\r\n\t\tGame_Battler.prototype.setSearchItem = function(mode) {\r\n\t\t\tif (mode) {\r\n\t\t\t\tthis._searchItem = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis._searchItem = false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.searchItem = function() {\r\n\t\t\treturn this._searchItem;\r\n\t\t};\r\n\r\n\t\t// ターゲットＩＤの設定\r\n\t\tGame_Battler.prototype.setTargetId = function(id) {\r\n\t\t\tthis._targetId = id;\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.targetId = function() {\r\n\t\t\treturn this._targetId;\r\n\t\t};\r\n\r\n\t\t// 行動回数を設定する（SRPG用）\r\n\t\tGame_Battler.prototype.SRPGActionTimesSet = function(amount) {\r\n\t\t\tthis._SRPGActionTimes = amount || 1;\r\n\t\t};\r\n\r\n\t\t// 行動回数を返す\r\n\t\tGame_Battler.prototype.SRPGActionTimes = function() {\r\n\t\t\treturn this._SRPGActionTimes;\r\n\t\t};\r\n\r\n\t\t// 行動回数を消費する\r\n\t\tGame_Battler.prototype.useSRPGActionTimes = function(num) {\r\n\t\t\tthis._SRPGActionTimes -= num;\r\n\t\t};\r\n\r\n\t\t// 行動回数の設定（戦闘用）\r\n\t\tvar _SRPG_Game_Battler_makeActionTimes = Game_Battler.prototype.makeActionTimes;\r\n\t\tGame_Battler.prototype.makeActionTimes = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_makeActionTimes.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// アクションのから配列を作成する\r\n\t\tGame_Battler.prototype.srpgMakeNewActions = function() {\r\n\t\t\tthis.clearActions();\r\n\t\t\t//if (this.canMove()) {\r\n\t\t\t\tvar actionTimes = this.makeActionTimes();\r\n\t\t\t\tthis._actions = [];\r\n\t\t\t\tfor (var i = 0; i < actionTimes; i++) {\r\n\t\t\t\t\tthis._actions.push(new Game_Action(this));\r\n\t\t\t\t}\r\n\t\t\t//}\r\n\t\t\tthis.setActionState('waiting');\r\n\t\t};\r\n\t\t\r\n\t\tGame_Battler.prototype.srpgInitAction = function() {\r\n\t\t\t this.clearActions();\r\n\t\t\t this._actions.push(new Game_Action(this));\r\n\t\t}\r\n\r\n\t\t// 行動開始時の処理\r\n\t\tvar _SRPG_Game_Battler_onBattleStart = Game_Battler.prototype.onBattleStart;\r\n\t\tGame_Battler.prototype.onBattleStart = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.setActionState('undecided');\r\n\t\t\t\tthis.clearMotion();\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_onBattleStart.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 行動終了時の処理\r\n\t\tvar _SRPG_Game_Battler_onAllActionsEnd = Game_Battler.prototype.onAllActionsEnd;\r\n\t\tGame_Battler.prototype.onAllActionsEnd = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.updateSrpgStateTurns(1);\r\n\t\t\t\tthis.removeStatesAuto(1);\r\n\t\t\t\tthis.clearResult();\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_onAllActionsEnd.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// ターン終了時の処理\r\n\t\tvar _SRPG_Game_Battler_onTurnEnd = Game_Battler.prototype.onTurnEnd;\r\n\t\tGame_Battler.prototype.onTurnEnd = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.regenerateAll();\r\n\t\t\t\tthis.updateSrpgStateTurns(2);\r\n\t\t\t\tthis.updateBuffTurns();\r\n\t\t\t\tthis.removeStatesAuto(2);\r\n\t\t\t\tthis.removeBuffsAuto();\r\n\t\t\t\tthis.clearResult();\r\n\t\t\t\tthis.setSrpgTurnEnd(false);\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Battler_onTurnEnd.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgCheckFloorEffect = function(x, y) {\r\n\t\t\tif ($gameMap.isDamageFloor(x, y) == true) {\r\n\t\t\t\tthis.srpgExecuteFloorDamage();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgExecuteFloorDamage = function() {\r\n\t\t\tvar damage = Math.floor(this.srpgBasicFloorDamage() * this.fdr);\r\n\t\t\tdamage = Math.min(damage, this.srpgMaxFloorDamage());\r\n\t\t\tthis.gainHp(-damage);\r\n\t\t\tif (damage > 0) {\r\n\t\t\t\t$gameScreen.startFlashForDamage();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgBasicFloorDamage = function() {\r\n\t\t\treturn this.mhp * 0.1;\r\n\t\t};\r\n\r\n\t\tGame_Battler.prototype.srpgMaxFloorDamage = function() {\r\n\t\t\treturn $dataSystem.optFloorDeath ? this.hp : Math.max(this.hp - 1, 0);\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Actor\r\n\t//====================================================================\r\n\t\tObject.defineProperty(Game_Actor.prototype, 'level', {\r\n\t\t\tget: function() {\r\n\t\t\t\tif($statCalc.isActorSRWInitialized(this)){\r\n\t\t\t\t\treturn this.SRWStats.pilot.level;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this._level; \r\n\t\t\t\t}\t\r\n\t\t\t},\r\n\t\t\tconfigurable: true\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\tGame_Actor.prototype.expForLevel = function(level) {\r\n\t\t\treturn 500 * level;\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.initExp = function() {\r\n\t\t\t//stubbed\t\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.currentExp = function() {\r\n\t\t\treturn this.SRWStats.pilot.exp;\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.currentLevelExp = function() {\r\n\t\t\treturn this.expForLevel(this._level);\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.nextLevelExp = function() {\r\n\t\t\treturn this.expForLevel(this._level + 1);\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.nextRequiredExp = function() {\r\n\t\t\treturn this.nextLevelExp() - this.currentExp();\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.maxLevel = function() {\r\n\t\t\treturn 99;\r\n\t\t};\r\n\r\n\t\tGame_Actor.prototype.isMaxLevel = function() {\r\n\t\t\treturn this._level >= this.maxLevel();\r\n\t\t};\r\n\t\t\r\n\t\tvar Game_Actor_initImages = Game_Actor.prototype.initImages;\r\n\t\tGame_Actor.prototype.initImages = function(overworldSpriteData) {\r\n\t\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\t\tvar actor = this.actor();\r\n\t\t\t\tif(!overworldSpriteData){\r\n\t\t\t\t\tif($dataClasses[actor.classId].meta.srpgOverworld){\r\n\t\t\t\t\t\toverworldSpriteData = $dataClasses[actor.classId].meta.srpgOverworld.split(\",\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toverworldSpriteData = [actor.characterName, actor.characterIndex];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\tthis._characterName = overworldSpriteData[0];\r\n\t\t\t\tthis._characterIndex = overworldSpriteData[1];\r\n\t\t\t\tthis._faceName = actor.faceName;\r\n\t\t\t\tthis._faceIndex = actor.faceIndex;\r\n\t\t\t\tthis._battlerName = actor.battlerName;\r\n\t\t\t} else {\r\n\t\t\t\tGame_Actor_initImages.call(this);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t};\r\n\r\n\t\t// 装備変更可能か\r\n\t\tWindow_EquipSlot.prototype.isEnabled = function(index) {\r\n\t\t\treturn this._actor ? this._actor.isEquipChangeOk(index) : false;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Actor.prototype.setAttack = function(slotId, item) {\r\n\t\t\tthis._equips[slotId].setObject(item);\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Game_Actor_isEquipChangeOk = Game_Actor.prototype.isEquipChangeOk;\r\n\t\tGame_Actor.prototype.isEquipChangeOk = function(slotId) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this.srpgTurnEnd() == true || this.isRestricted() == true) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn _SRPG_Game_Actor_isEquipChangeOk.call(this, slotId);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Actor_isEquipChangeOk.call(this, slotId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// アクターコマンドで装備が可能か（移動後は不可）\r\n\t\tGame_Actor.prototype.canSrpgEquip = function() {\r\n\t\t\treturn $gameTemp.originalPos()[0] == $gameTemp.activeEvent().posX() &&\r\n\t\t\t\t   $gameTemp.originalPos()[1] == $gameTemp.activeEvent().posY();\r\n\t\t};\r\n\r\n\t\t// 経験値の割合を返す\r\n\t\tGame_Actor.prototype.expRate = function() {\r\n\t\t\tif (this.isMaxLevel()) {\r\n\t\t\t\tvar rate = 1.0;\r\n\t\t\t} else {\r\n\t\t\t\tvar rate = (this.currentExp() - this.currentLevelExp()) / (this.nextLevelExp() - this.currentLevelExp());\r\n\t\t\t}\r\n\t\t\treturn rate;\r\n\t\t};\r\n\r\n\t\t// 移動力を返す\r\n\t\tGame_Actor.prototype.srpgMove = function() {\r\n\t\t\tvar n = this.currentClass().meta.srpgMove;\r\n\t\t\tif (!n) {\r\n\t\t\t\tn = _defaultMove;\r\n\t\t\t}\r\n\t\t\tn = Number(n);\r\n\t\t\t// ステートによる変更\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(state.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備による変更\r\n\t\t\tvar equips = this.equips();\r\n\t\t\tfor (var i = 0; i < equips.length; i++) {\r\n\t\t\t\tvar item = equips[i];\r\n\t\t\t\tif (item && item.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(item.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tn = Number(Math.max(n, 0));\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの射程を返す\r\n\t\tGame_Actor.prototype.srpgSkillRange = function(skill) {\r\n\t\t\tvar range = 1;\r\n\t\t\tif (skill && skill.meta.srpgRange == -1) {\r\n\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\tweapon = this.weapons()[0];\r\n\t\t\t\t\trange = weapon.meta.weaponRange;\r\n\t\t\t\t}\r\n\t\t\t} else if (skill.meta.srpgRange) {\r\n\t\t\t\trange = skill.meta.srpgRange;\r\n\t\t\t} else {\r\n\t\t\t\trange = 1;\r\n\t\t\t}\r\n\t\t\treturn Number(range);\r\n\t\t};\r\n\r\n\t\t// 武器の攻撃射程を返す\r\n\t\tGame_Actor.prototype.srpgWeaponRange = function() {\r\n\t\t\treturn this.srpgSkillRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// 武器が反撃可能かを返す\r\n\t\tGame_Actor.prototype.srpgWeaponCounter = function() {\r\n\t\t\tif (this.hasNoWeapons()) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tvar weapon = this.weapons()[0];\r\n\t\t\t\tif (!weapon.meta.srpgCounter || !weapon.meta.srpgCounter == 'false') {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 通行可能タグを返す（class, equip, stateの設定で最大の物を採用する）\r\n\t\tGame_Actor.prototype.srpgThroughTag = function() {\r\n\t\t\tvar n = 0;\r\n\t\t\t// 職業\r\n\t\t\tif (this.currentClass().meta.srpgThroughTag && n < Number(this.currentClass().meta.srpgThroughTag)) {\r\n\t\t\t\tn = Number(this.currentClass().meta.srpgThroughTag);\r\n\t\t\t}\r\n\t\t\t// ステート\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgThroughTag && n < Number(state.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(state.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備\r\n\t\t\tvar equips = this.equips();\r\n\t\t\tfor (var i = 0; i < equips.length; i++) {\r\n\t\t\t\tvar item = equips[i];\r\n\t\t\t\tif (item && item.meta.srpgThroughTag && n < Number(item.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(item.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの最低射程を返す\r\n\t\tGame_Actor.prototype.srpgSkillMinRange = function(skill) {\r\n\t\t\tvar minRange = 0;\r\n\t\t\tif (skill) {\r\n\t\t\t\tif (skill.meta.srpgRange == -1) {\r\n\t\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\t\tvar weapon = this.weapons()[0];\r\n\t\t\t\t\t\tminRange = weapon.meta.weaponMinRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (skill.meta.srpgMinRange) {\r\n\t\t\t\t\tminRange = skill.meta.srpgMinRange;\r\n\t\t\t\t}\r\n\t\t\t\tif (!minRange) {\r\n\t\t\t\t\tminRange = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tminRange = 0;\r\n\t\t\t}\r\n\t\t\tif (minRange > this.srpgSkillRange(skill)) {\r\n\t\t\t\tminRange = this.srpgSkillRange(skill);\r\n\t\t\t}\r\n\t\t\treturn Number(minRange);\r\n\t\t};\r\n\r\n\t\t// 武器の最低射程を返す\r\n\t\tGame_Actor.prototype.srpgWeaponMinRange = function() {\r\n\t\t\treturn this.srpgSkillMinRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// attackSkillId == 1 以外の武器を作る\r\n\t\tGame_Actor.prototype.attackSkillId = function() {\r\n\t\t\tvar weapon = this.weapons()[0];\r\n\t\t\tif (weapon && weapon.meta.srpgWeaponSkill) {\r\n\t\t\t\treturn Number(weapon.meta.srpgWeaponSkill);\r\n\t\t\t} else {\r\n\t\t\t\treturn Game_BattlerBase.prototype.attackSkillId.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//自動行動を決定する\r\n\t\tvar _SRPG_Game_Actor_makeAutoBattleActions = Game_Actor.prototype.makeAutoBattleActions;\r\n\t\tGame_Actor.prototype.makeAutoBattleActions = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tfor (var i = 0; i < this.numActions(); i++) {\r\n\t\t\t\t\tvar list = this.makeActionList();\r\n\t\t\t\t\tthis.setAction(i, list[Math.randomInt(list.length)]);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setActionState('waiting');\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Actor_makeAutoBattleActions.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Enemy\r\n\t//====================================================================\r\n\t\t// 戦闘画面での座標を設定する\r\n\t\tGame_Enemy.prototype.setScreenXy = function(x, y) {\r\n\t\t\tthis._screenX = x;\r\n\t\t\tthis._screenY = y;\r\n\t\t};\r\n\r\n\t\t// 移動力を返す\r\n\t\tGame_Enemy.prototype.srpgMove = function() {\r\n\t\t\tvar n = this.enemy().meta.srpgMove;\r\n\t\t\tif (!n) {\r\n\t\t\t\tn = _defaultMove;\r\n\t\t\t}\r\n\t\t\tn = Number(n);\r\n\t\t\t// ステートによる変更\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(state.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備による変更\r\n\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item && item.meta.srpgMovePlus) {\r\n\t\t\t\t\tn += Number(item.meta.srpgMovePlus);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tn = Number(Math.max(n, 0));\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの射程を返す\r\n\t\tGame_Enemy.prototype.srpgSkillRange = function(skill) {\r\n\t\t\tvar range = 1;\r\n\t\t\tif (skill && skill.meta.srpgRange == -1) {\r\n\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\t\trange = weapon.meta.weaponRange;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trange = this.enemy().meta.weaponRange;\r\n\t\t\t\t}\r\n\t\t\t} else if (skill.meta.srpgRange) {\r\n\t\t\t\trange = skill.meta.srpgRange;\r\n\t\t\t} else {\r\n\t\t\t\trange = 1;\r\n\t\t\t}\r\n\t\t\treturn Number(range);\r\n\t\t};\r\n\r\n\t\t// 武器の攻撃射程を返す\r\n\t\tGame_Enemy.prototype.srpgWeaponRange = function() {\r\n\t\t\treturn this.srpgSkillRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// 武器が反撃可能かを返す\r\n\t\tGame_Enemy.prototype.srpgWeaponCounter = function() {\r\n\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tvar counter = weapon.meta.srpgCounter;\r\n\t\t\t} else {\r\n\t\t\t\tvar counter = this.enemy().meta.srpgCounter;\r\n\t\t\t} \r\n\t\t\tif (!counter || !counter == 'false') {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 通行可能タグを返す（enemy, equip, stateの設定で最大の物を採用する）\r\n\t\tGame_Enemy.prototype.srpgThroughTag = function() {\r\n\t\t\tvar n = 0;\r\n\t\t\t// エネミー\r\n\t\t\tif (this.enemy().meta.srpgThroughTag && n < Number(this.enemy().meta.srpgThroughTag)) {\r\n\t\t\t\tn = Number(this.enemy().meta.srpgThroughTag);\r\n\t\t\t}\r\n\t\t\t// ステート\r\n\t\t\tthis.states().forEach(function(state) {\r\n\t\t\t\tif (state.meta.srpgThroughTag && n < Number(state.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(state.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\t// 装備\r\n\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item && item.meta.srpgThroughTag && n < Number(item.meta.srpgThroughTag)) {\r\n\t\t\t\t\tn = Number(item.meta.srpgThroughTag);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn n;\r\n\t\t};\r\n\r\n\t\t// スキル・アイテムの最低射程を返す\r\n\t\tGame_Enemy.prototype.srpgSkillMinRange = function(skill) {\r\n\t\t\tvar minRange = 0;\r\n\t\t\tif (skill) {\r\n\t\t\t\tif (skill.meta.srpgRange == -1) {\r\n\t\t\t\t\tif (!this.hasNoWeapons()) {\r\n\t\t\t\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\t\t\tminRange = weapon.meta.weaponMinRange;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tminRange = this.enemy().meta.weaponMinRange;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (skill.meta.srpgMinRange) {\r\n\t\t\t\t\tminRange = skill.meta.srpgMinRange;\r\n\t\t\t\t}\r\n\t\t\t\tif (!minRange) {\r\n\t\t\t\t\tminRange = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tminRange = 0;\r\n\t\t\t}\r\n\t\t\tif (minRange > this.srpgSkillRange(skill)) {\r\n\t\t\t\tminRange = this.srpgSkillRange(skill);\r\n\t\t\t}\r\n\t\t\treturn Number(minRange);\r\n\t\t};\r\n\r\n\t\t// 武器の最低射程を返す\r\n\t\tGame_Enemy.prototype.srpgWeaponMinRange = function() {\r\n\t\t\treturn this.srpgSkillMinRange($dataSkills[this.attackSkillId()]);\r\n\t\t};\r\n\r\n\t\t// 武器を装備しているか返す\r\n\t\tGame_Enemy.prototype.hasNoWeapons = function() {\r\n\t\t\treturn !$dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t};\r\n\r\n\t\t// 装備の特徴を反映する\r\n\t\tvar _SRPG_Game_Enemy_traitObjects = Game_Enemy.prototype.traitObjects;\r\n\t\tGame_Enemy.prototype.traitObjects = function() {\r\n\t\t\tvar objects = _SRPG_Game_Enemy_traitObjects.call(this);\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\tobjects.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn objects;\r\n\t\t};\r\n\r\n\t\t// 装備の能力変化値を反映する\r\n\t\tGame_Enemy.prototype.paramPlus = function(paramId) {\r\n\t\t\tvar value = Game_Battler.prototype.paramPlus.call(this, paramId);\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar item = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\tif (item) {\r\n\t\t\t\t\tvalue += item.params[paramId];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn value;\r\n\t\t};\r\n\r\n\t\t// 装備のアニメーションを反映する\r\n\t\tGame_Enemy.prototype.attackAnimationId = function() {\r\n\t\t\tif (this.hasNoWeapons()) {\r\n\t\t\t\treturn this.bareHandsAnimationId();\r\n\t\t\t} else {\r\n\t\t\t\tvar weapons = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\t\treturn weapons ? weapons.animationId : 1;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 装備が設定されていない（素手）の時のアニメーションＩＤ\r\n\t\tGame_Enemy.prototype.bareHandsAnimationId = function() {\r\n\t\t\treturn 1;\r\n\t\t};\r\n\r\n\t\t// attackSkillId == 1 以外の武器を作る\r\n\t\tGame_Enemy.prototype.attackSkillId = function() {\r\n\t\t\tvar weapon = $dataWeapons[this.enemy().meta.srpgWeapon];\r\n\t\t\tif (weapon && weapon.meta.srpgWeaponSkill) {\r\n\t\t\t\treturn Number(weapon.meta.srpgWeaponSkill);\r\n\t\t\t} else {\r\n\t\t\t\treturn Game_BattlerBase.prototype.attackSkillId.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// ＳＲＰＧ用の行動決定\r\n\t\tGame_Enemy.prototype.makeSrpgActions = function() {\r\n\t\t\tGame_Battler.prototype.makeActions.call(this);\r\n\t\t\tif (this.numActions() > 0) {\r\n\t\t\t\tif (this.isConfused()) {\r\n\t\t\t\t\tthis.makeConfusionActions();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar actionList = this.enemy().actions.filter(function(a) {\r\n\t\t\t\t\t\tif (a.skillId == 1) {\r\n\t\t\t\t\t\t\ta.skillId = this.attackSkillId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn this.isActionValid(a);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t\tif (actionList.length > 0) {\r\n\t\t\t\t\t\tthis.selectAllActions(actionList);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.setActionState('waiting');\r\n\t\t};\r\n\r\n\t\t// ＳＲＰＧ用の行動決定\r\n\t\tGame_Enemy.prototype.makeConfusionActions = function() {\r\n\t\t\tfor (var i = 0; i < this.numActions(); i++) {\r\n\t\t\t\tthis.action(i).setSkill(this.attackSkillId());\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Unit\r\n\t//====================================================================\r\n\t\tvar _SRPG_Game_Unit_onBattleEnd = Game_Unit.prototype.onBattleEnd;\r\n\t\tGame_Unit.prototype.onBattleEnd = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis._inBattle = false;\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Unit_onBattleEnd.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Party\r\n\t//====================================================================\r\n\t\t// 初期化\r\n\t\tvar _SRPG_Game_Party_initialize = Game_Party.prototype.initialize;\r\n\t\tGame_Party.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_Party_initialize.call(this);\r\n\t\t\tthis._srpgBattleActors = []; //SRPGモードの戦闘時に呼び出すメンバーを設定する（行動者と対象者）\r\n\t\t};\r\n\r\n\t\tGame_Party.prototype.SrpgBattleActors = function() {\r\n\t\t\treturn this._srpgBattleActors;\r\n\t\t};\r\n\r\n\t\tGame_Party.prototype.clearSrpgBattleActors = function() {\r\n\t\t\tthis._srpgBattleActors = [];\r\n\t\t};\r\n\r\n\t\tGame_Party.prototype.pushSrpgBattleActors = function(actor) {\r\n\t\t\tthis._srpgBattleActors.push(actor);\r\n\t\t};\r\n\t\t\r\n\t\t Game_Party.prototype.setSrpgBattleActors = function(actors) {\r\n\t\t\tthis._srpgBattleActors = actors;\r\n\t\t};\r\n\r\n\t\t//プレイヤー移動時の処理\r\n\t\tvar _SRPG_Game_Party_onPlayerWalk = Game_Party.prototype.onPlayerWalk;\r\n\t\tGame_Party.prototype.onPlayerWalk = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == false) {\r\n\t\t\t\treturn _SRPG_Game_Party_onPlayerWalk.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// SRPG戦闘中にはmembersで呼び出す配列を変える\r\n\t\tvar _SRPG_Game_Party_members = Game_Party.prototype.members;\r\n\t\tGame_Party.prototype.members = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif ($gameSystem.isSubBattlePhase() === 'normal' || $gameSystem.isSubBattlePhase() === 'initialize') {\r\n\t\t\t\t\treturn this.allMembers();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this.battleMembers();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_members.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// SRPG戦闘中にはbattleMembersで呼び出す配列を変える\r\n\t\tvar _SRPG_Game_Party_battleMembers = Game_Party.prototype.battleMembers;\r\n\t\tGame_Party.prototype.battleMembers = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.SrpgBattleActors();\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_battleMembers.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// セーブファイル用の処理\r\n\t\tvar _SRPG_Game_Party_charactersForSavefile = Game_Party.prototype.charactersForSavefile;\r\n\t\tGame_Party.prototype.charactersForSavefile = function() {\r\n\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.allMembers().map(function(actor) {\r\n\t\t\t\t\treturn [actor.characterName(), actor.characterIndex()];\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_charactersForSavefile.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Game_Party_facesForSavefile = Game_Party.prototype.facesForSavefile;\r\n\t\tGame_Party.prototype.facesForSavefile = function() {\r\n\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\treturn this.allMembers().map(function(actor) {\r\n\t\t\t\t\treturn [actor.faceName(), actor.faceIndex()];\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_facesForSavefile.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t/*\r\n\t\t// アイテム・スキルの使用条件\r\n\t\tvar _SRPG_Game_Party_canUse = Game_Party.prototype.canUse;\r\n\t\tGame_Party.prototype.canUse = function(item) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\t\t\treturn actor.canUse(item);\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Party_canUse.call(this, item);\r\n\t\t\t}\r\n\t\t};\r\n\t*/\r\n\t//====================================================================\r\n\t// ●Game_Troop\r\n\t//====================================================================\r\n\t\t// 初期化\r\n\t\tvar _Game_Troop_initialize = Game_Troop.prototype.initialize\r\n\t\tGame_Troop.prototype.initialize = function() {\r\n\t\t\t_Game_Troop_initialize.call(this);\r\n\t\t\tthis._srpgBattleEnemys = []; //SRPGモードの戦闘時に呼び出すメンバーを設定する（行動者と対象者）\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.SrpgBattleEnemys = function() {\r\n\t\t\treturn this._srpgBattleEnemys;\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.clearSrpgBattleEnemys = function() {\r\n\t\t\tthis._srpgBattleEnemys = [];\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.pushSrpgBattleEnemys = function(enemy) {\r\n\t\t\tthis._srpgBattleEnemys.push(enemy);\r\n\t\t};\r\n\t\t\r\n\t\t Game_Troop.prototype.setSrpgBattleEnemys = function(enemies) {\r\n\t\t\tthis._srpgBattleEnemys = enemies;\r\n\t\t\tthis._enemies = enemies;\r\n\t\t};\r\n\r\n\t\tGame_Troop.prototype.pushMembers = function(enemy) {\r\n\t\t\tthis._enemies.push(enemy);\r\n\t\t};\r\n\r\n\t\t// セットアップ\r\n\t\tvar _SRPG_Game_Troop_setup = Game_Troop.prototype.setup;\r\n\t\tGame_Troop.prototype.setup = function(troopId) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.clear();\r\n\t\t\t\tthis._troopId = troopId;\r\n\t\t\t\tthis._enemies = [];\r\n\t\t\t\tfor (var i = 0; i < this.SrpgBattleEnemys().length; i++) {\r\n\t\t\t\t\tvar enemy = this.SrpgBattleEnemys()[i];\r\n\t\t\t\t\tenemy.setScreenXy(200 + 240 * i, Graphics.height / 2 + 48);\r\n\t\t\t\t\tthis._enemies.push(enemy);\r\n\t\t\t\t}\r\n\t\t\t\tthis.makeUniqueNames();\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Troop_setup.call(this, troopId);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// EXPを返す\r\n\t\tvar _SRPG_Game_Troop_expTotal = Game_Troop.prototype.expTotal;\r\n\t\tGame_Troop.prototype.expTotal = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this.SrpgBattleEnemys() && this.SrpgBattleEnemys().length > 0) {\r\n\t\t\t\t\tif (this.isAllDead()) {\r\n\t\t\t\t\t\treturn _SRPG_Game_Troop_expTotal.call(this);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar exp = 0;\r\n\t\t\t\t\t\tfor (var i = 0; i < this.members().length; i++) {\r\n\t\t\t\t\t\t\tvar enemy = this.members()[i];\r\n\t\t\t\t\t\t\texp += enemy.exp();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn Math.floor(exp * _srpgBattleExpRate);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar actor = $gameParty.battleMembers()[0];\r\n\t\t\t\t\tvar exp = actor.nextLevelExp() - actor.currentLevelExp();\r\n\t\t\t\t\treturn Math.floor(exp * _srpgBattleExpRateForActors);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Troop_expTotal.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_CharacterBase\r\n\t//====================================================================\r\n\t\t//X座標を返す\r\n\t\tGame_CharacterBase.prototype.posX = function() {\r\n\t\t\treturn this._x;\r\n\t\t};\r\n\r\n\t\t//Y座標を返す\r\n\t\tGame_CharacterBase.prototype.posY = function() {\r\n\t\t\treturn this._y;\r\n\t\t};\r\n\t\t\r\n\t\tGame_CharacterBase.prototype.shiftY = function() {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t//イベントかどうかを返す\r\n\t\tGame_CharacterBase.prototype.isEvent = function() {\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの移動速度を変える（自動移動中は高速化）\r\n\t\tvar _SRPG_Game_CharacterBase_realMoveSpeed = Game_CharacterBase.prototype.realMoveSpeed;\r\n\t\tGame_CharacterBase.prototype.realMoveSpeed = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true && \r\n\t\t\t   ($gameTemp.isAutoMoveDestinationValid() == true || $gameTemp.isDestinationValid() == true)) {\r\n\t\t\t\treturn 6;\r\n\t\t\t} else {\r\n\t\t\t\treturn this._moveSpeed + (this.isDashing() ? 2 : 0);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中はキャラクターがすり抜けて移動するように変更する\r\n\t\tvar _SRPG_Game_CharacterBase_canPass = Game_CharacterBase.prototype.canPass;\r\n\t\tGame_CharacterBase.prototype.canPass = function(x, y, d) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_CharacterBase_canPass.call(this, x, y, d);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//対立陣営であれば通り抜けられない（移動範囲演算用） オブジェクトも一緒に処理する\r\n\t\tGame_CharacterBase.prototype.isSrpgCollidedWithEvents = function(x, y) {\r\n\t\t\tvar events = $gameMap.eventsXyNt(x, y);\r\n\t\t\treturn events.some(function(event) {\r\n\t\t\t\tif ((event.isType() === 'actor' && $gameTemp.activeEvent().isType() === 'enemy') ||\r\n\t\t\t\t\t(event.isType() === 'enemy' && $gameTemp.activeEvent().isType() === 'actor') ||\r\n\t\t\t\t\t(event.isType() === 'object' && event.characterName() != '') && !event.isErased()) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//移動可能かを判定する（移動範囲演算用）\r\n\t\tGame_CharacterBase.prototype.srpgMoveCanPass = function(x, y, d, tag) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (this.isSrpgCollidedWithEvents(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (this.isThrough()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (($gameMap.terrainTag(x2, y2) > 0 && $gameMap.terrainTag(x2, y2) <= tag) ||\r\n\t\t\t\t($gameMap.terrainTag(x, y) > 0 && $gameMap.terrainTag(x, y) <= tag &&\r\n\t\t\t\t $gameMap.isPassable(x2, y2, this.reverseDir(d)))) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (!this.isMapPassable(x, y, d)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t//対立陣営がいるか調べる（探索用移動範囲演算）\r\n\t\tGame_CharacterBase.prototype.isSrpgCollidedWithOpponentsUnit = function(x, y, d, route) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tvar events = $gameMap.eventsXyNt(x2, y2);\r\n\t\t\treturn events.some(function(event) {\r\n\t\t\t\tif ((event.isType() === 'actor' && $gameTemp.activeEvent().isType() === 'enemy') ||\r\n\t\t\t\t\t(event.isType() === 'enemy' && $gameTemp.activeEvent().isType() === 'actor') && !event.isErased()) {\r\n\t\t\t\t\tif ($gameTemp.isSrpgPriorityTarget()) {\r\n\t\t\t\t\t\tif ($gameTemp.isSrpgPriorityTarget() == event &&\r\n\t\t\t\t\t\t\t$gameTemp.isSrpgBestSearchRoute()[1].length > route.length) {\r\n\t\t\t\t\t\t\t$gameTemp.setSrpgBestSearchRoute([event, route]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ($gameTemp.isSrpgBestSearchRoute()[1].length > route.length) {\r\n\t\t\t\t\t\t\t$gameTemp.setSrpgBestSearchRoute([event, route]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//移動範囲の計算\r\n\t\tGame_CharacterBase.prototype.makeMoveTable = function(x, y, move, route, actor) {\r\n\t\t\tvar _this = this;\r\n\t\t\tfunction isPassableTile(currentX, currentY, x, y, actor){\r\n\t\t\t\tif(ENGINE_SETTINGS.USE_TILE_PASSAGE && !$statCalc.isFlying(actor)){\r\n\t\t\t\t\tvar direction = 0;\t\t\t\r\n\t\t\t\t\tif(currentX == x){\r\n\t\t\t\t\t\tif(currentY > y){\r\n\t\t\t\t\t\t\tdirection = 8; //up\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdirection = 2; //down\r\n\t\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(currentX > x){\r\n\t\t\t\t\t\t\tdirection = 4; //left\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdirection = 6; //right\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\tif(!_this.isMapPassable(currentX, currentY, direction)){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif($gameMap.regionId(x, y) == 0){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp._MoveTable[x] == undefined){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp._MoveTable[x][y] == undefined){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameMap.regionId(x, y) % 8 == 1 && !$statCalc.isFlying(actor)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameMap.regionId(x, y) % 8 == 2 && !$statCalc.canBeOnLand(actor) && !$statCalc.isFlying(actor)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameMap.regionId(x, y) % 8 == 3 && !$statCalc.canBeOnWater(actor) && !$statCalc.isFlying(actor)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameMap.regionId(x, y) % 8 == 4 && !$statCalc.canBeOnSpace(actor)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn $statCalc.isFreeSpace({x: x, y: y}, actor.isActor() ? \"enemy\" : \"actor\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar currentRegion = $gameMap.regionId(x, y) % 8; //1 air, 2 land, 3 water, 4 space\r\n\t\t\tvar moveCost = 1;\r\n\t\t\tif(route.length > 1){//no movecost for the start tile\r\n\t\t\t\tvar taggedCost = $gameMap.SRPGTerrainTag(x, y);\r\n\t\t\t\tif(taggedCost > 1){\r\n\t\t\t\t\tif(currentRegion == 4 || !$statCalc.isFlying(actor)){\r\n\t\t\t\t\t\tmoveCost = taggedCost;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\r\n\t\t\tif(currentRegion == 3 && !$statCalc.isFlying(actor)){\r\n\t\t\t\tif($statCalc.canBeOnWater(actor, \"water\") < 2){\r\n\t\t\t\t\tmoveCost*=2;\r\n\t\t\t\t}\r\n\t\t\t} \t\t\r\n\t\t\t\r\n\t\t\tif (move <= 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t//上方向を探索\r\n\t\t\tif (route[route.length - 1] != 2) {\r\n\t\t\t\tif (isPassableTile(x, y, x, y-1, actor)) {\r\n\t\t\t\t\tif ($gameTemp.MoveTable(x, $gameMap.roundY(y - 1))[0] < move - moveCost) {\r\n\t\t\t\t\t\tif ($gameTemp.MoveTable(x, $gameMap.roundY(y - 1))[0] < 0) {\r\n\t\t\t\t\t\t\t$gameTemp.pushMoveList([x, $gameMap.roundY(y - 1), false]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gameTemp.setMoveTable(x, $gameMap.roundY(y - 1), move - moveCost, route.concat(8));\r\n\t\t\t\t\t\tthis.makeMoveTable(x, $gameMap.roundY(y - 1), move - moveCost, route.concat(8), actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ($gameTemp.isSrpgBestSearchFlag() == true) {\r\n\t\t\t\t\tthis.isSrpgCollidedWithOpponentsUnit(x, y, 8, route);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//右方向を探索\r\n\t\t\tif (route[route.length - 1] != 4) {\r\n\t\t\t\tif (isPassableTile(x, y, x+1, y, actor)) {\r\n\t\t\t\t\tif ($gameTemp.MoveTable($gameMap.roundX(x + 1), y)[0] < move - moveCost) {\r\n\t\t\t\t\t\tif ($gameTemp.MoveTable($gameMap.roundX(x + 1), y)[0] < 0) {\r\n\t\t\t\t\t\t\t$gameTemp.pushMoveList([$gameMap.roundX(x + 1), y, false]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gameTemp.setMoveTable($gameMap.roundX(x + 1), y, move - moveCost, route.concat(6));\r\n\t\t\t\t\t\tthis.makeMoveTable($gameMap.roundX(x + 1), y, move - moveCost, route.concat(6), actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ($gameTemp.isSrpgBestSearchFlag() == true) {\r\n\t\t\t\t\tthis.isSrpgCollidedWithOpponentsUnit(x, y, 6, route);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//左方向を探索\r\n\t\t\tif (route[route.length - 1] != 6) {\r\n\t\t\t\tif (isPassableTile(x, y, x-1, y, actor)) {\r\n\t\t\t\t\tif ($gameTemp.MoveTable($gameMap.roundX(x - 1), y)[0] < move - moveCost) {\r\n\t\t\t\t\t\tif ($gameTemp.MoveTable($gameMap.roundX(x - 1), y)[0] < 0) {\r\n\t\t\t\t\t\t\t$gameTemp.pushMoveList([$gameMap.roundX(x - 1), y, false]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gameTemp.setMoveTable($gameMap.roundX(x - 1), y, move - moveCost, route.concat(4));\r\n\t\t\t\t\t\tthis.makeMoveTable($gameMap.roundX(x - 1), y, move - moveCost, route.concat(4), actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ($gameTemp.isSrpgBestSearchFlag() == true) {\r\n\t\t\t\t\tthis.isSrpgCollidedWithOpponentsUnit(x, y, 4, route);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//下方向を探索\r\n\t\t\tif (route[route.length - 1] != 8) {\r\n\t\t\t\tif (isPassableTile(x, y, x, y+1, actor)) {\r\n\t\t\t\t\tif ($gameTemp.MoveTable(x, $gameMap.roundY(y + 1))[0] < move - moveCost) {\r\n\t\t\t\t\t\tif ($gameTemp.MoveTable(x, $gameMap.roundY(y + 1))[0] < 0) {\r\n\t\t\t\t\t\t\t$gameTemp.pushMoveList([x, $gameMap.roundY(y + 1), false]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t$gameTemp.setMoveTable(x, $gameMap.roundY(y + 1), move - moveCost, route.concat(2));\r\n\t\t\t\t\t\tthis.makeMoveTable(x, $gameMap.roundY(y + 1), move - moveCost, route.concat(2), actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if ($gameTemp.isSrpgBestSearchFlag() == true) {\r\n\t\t\t\t\tthis.isSrpgCollidedWithOpponentsUnit(x, y, 2, route);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//通行可能かを判定する（攻撃射程演算用）\r\n\t\tGame_CharacterBase.prototype.srpgRangeCanPass = function(x, y, d) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif ($gameMap.terrainTag(x2, y2) == 7) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t\r\n\t\t//特殊射程の処理\r\n\t\tGame_CharacterBase.prototype.srpgRangeExtention = function(x, y, oriX, oriY, skill, range) {\r\n\t\t\tswitch (skill && skill.meta.specialRange) {\r\n\t\t\tcase 'king': \r\n\t\t\t\tif ((Math.abs(x - oriX) <= range / 2) && (Math.abs(y - oriY) <= range / 2)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'queen': \r\n\t\t\t\tif ((x == oriX || y == oriY) || (Math.abs(x - oriX) == Math.abs(y - oriY))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'luke': \r\n\t\t\t\tif (x == oriX || y == oriY) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'bishop': \r\n\t\t\t\tif (Math.abs(x - oriX) == Math.abs(y - oriY)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tcase 'knight': \r\n\t\t\t\tif (!((x == oriX || y == oriY) || (Math.abs(x - oriX) == Math.abs(y - oriY)))) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//攻撃射程の計算\r\n\t\tGame_CharacterBase.prototype.makeRangeTable = function(x, y, range, route, oriX, oriY, skill) {\r\n\t\t\tif (range <= 0) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t//上方向を探索\r\n\t\t\tif (route[route.length - 1] != 2) {\r\n\t\t\t\tif (this.srpgRangeCanPass(x, y, 8)) {\r\n\t\t\t\t\t//if ($gameTemp.RangeTable(x, $gameMap.roundY(y - 1))[0] < range - 1) {\r\n\t\t\t\t\t\tif (this.srpgRangeExtention(x, $gameMap.roundY(y - 1), oriX, oriY, skill, range + route.length - 1) == true) {\r\n\t\t\t\t\t\t\tif ($gameTemp.MoveTable(x, $gameMap.roundY(y - 1))[0] < 0 && $gameTemp.RangeTable(x, $gameMap.roundY(y - 1))[0] < 0) {\r\n\t\t\t\t\t\t\t\t$gameTemp.pushRangeList([x, $gameMap.roundY(y - 1), true]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$gameTemp.setRangeTable(x, $gameMap.roundY(y - 1), range - 1, route.concat(8));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.makeRangeTable(x, $gameMap.roundY(y - 1), range - 1, route.concat(8), oriX, oriY, skill);\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//右方向を探索\r\n\t\t\tif (route[route.length - 1] != 4) {\r\n\t\t\t\tif (this.srpgRangeCanPass(x, y, 6)) {\r\n\t\t\t\t\t//if ($gameTemp.RangeTable($gameMap.roundX(x + 1), y)[0] < range - 1) {\r\n\t\t\t\t\t\tif (this.srpgRangeExtention($gameMap.roundX(x + 1), y, oriX, oriY, skill, range + route.length - 1) == true) {\r\n\t\t\t\t\t\t\tif ($gameTemp.MoveTable($gameMap.roundX(x + 1), y)[0] < 0 && $gameTemp.RangeTable($gameMap.roundX(x + 1), y)[0] < 0) {\r\n\t\t\t\t\t\t\t\t$gameTemp.pushRangeList([$gameMap.roundX(x + 1), y, true]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$gameTemp.setRangeTable($gameMap.roundX(x + 1), y, range - 1, route.concat(6));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.makeRangeTable($gameMap.roundX(x + 1), y, range - 1, route.concat(6), oriX, oriY, skill);\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//左方向を探索\r\n\t\t\tif (route[route.length - 1] != 6) {\r\n\t\t\t\tif (this.srpgRangeCanPass(x, y, 4)) {\r\n\t\t\t\t\t//if ($gameTemp.RangeTable($gameMap.roundX(x - 1), y)[0] < range - 1) {\r\n\t\t\t\t\t\tif (this.srpgRangeExtention($gameMap.roundX(x - 1), y, oriX, oriY, skill, range + route.length - 1) == true) {\r\n\t\t\t\t\t\t\tif ($gameTemp.MoveTable($gameMap.roundX(x - 1), y)[0] < 0 && $gameTemp.RangeTable($gameMap.roundX(x - 1), y)[0] < 0) {\r\n\t\t\t\t\t\t\t\t$gameTemp.pushRangeList([$gameMap.roundX(x - 1), y, true]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$gameTemp.setRangeTable($gameMap.roundX(x - 1), y, range - 1, route.concat(4));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.makeRangeTable($gameMap.roundX(x - 1), y, range - 1, route.concat(4), oriX, oriY, skill);\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//下方向を探索\r\n\t\t\tif (route[route.length - 1] != 8) {\r\n\t\t\t\tif (this.srpgRangeCanPass(x, y, 2)) {\r\n\t\t\t\t\t//if ($gameTemp.RangeTable(x, $gameMap.roundY(y + 1))[0] < range - 1) {\r\n\t\t\t\t\t\tif (this.srpgRangeExtention(x, $gameMap.roundY(y + 1), oriX, oriY, skill, range + route.length - 1) == true) {\r\n\t\t\t\t\t\t\tif ($gameTemp.MoveTable(x, $gameMap.roundY(y + 1))[0] < 0 && $gameTemp.RangeTable(x, $gameMap.roundY(y + 1))[0] < 0) {\r\n\t\t\t\t\t\t\t\t$gameTemp.pushRangeList([x, $gameMap.roundY(y + 1), true]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$gameTemp.setRangeTable(x, $gameMap.roundY(y + 1), range - 1, route.concat(2));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.makeRangeTable(x, $gameMap.roundY(y + 1), range - 1, route.concat(2), oriX, oriY, skill);\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//移動可能かを判定する（イベント出現時用）\r\n\t\tGame_CharacterBase.prototype.srpgAppearCanPass = function(x, y, d) {\r\n\t\t\tvar x2 = $gameMap.roundXWithDirection(x, d);\r\n\t\t\tvar y2 = $gameMap.roundYWithDirection(y, d);\r\n\t\t\tif (!$gameMap.isValid(x2, y2)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (!this.isMapPassable(x, y, d)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t//出現可能場所の計算\r\n\t\tGame_CharacterBase.prototype.makeAppearPoint = function(event, x, y) {\r\n\t\t\tvar events = $gameMap.eventsXyNt(x, y);\r\n\t\t\tif (events.length == 0 || (events.length == 1 && events[0] == event)) {\r\n\t\t\t\treturn [x,y];\r\n\t\t\t}\r\n\t\t\t//上方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 8)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x, y - 1);\r\n\t\t\t}\r\n\t\t\t//右方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 6)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x + 1, y);\r\n\t\t\t}\r\n\t\t\t//左方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 4)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x - 1, y);\r\n\t\t\t}\r\n\t\t\t//下方向を探索\r\n\t\t\tif (this.srpgAppearCanPass(x, y, 2)) {\r\n\t\t\t\treturn this.makeAppearPoint(event, x, y + 1);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar Game_CharacterBase_update = Game_CharacterBase.prototype.update;\r\n\t\tGame_CharacterBase.prototype.update = function() {\r\n\t\t\tGame_CharacterBase_update.call(this);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tvar Game_CharacterBase_initialize = Game_CharacterBase.prototype.initialize;\r\n\t\tGame_CharacterBase.prototype.initialize = function() {\r\n\t\t\tGame_CharacterBase_initialize.call(this);\r\n\t\t\tthis._floatOffset = 0;\r\n\t\t\tthis._floatAmount = 10;\r\n\t\t\tthis._floating = false;\r\n\t\t}\r\n\t\t\r\n\t\tvar Game_CharacterBase_screenY = Game_CharacterBase.prototype.screenY;\r\n\t\tGame_CharacterBase.prototype.screenY = function() {\r\n\t\t\tvar value = Game_CharacterBase_screenY.call(this);\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._eventId);\r\n\t\t\tif(battlerArray && $statCalc.isFlying(battlerArray[1])){\r\n\t\t\t\tif(!this._floating){\r\n\t\t\t\t\tthis._floatOffset = 0;\r\n\t\t\t\t\tthis._floating = true;\r\n\t\t\t\t\tthis._floatTimer = this._floatAmount;\r\n\t\t\t\t}\r\n\t\t\t\tif(this._floatTimer > 0) {\r\n\t\t\t\t\tthis._floatTimer--;\r\n\t\t\t\t\tthis._floatOffset--;\r\n\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tif(this._floating){\r\n\t\t\t\t\tthis._floatOffset = this._floatAmount * -1;\r\n\t\t\t\t\tthis._floating = false;\r\n\t\t\t\t\tthis._floatTimer = this._floatAmount;\r\n\t\t\t\t}\r\n\t\t\t\tif(this._floatTimer > 0) {\r\n\t\t\t\t\tthis._floatTimer--;\r\n\t\t\t\t\tthis._floatOffset++;\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\tvalue+=this._floatOffset;\r\n\t\t\treturn Math.round(value);\r\n\t\t};\r\n\t\t\r\n\t\t/*Extensions to character map animations*/\r\n\t\t\r\n\t\tGame_CharacterBase.prototype.requestAnimation = function(animationId, options) {\r\n\t\t\tthis._animationId = animationId;\r\n\t\t\tthis._animationOptions = options;\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t//====================================================================\r\n\t// ●Game_Player\r\n\t//====================================================================\r\n\t\t//プレイヤーの画像を変更する\r\n\t\t\r\n\t\tGame_Player.prototype.initialize = function() {\r\n\t\tGame_Character.prototype.initialize.call(this);\r\n\t\t\tthis.setTransparent($dataSystem.optTransparent);\r\n\t\t\tthis._topSpeed = ENGINE_SETTINGS.CURSOR_SPEED || 4;\r\n\t\t\tthis._initialSpeed = this._topSpeed;\r\n\t\t\tthis._moveSpeed = this._initialSpeed + 1;\r\n\t\t\tthis._tileCounter = 0;\r\n\t\t\tthis._speedResetCounter = 0;\r\n\t\t\tthis._followSpeed = 0;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Player.prototype.setMoveSpeed = function(moveSpeed) {\r\n\t\t\tthis._moveSpeed = moveSpeed;\r\n\t\t};\r\n\t\t\r\n\t\tvar _SRPG_Game_Player_refresh = Game_Player.prototype.refresh;\r\n\t\tGame_Player.prototype.refresh = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar characterName = 'srpg_set';\r\n\t\t\t\tvar characterIndex = 0;\r\n\t\t\t\tthis.setImage(characterName, characterIndex);\r\n\t\t\t\tthis._followers.refresh();\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Player_refresh.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Player.prototype.setFollowSpeed = function(speed) {\r\n\t\t\tthis._moveSpeed = speed;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Player.prototype.clearFollowSpeed = function() {\r\n\t\t\tthis._moveSpeed = this._topSpeed + 1;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Player.prototype.update = function(sceneActive) {\t\t\r\n\t\t\t/*if(this._followSpeed){\r\n\t\t\t\tthis._moveSpeed = this._followSpeed;\r\n\t\t\t}else if(Input.isPressed('shift')){\r\n\t\t\t\tthis._moveSpeed = ENGINE_SETTINGS.CURSOR_MAX_SPEED || this._topSpeed;\r\n\t\t\t} else {\r\n\t\t\t\tif(this._tileCounter > 1){\r\n\t\t\t\t\tthis._moveSpeed = this._topSpeed;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(this._speedResetCounter <= 0){\r\n\t\t\t\t\t\tthis._moveSpeed = this._initialSpeed;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._speedResetCounter--;\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}*/\r\n\t\t\tif(!this._moveSpeed){ //support for old save files\r\n\t\t\t\tthis._moveSpeed = ENGINE_SETTINGS.CURSOR_SPEED || 4;\r\n\t\t\t}\t\r\n\t\t\t//console.log(\"move speed: \"+this._moveSpeed);\r\n\t\t\t\r\n\t\t\tvar lastScrolledX = this.scrolledX();\r\n\t\t\tvar lastScrolledY = this.scrolledY();\r\n\t\t\tvar wasMoving = this.isMoving();\r\n\t\t\tthis.updateDashing();\r\n\t\t\tif (sceneActive) {\r\n\t\t\t\tthis.moveByInput();\r\n\t\t\t}\r\n\t\t\tGame_Character.prototype.update.call(this);\r\n\t\t\tthis.updateScroll(lastScrolledX, lastScrolledY);\r\n\t\t\tthis.updateVehicle();\r\n\t\t\tif (!this.isMoving()) {\r\n\t\t\t\tthis.updateNonmoving(wasMoving);\r\n\t\t\t\tif(!wasMoving){\r\n\t\t\t\t\t$gameTemp.clearDestination();\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis._followers.update();\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動を設定する\r\n\t\tvar _SRPG_Game_Player_moveByInput = Game_Player.prototype.moveByInput;\r\n\t\tGame_Player.prototype.moveByInput = function() {\t\r\n\t\t\tthis.wasTouchMoved = false;\r\n\t\t\tif(!this.getInputDirection()){\t\t\t\r\n\t\t\t\tif(this._tileCounter > 0){\t\t\t\t\r\n\t\t\t\t\tthis._speedResetCounter = 10;\r\n\t\t\t\t}\r\n\t\t\t\tthis._tileCounter = 0;\t\t\r\n\t\t\t} else if(!this.isMoving()){\r\n\t\t\t\tthis._tileCounter++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t if ($gameSystem.isSRPGMode() == true && $gameTemp.isAutoMoveDestinationValid() == true &&\r\n\t\t\t\t!this.isMoving()) {\r\n\t\t\t\tvar x = $gameTemp.autoMoveDestinationX() - this.x;\r\n\t\t\t\tvar y = $gameTemp.autoMoveDestinationY() - this.y;\r\n\t\t\t\tif ($gameMap.isLoopHorizontal() == true) {\r\n\t\t　　        var minDisX = Math.abs($gameTemp.autoMoveDestinationX() - this.x);\r\n\t\t\t\t\tvar destX = $gameTemp.autoMoveDestinationX() > this.x ? $gameTemp.autoMoveDestinationX() - $gameMap.width() : $gameTemp.autoMoveDestinationX() + $gameMap.width();\r\n\t\t\t\t\tvar disX = Math.abs(destX - this.x);\r\n\t\t\t\t\tx = minDisX < disX ? x : x * -1;\r\n\t\t\t\t}\r\n\t\t\t\tif ($gameMap.isLoopVertical() == true) {\r\n\t\t\t　　    var minDisY = Math.abs($gameTemp.autoMoveDestinationY() - this.y);\r\n\t\t\t\t\tvar destY = $gameTemp.autoMoveDestinationY() > this.y ? $gameTemp.autoMoveDestinationY() - $gameMap.height() : $gameTemp.autoMoveDestinationY() + $gameMap.height();\r\n\t\t\t\t\tvar disY = Math.abs(destY - this.y);\r\n\t\t\t\t\ty = minDisY < disY ? y : y * -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (x < 0) {\r\n\t\t\t\t\tif (y < 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(4, 8);\r\n\t\t\t\t\t} else if (y == 0) {\r\n\t\t\t\t\t\tthis.moveStraight(4);\r\n\t\t\t\t\t} else if (y > 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(4, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (x == 0) {\r\n\t\t\t\t\tif (y < 0) {\r\n\t\t\t\t\t\tthis.moveStraight(8);\r\n\t\t\t\t\t} else if (y == 0) {\r\n\t\t\t\t\t\t$gameTemp.setAutoMoveDestinationValid(false);\r\n\t\t\t\t\t\t$gameTemp.setAutoMoveDestination(-1, -1);\r\n\t\t\t\t\t} else if (y > 0) {\r\n\t\t\t\t\t\tthis.moveStraight(2);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (x > 0) {\r\n\t\t\t\t\tif (y < 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(6, 8);\r\n\t\t\t\t\t} else if (y == 0) {\r\n\t\t\t\t\t\tthis.moveStraight(6);\r\n\t\t\t\t\t} else if (y > 0) {\r\n\t\t\t\t\t\tthis.moveDiagonally(6, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\t\r\n\t\t\t//\tmapRetargetLock\r\n\t\t\t\tif (!this.isMoving() && this.canMove()) {\r\n\t\t\t\t\tvar direction = this.getInputDirection();\r\n\t\t\t\t\tvar validDestination = true;\r\n\t\t\t\t\tif($gameTemp.mapRetargetLock && $gameTemp.currentMapTargetTiles && $gameTemp.currentMapTargetTiles.length){\r\n\t\t\t\t\t\t// up: 8 down: 2 left: 4 right: 6\r\n\t\t\t\t\t\tvar x = this._realX;\r\n\t\t\t\t\t\tvar y = this._realY;\r\n\t\t\t\t\t\tif(direction == 8){\r\n\t\t\t\t\t\t\ty--;\r\n\t\t\t\t\t\t} else if(direction == 2){\r\n\t\t\t\t\t\t\ty++;\r\n\t\t\t\t\t\t} else if(direction == 6){\r\n\t\t\t\t\t\t\tx++;\r\n\t\t\t\t\t\t} else if(direction == 4){\r\n\t\t\t\t\t\t\tx--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvalidDestination = false;\r\n\t\t\t\t\t\tctr = 0;\r\n\t\t\t\t\t\twhile(!validDestination && ctr < $gameTemp.currentMapTargetTiles.length){\r\n\t\t\t\t\t\t\tvar coords = $gameTemp.currentMapTargetTiles[ctr++];\r\n\t\t\t\t\t\t\tif(coords[0] == x && coords[1] == y){\r\n\t\t\t\t\t\t\t\tvalidDestination = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(validDestination){\r\n\t\t\t\t\t\tif (direction > 0) {\r\n\t\t\t\t\t\t\t$gameTemp.clearDestination();\r\n\t\t\t\t\t\t} else if ($gameTemp.isDestinationValid()){\r\n\t\t\t\t\t\t\tvar x = $gameTemp.destinationX();\r\n\t\t\t\t\t\t\tvar y = $gameTemp.destinationY();\r\n\t\t\t\t\t\t\tif($gameTemp.cameraMode == \"touch\"){\r\n\t\t\t\t\t\t\t\tif(x >= 0 && x < $gameMap.width() && y >= 0 && y < $gameMap.height() && (x != this.posX() || y != this.posY())){\r\n\t\t\t\t\t\t\t\t\tthis.locate(x, y, true);\r\n\t\t\t\t\t\t\t\t\tthis.wasTouchMoved = true;\r\n\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdirection = this.findDirectionTo(x, y);\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (direction > 0) {\r\n\t\t\t\t\t\t\tthis.executeMove(direction);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}      \r\n\t\t};\r\n\t\t\r\n\t\tGame_Player.prototype.locate = function(x, y, keepCameraPosition) {\r\n\t\t\tGame_Character.prototype.locate.call(this, x, y);\r\n\t\t\tif(!keepCameraPosition){\r\n\t\t\t\tthis.center(x, y);\r\n\t\t\t}\t\t\t\r\n\t\t\tthis.makeEncounterCount();\r\n\t\t\tif (this.isInVehicle()) {\r\n\t\t\t\tthis.vehicle().refresh();\r\n\t\t\t}\r\n\t\t\tthis._followers.synchronize(x, y, this.direction());\r\n\t\t};\r\n\r\n\t\t\r\n\t\tGame_Player.prototype.updateEncounterCount = function() {\r\n\t\t\t\r\n\t\t};\r\n\t\t\r\n\t/* 戦闘中のイベント起動に関する処理\r\n\t * 戦闘中、通常のイベント内容は起動しないようにする\r\n\t * 戦闘中はユニットが選択されたと判断して、移動範囲演算とステータスの表示を行う(行動可能アクターなら行動する)。\r\n\t*/\r\n\t\t//戦闘中、ユニット上で決定キーが押された時の処理\r\n\t\tvar _SRPG_Game_Player_startMapEvent = Game_Player.prototype.startMapEvent;\r\n\t\tGame_Player.prototype.startMapEvent = function(x, y, triggers, normal) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (!$gameMap.isEventRunning() && $gameSystem.isBattlePhase() === 'actor_phase') {\r\n\t\t\t\t\tif(!$SRWGameState.updateMapEvent(x, y, triggers)){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ($gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else if ($gameSystem.isSubBattlePhase() === 'twin_selection') {\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Player_startMapEvent.call(this, x, y, triggers, normal);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中、サブフェーズの状況に応じてプレイヤーの移動を制限する\r\n\t\tvar _SRPG_Game_Player_canMove = Game_Player.prototype.canMove;\r\n\t\tGame_Player.prototype.canMove = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\t\t\t\t\r\n\t\t\t\tif(!$SRWGameState.canCursorMove()){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif($gameSystem.isSubBattlePhase() === 'rearrange_deploys'){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn _SRPG_Game_Player_canMove.call(this);\r\n\t\t};\r\n\r\n\t\t//戦闘中、サブフェーズの状況に応じて決定キー・タッチの処理を変える\r\n\t\tvar _SRPG_Game_Player_triggerAction = Game_Player.prototype.triggerAction;\r\n\t\tGame_Player.prototype.triggerAction = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif(!$SRWGameState.updateTriggerAction(this)){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn _SRPG_Game_Player_triggerAction.call(this);\r\n\t\t\t\t}\t\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Game_Player_triggerAction.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中、隣接するイベントへの起動判定は行わない\r\n\t\tvar _SRPG_Game_Player_checkEventTriggerThere = Game_Player.prototype.checkEventTriggerThere;\r\n\t\tGame_Player.prototype.checkEventTriggerThere = function(triggers) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == false) {\r\n\t\t\t\t_SRPG_Game_Player_checkEventTriggerThere.call(this, triggers);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//戦闘中、接触による起動判定は行わない\r\n\t\tvar _SRPG_Game_Player_checkEventTriggerTouch = Game_Player.prototype.checkEventTriggerTouch;\r\n\t\tGame_Player.prototype.checkEventTriggerTouch = function(x, y) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == false) {\r\n\t\t\t\t_SRPG_Game_Player_checkEventTriggerTouch.call(this, x, y);\r\n\t\t\t}\r\n\t\t};\r\n\t\r\n\t\tGame_Player.prototype.updateScroll = function(lastScrolledX, lastScrolledY) {\r\n\t\t\tif($gameTemp.cameraMode == \"touch\"){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar x1 = lastScrolledX;\r\n\t\t\tvar y1 = lastScrolledY;\r\n\t\t\tvar x2 = this.scrolledX();\r\n\t\t\tvar y2 = this.scrolledY();\r\n\t\t\tvar deadZoneY;\r\n\t\t\tvar deadZoneX;\r\n\t\t\tif(ENGINE_SETTINGS.LOCK_CAMERA_TO_CURSOR){\r\n\t\t\t\tdeadZoneY = 0;\r\n\t\t\t\tdeadZoneX = 0;\r\n\t\t\t} else {\r\n\t\t\t\tdeadZoneY = 3;\r\n\t\t\t\tdeadZoneX = 5;\r\n\t\t\t}\r\n\t\t\tif (y2 > y1 && y2 > this.centerY() + deadZoneY) {\r\n\t\t\t\t$gameMap.scrollDown(y2 - y1);\r\n\t\t\t}\r\n\t\t\tif (x2 < x1 && x2 < this.centerX() - deadZoneX) {\r\n\t\t\t\t$gameMap.scrollLeft(x1 - x2);\r\n\t\t\t}\r\n\t\t\tif (x2 > x1 && x2 > this.centerX() + deadZoneX) {\r\n\t\t\t\t$gameMap.scrollRight(x2 - x1);\r\n\t\t\t}\r\n\t\t\tif (y2 < y1 && y2 < this.centerY() - deadZoneY) {\r\n\t\t\t\t$gameMap.scrollUp(y1 - y2);\r\n\t\t\t}\r\n\t\t};\r\n\t//====================================================================\r\n\t// ●Game_Follower\r\n\t//====================================================================\r\n\t\t//戦闘中、フォロワーが表示されないようにする\r\n\t\tvar _SRPG_Game_Follower_refresh = Game_Follower.prototype.refresh;\r\n\t\tGame_Follower.prototype.refresh = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.setImage('', 0);\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Follower_refresh.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//====================================================================\r\n\t// ●Game_Event\r\n\t//====================================================================\r\n\t\t//初期化処理\r\n\t\tvar _SRPG_Game_Event_initMembers = Game_Event.prototype.initMembers;\r\n\t\tGame_Event.prototype.initMembers = function() {\r\n\t\t\t_SRPG_Game_Event_initMembers.call(this);\r\n\t\t\tthis._srpgForceRoute = [];\r\n\t\t\tthis._srpgEventType = '';\r\n\t\t};\r\n\r\n\t\t//ゲームページを返す\r\n\t\tGame_Event.prototype.pageIndex = function() {\r\n\t\t\treturn this._pageIndex;\r\n\t\t};\r\n\r\n\t\t//イベントかどうかを返す\r\n\t\tGame_Event.prototype.isEvent = function() {\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t//消去済みかどうかを返す\r\n\t\tGame_Event.prototype.isErased = function() {\r\n\t\t\treturn this._erased;\r\n\t\t};\r\n\r\n\t\t//消去済みフラグを消す\r\n\t\tGame_Event.prototype.appear = function() {\r\n\t\t\tthis._erased = false;\r\n\t\t\tthis.refresh();\r\n\t\t};\r\n\r\n\t\t//タイプを設定する\r\n\t\tGame_Event.prototype.setType = function(type) {\r\n\t\t\tthis._srpgEventType = type;\r\n\t\t};\r\n\r\n\t\t//タイプを返す\r\n\t\tGame_Event.prototype.isType = function() {\r\n\t\t\treturn this._srpgEventType;\r\n\t\t};\r\n\r\n\t\t// アクター・エネミーデータを元にイベントのグラフィックを変更する＋戦闘以外では元に戻す\r\n\t\tGame_Event.prototype.refreshImage = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._eventId);\r\n\t\t\t\tif (!battlerArray || this.isErased()) {\r\n\t\t\t\t\treturn ;\r\n\t\t\t\t}\r\n\t\t\t\tvar type = battlerArray[0];\r\n\t\t\t\tvar unit = battlerArray[1];\r\n\t\t\t\tif (type === 'actor') {\r\n\t\t\t\t\tvar mechClass;\r\n\r\n\t\t\t\t\tif(unit.SRWStats && unit.SRWStats.mech){\r\n\t\t\t\t\t\tmechClass = unit.SRWStats.mech.id;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmechClass = unit._classId;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar overworldSpriteData = $dataClasses[mechClass].meta.srpgOverworld.split(\",\");\r\n\t\t\t\t\tcharacterName = overworldSpriteData[0];\r\n\t\t\t\t\tcharacterIndex = overworldSpriteData[1];\r\n\t\t\t\t\tthis.setImage(characterName, characterIndex);\r\n\t\t\t\t} else if (type === 'enemy') {\r\n\t\t\t\t\tvar characterName;\r\n\t\t\t\t\tvar characterIndex;        \r\n\t\t\t\t\tvar mechClass = unit._mechClass;\r\n\t\t\t\t\tif(mechClass){\r\n\t\t\t\t\t\tvar overworldSpriteData = $dataClasses[mechClass].meta.srpgOverworld.split(\",\");\r\n\t\t\t\t\t\tcharacterName = overworldSpriteData[0];\r\n\t\t\t\t\t\tcharacterIndex = overworldSpriteData[1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcharacterName = unit.enemy().meta.characterName;\r\n\t\t\t\t\t\tcharacterIndex = unit.enemy().meta.characterIndex;\r\n\t\t\t\t\t\tif (!characterName || !characterIndex) {\r\n\t\t\t\t\t\t\tcharacterName = 'monster.png';\r\n\t\t\t\t\t\t\tcharacterIndex = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setImage(characterName, characterIndex);\r\n\t\t\t\t} else if (type === 'null') {\r\n\t\t\t\t\tthis.erase();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (this.isErased()) {\r\n\t\t\t\t\tthis.appear();\r\n\t\t\t\t}\r\n\t\t\t\tvar page = this.page();\r\n\t\t\t\tif(page){\r\n\t\t\t\t\tvar image = page.image;\r\n\t\t\t\t\tif (image.tileId > 0) {\r\n\t\t\t\t\t\tthis.setTileImage(image.tileId);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.setImage(image.characterName, image.characterIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setDirection(image.direction);\r\n\t\t\t\t\tthis.setPattern(image.pattern);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Event.prototype.srpgMoveToPoint = function(targetPosition, ignoreMoveTable, ignoreObstacles) {\r\n\t\t\tthis._pendingMoveToPoint = true;\r\n\t\t\tthis._targetPosition = targetPosition;\r\n\t\t\t\r\n\t\t\tvar actor = $gameSystem.EventToUnit(this.eventId())[1];\r\n\t\t\t\r\n\t\t\tvar list = $gameTemp.moveList();\r\n\t\t\tvar moveListLookup = {};\r\n\t\t\tlist.forEach(function(entry){\r\n\t\t\t\tif(!moveListLookup[entry[0]]){\r\n\t\t\t\t\tmoveListLookup[entry[0]] = [];\r\n\t\t\t\t}\r\n\t\t\t\tmoveListLookup[entry[0]][entry[1]] = true;\r\n\t\t\t});\r\n\t\t\t//construct grid representation for pathfinding\r\n\t\t\tvar occupiedPositions = $statCalc.getOccupiedPositionsLookup(actor.isActor() ? \"enemy\" : \"actor\");\r\n\t\t\tvar pathfindingGrid = [];\r\n\t\t\tvar directionGrid = [];\r\n\t\t\tfor(var i = 0; i < $gameMap.width(); i++){\r\n\t\t\t\t\r\n\t\t\t\tpathfindingGrid[i] = [];\r\n\t\t\t\tdirectionGrid[i] = [];\r\n\t\t\t\tfor(var j = 0; j < $gameMap.height(); j++){\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar weight = 1 ;\r\n\t\t\t\t\tif(i >= 0 && j >= 0){\r\n\t\t\t\t\t\tif(!$statCalc.isFlying(actor)){\r\n\t\t\t\t\t\t\tweight+=$gameMap.SRPGTerrainTag(i, j);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ignoreObstacles){\r\n\t\t\t\t\t\t\tpathfindingGrid[i][j] = 1;\r\n\t\t\t\t\t\t\tdirectionGrid[i][j] = {\r\n\t\t\t\t\t\t\t\ttop: true,\r\n\t\t\t\t\t\t\t\tbottom: true,\r\n\t\t\t\t\t\t\t\tleft: true,\r\n\t\t\t\t\t\t\t\tright: true\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar isCenterPassable = !(occupiedPositions[i] && occupiedPositions[i][j]) \r\n\t\t\t\t\t\t\t\t&& $statCalc.canStandOnTile(actor, {x: i, y: j})\r\n\t\t\t\t\t\t\t\t&& (ignoreMoveTable || (moveListLookup[i] && moveListLookup[i][j]));\r\n\t\t\t\t\t\t\tvar isTopPassable;\r\n\t\t\t\t\t\t\tvar isBottomPassable;\r\n\t\t\t\t\t\t\tvar isLeftPassable;\r\n\t\t\t\t\t\t\tvar isRightPassable;\r\n\t\t\t\t\t\t\tif(!isCenterPassable || $statCalc.isFlying(actor) || !ENGINE_SETTINGS.USE_TILE_PASSAGE){\r\n\t\t\t\t\t\t\t\tisTopPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t\tisBottomPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t\tisLeftPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t\tisRightPassable = isCenterPassable;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tisTopPassable = $gameMap.isPassable(i, j, 8);\r\n\t\t\t\t\t\t\t\tisBottomPassable = $gameMap.isPassable(i, j, 2);\r\n\t\t\t\t\t\t\t\tisLeftPassable = $gameMap.isPassable(i, j, 4);\r\n\t\t\t\t\t\t\t\tisRightPassable = $gameMap.isPassable(i, j, 6);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\tpathfindingGrid[i][j] = isCenterPassable ? weight : 0; \t\r\n\t\t\t\t\t\t\tdirectionGrid[i][j] = {\r\n\t\t\t\t\t\t\t\ttop: isTopPassable,\r\n\t\t\t\t\t\t\t\tbottom: isBottomPassable,\r\n\t\t\t\t\t\t\t\tleft: isLeftPassable,\r\n\t\t\t\t\t\t\t\tright: isRightPassable\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpathfindingGrid[i][j] = 0;\r\n\t\t\t\t\t\tdirectionGrid[i][j] = {\r\n\t\t\t\t\t\t\ttop: false,\r\n\t\t\t\t\t\t\tbottom: false,\r\n\t\t\t\t\t\t\tleft: false,\r\n\t\t\t\t\t\t\tright: false\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar graph = new Graph(pathfindingGrid, directionGrid);\r\n\t\t\t\r\n\t\t\tvar startCoords = {x: this.posX(), y: this.posY()};\r\n\t\t\tvar startNode = graph.grid[startCoords.x][startCoords.y];\r\n\t\t\tvar endCoords = {x: this._targetPosition.x, y: this._targetPosition.y};\r\n\t\t\tvar endNode = graph.grid[endCoords.x][endCoords.y];\r\n\r\n\t\t\t\r\n\t\t\tvar path = astar.search(graph, startNode, endNode);\r\n\t\t\t\r\n\t\t\t$gamePlayer.followedEvent = this;\r\n\t\t\tthis._pathToCurrentTarget = path;\t\r\n\t\t}\r\n\t\t//移動ルートを設定する\r\n\t\tGame_Event.prototype.srpgMoveRouteForce = function(array) {\r\n\t\t\tthis._srpgForceRoute = [];\r\n\t\t\tfor (var i = 1; i < array.length; i++) {\r\n\t\t\t\tthis._srpgForceRoute.push(array[i]);\r\n\t\t\t}\r\n\t\t\tthis._srpgForceRoute.push(0);\r\n\t\t};\r\n\r\n\t\t//設定されたルートに沿って移動する\r\n\t\tvar _SRPG_Game_Event_updateStop = Game_Event.prototype.updateStop;\r\n\t\tGame_Event.prototype.updateStop = function() {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._eventId);\r\n\t\t\tvar isActor = false;\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tvar isActor = battlerArray[1].isActor();\r\n\t\t\t}\t\r\n\t\t\tvar followMove = !isActor || $gameTemp.followMove;\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tvar regionId = $gameMap.regionId(this._x, this._y);\r\n\t\t\t\t$statCalc.setCurrentTerrainFromRegionIndex(battlerArray[1], regionId);\r\n\t\t\t\t$gameMap.initSRWTileProperties();\r\n\t\t\t\tif($gameSystem.regionAttributes && $gameSystem.regionAttributes[regionId]){\r\n\t\t\t\t\tvar def = $gameSystem.regionAttributes[regionId];\r\n\t\t\t\t\t$statCalc.setCurrentTerrainModsFromTilePropertyString(battlerArray[1], def.defense+\",\"+def.evasion+\",\"+def.hp_regen+\",\"+def.en_regen+\",\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$statCalc.setCurrentTerrainModsFromTilePropertyString(battlerArray[1], $gameMap.getTileProperties({x: this._x, y: this._y}));\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\t\t\r\n\t\t\tif ($gameSystem.isSRPGMode() == true && this._srpgForceRoute.length > 0) {\r\n\t\t\t\tif (!this.isMoving()) {\r\n\t\t\t\t\tvar command = this._srpgForceRoute[0];\r\n\t\t\t\t\tthis._srpgForceRoute.shift();\r\n\t\t\t\t\tif (command == 0) {\r\n\t\t\t\t\t\tthis._srpgForceRoute = [];\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(false);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.moveStraight(command);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if(this._pendingMoveToPoint){\r\n\t\t\t\tif (!this.isMoving()) {\r\n\t\t\t\t\tInput.update();\r\n\t\t\t\t\tif(Input.isPressed(\"pagedown\") || Input.isLongPressed(\"pagedown\") || $gameSystem.optionSkipUnitMoving){\t\t\t\t\t\r\n\t\t\t\t\t\tif(this._pathToCurrentTarget && this._pathToCurrentTarget.length){//avoid rare crash where this functional is called when the path has already been cleared\r\n\t\t\t\t\t\t\tvar targetPosition = this._pathToCurrentTarget[this._pathToCurrentTarget.length-1];\r\n\t\t\t\t\t\t\tthis._pathToCurrentTarget = [];\r\n\t\t\t\t\t\t\tthis.locate(targetPosition.x, targetPosition.y);\r\n\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t$gamePlayer.locate(targetPosition.x, targetPosition.y);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\t\t\r\n\t\t\t\t\t\t$gamePlayer.clearFollowSpeed();\r\n\t\t\t\t\t\t$gamePlayer.followedEvent = null;\r\n\t\t\t\t\t\tthis._targetPosition = null;\r\n\t\t\t\t\t\tthis._pathToCurrentTarget = null;\r\n\t\t\t\t\t\tthis._pendingMoveToPoint = false;\r\n\t\t\t\t\t\t$gameTemp.followMove = false;\r\n\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(false);\r\n\t\t\t\t\t\t$statCalc.invalidateAbilityCache();\t\t\r\n\t\t\t\t\t} else {\t\t\t\t\r\n\t\t\t\t\t\tthis.setMoveSpeed(6);\r\n\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t$gamePlayer.setFollowSpeed(6);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar nextPosition = this._pathToCurrentTarget.shift();\r\n\t\t\t\t\t\tif(nextPosition && (this._x != nextPosition.x || this._y != nextPosition.y)) {\r\n\t\t\t\t\t\t\tvar deltaX = nextPosition.x - this._x;\t\t\t\t\r\n\t\t\t\t\t\t\tvar deltaY = nextPosition.y - this._y;\r\n\t\t\t\t\t\t\tif(deltaX != 0){\r\n\t\t\t\t\t\t\t\tif(Math.sign(deltaX) == 1){\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(6); //right\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(6);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(4); //left\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(4);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(deltaY != 0){\r\n\t\t\t\t\t\t\t\tif(Math.sign(deltaY) == 1){\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(2); //down\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(2);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.moveStraight(8); //up\r\n\t\t\t\t\t\t\t\t\tif(followMove){\r\n\t\t\t\t\t\t\t\t\t\t$gamePlayer.moveStraight(8);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t$gamePlayer.clearFollowSpeed();\r\n\t\t\t\t\t\t\tthis._targetPosition = null;\r\n\t\t\t\t\t\t\tthis._pathToCurrentTarget = null;\r\n\t\t\t\t\t\t\tthis._pendingMoveToPoint = false;\r\n\t\t\t\t\t\t\t$gameTemp.followMove = false;\r\n\t\t\t\t\t\t\t$gamePlayer.followedEvent = null;\r\n\t\t\t\t\t\t\t$gameSystem.setSrpgWaitMoving(false);\r\n\t\t\t\t\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Game_Event_updateStop.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Event.prototype.event = function() {\r\n\t\t\tif(!$dataMap.events[this._eventId]){\r\n\t\t\t\treturn JSON.parse('{\"id\":1,\"name\":\"ACTOR_0\",\"note\":\"<type:actor>\",\"pages\":[{\"conditions\":{\"actorId\":1,\"actorValid\":false,\"itemId\":1,\"itemValid\":false,\"selfSwitchCh\":\"A\",\"selfSwitchValid\":false,\"switch1Id\":1,\"switch1Valid\":false,\"switch2Id\":1,\"switch2Valid\":false,\"variableId\":1,\"variableValid\":false,\"variableValue\":0},\"directionFix\":false,\"image\":{\"tileId\":0,\"characterName\":\"\",\"direction\":2,\"pattern\":0,\"characterIndex\":0},\"list\":[{\"code\":0,\"indent\":0,\"parameters\":[]}],\"moveFrequency\":3,\"moveRoute\":{\"list\":[{\"code\":0,\"parameters\":[]}],\"repeat\":true,\"skippable\":false,\"wait\":false},\"moveSpeed\":3,\"moveType\":0,\"priorityType\":0,\"stepAnime\":false,\"through\":false,\"trigger\":0,\"walkAnime\":true}],\"x\":17,\"y\":7,\"meta\":{\"type\":\"actor\"}}');\r\n\t\t\t}\r\n\t\t\treturn $dataMap.events[this._eventId];\r\n\t\t};\r\n\r\n\r\n\t\tGame_CharacterBase.prototype.characterIndex = function() {\r\n\t\t\tvar filename = this.characterName();\r\n\t\t\tvar index = this._characterIndex;\r\n\t\t\tif($gameSystem.characterIdexAliases && $gameSystem.characterIdexAliases[filename]){\r\n\t\t\t\t index = $gameSystem.characterIdexAliases[filename];\r\n\t\t\t}\r\n\t\t\treturn index;\r\n\t\t};\r\n\t\t\r\n\t\tGame_CharacterBase.prototype.moveStraight = function(d) {\r\n\t\t\tthis.setMovementSuccess(this.canPass(this._x, this._y, d));\r\n\t\t\tif (this.isMovementSucceeded()) {\r\n\t\t\t\tthis.setDirection(d);\r\n\t\t\t\tthis._prevX = this._x;\r\n\t\t\t\tthis._prevY = this._y;\r\n\t\t\t\tthis._x = $gameMap.roundXWithDirection(this._x, d);\r\n\t\t\t\tthis._y = $gameMap.roundYWithDirection(this._y, d);\r\n\t\t\t\tthis._realX = $gameMap.xWithDirection(this._x, this.reverseDir(d));\r\n\t\t\t\tthis._realY = $gameMap.yWithDirection(this._y, this.reverseDir(d));\r\n\t\t\t\tthis.increaseSteps();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setDirection(d);\r\n\t\t\t\tthis.checkEventTriggerTouchFront(d);\r\n\t\t\t}\r\n\t\t};\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/Entities.js?");

/***/ }),

/***/ "./js/SRW Core/GameInterpreter.js":
/*!****************************************!*\
  !*** ./js/SRW Core/GameInterpreter.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// ●Game_Interpreter\r\n\t\t//====================================================================\r\n\t\t// イベントＩＤをもとに、ユニット間の距離をとる\r\n\r\n\t\tGame_Interpreter.prototype.initialize = function(depth) {\r\n\t\t\tthis._depth = depth || 0;\r\n\t\t\tthis.checkOverflow();\r\n\t\t\tthis.clear();\r\n\t\t\tthis._branch = {};\r\n\t\t\tthis._params = [];\r\n\t\t\tthis._indent = 0;\r\n\t\t\tthis._frameCount = 0;\r\n\t\t\tthis._freezeChecker = 0;\r\n\t\t\t\r\n\t\t\tthis._lastFadeState = -1;\r\n\t\t\tthis._haltingCommands = {\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.isHaltingCommand = function(command) {\r\n\t\t\tif(command.code == 355){ // script call\r\n\t\t\t\t//loose checking for halting custom commands \r\n\t\t\t\tvar haltingScriptCommands = [\r\n\t\t\t\t\t\"showStageConditions\",\r\n\t\t\t\t\t\"showEnemyPhaseText\",\r\n\t\t\t\t\t\"awardSRPoint\",\r\n\t\t\t\t\t\"showMapAttackText\",\r\n\t\t\t\t\t\"destroyEvent\",\r\n\t\t\t\t\t\"destroyEvents\",\r\n\t\t\t\t\t\"applyActorSpirits\",\r\n\t\t\t\t\t\"applyEventSpirits\",\r\n\t\t\t\t\t\"processEnemyAppearQueue\",\r\n\t\t\t\t\t\"processUnitAppearQueue\",\r\n\t\t\t\t\t\"processDisappearQueue\",\r\n\t\t\t\t\t\"manualDeploy\",\r\n\t\t\t\t\t\"manualShipDeploy\",\r\n\t\t\t\t\t\"playBattleScene\",\t\t\t\r\n\t\t\t\t];\r\n\t\t\t\t\r\n\t\t\t\tvar hasHalting = false;\r\n\t\t\t\thaltingScriptCommands.forEach(function(entry){\r\n\t\t\t\t\tvar re = new RegExp(\".*\"+entry+\".*\",\"g\");\r\n\t\t\t\t\tif(command.parameters[0].match(re)){\r\n\t\t\t\t\t\thasHalting = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn hasHalting;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(command.code == 356){ // plugin command\r\n\t\t\t\tvar haltingPluginCommands = {\r\n\t\t\t\t\t\"stopSkipping\": true,\r\n\t\t\t\t\t\"Intermission\": true\r\n\t\t\t\t}\r\n\t\t\t\tvar args = command.parameters[0].split(\" \");\r\n\t\t\t\tvar entry = args.shift();\r\n\t\t\t\treturn !!haltingPluginCommands[entry];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn !!this._haltingCommands[command.code];\r\n\t\t}\r\n\r\n\t\t// Script\r\n\t\tGame_Interpreter.prototype.command355 = function() {\r\n\t\t\tvar script = this.currentCommand().parameters[0] + '\\n';\r\n\t\t\twhile (this.nextEventCode() === 655) {\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tscript += this.currentCommand().parameters[0] + '\\n';\r\n\t\t\t}\r\n\t\t\tvar result = eval(script);\r\n\t\t\tif(result == null){\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.EventDistance = function(variableId, eventId1, eventId2) {\r\n\t\t\tvar event1 = $gameMap.event(eventId1);\r\n\t\t\tvar event2 = $gameMap.event(eventId2);\r\n\t\t\tif (event1 && event2 && !event1.isErased() && !event2.isErased()) {\r\n\t\t\t\tvar value = $gameSystem.unitDistance(event1, event2);\r\n\t\t\t\t$gameVariables.setValue(variableId, value);\r\n\t\t\t} else {\r\n\t\t\t\t$gameVariables.setValue(variableId, 999);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// アクターＩＤをもとに、ユニット間の距離をとる\r\n\t\tGame_Interpreter.prototype.ActorDistance = function(variableId, actorId1, actorId2) {\r\n\t\t\tvar eventId1 = $gameSystem.ActorToEvent(actorId1);\r\n\t\t\tvar eventId2 = $gameSystem.ActorToEvent(actorId2);\r\n\t\t\tthis.EventDistance(variableId, eventId1, eventId2);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 特定のＩＤのイベントと全アクターの中で最短の距離をとる\r\n\t\tGame_Interpreter.prototype.fromActorMinimumDistance = function(variableId, eventId) {\r\n\t\t\tvar minDistance = 999;\r\n\t\t\tvar event1 = $gameMap.event(eventId);\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tvar event2 = $gameMap.event(event.eventId());\r\n\t\t\t\t\tif (event1 && event2 && !event1.isErased() && !event2.isErased()) {\r\n\t\t\t\t\t\tvar value = $gameSystem.unitDistance(event1, event2);\r\n\t\t\t\t\t\tif (value < minDistance) {\r\n\t\t\t\t\t\t\tminDistance = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t$gameVariables.setValue(variableId, minDistance);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 新規アクターを追加する（増援）\r\n\t\tGame_Interpreter.prototype.addActor = function(eventId, actorId) {\r\n\t\t\tvar actor_unit = $gameActors.actor(actorId);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif (actor_unit && event) {\r\n\t\t\t\t$gameSystem.pushSrpgAllActors(event.eventId());\r\n\t\t\t\tactor_unit.initTp(); //TPを初期化\r\n\t\t\t\tvar bitmap = ImageManager.loadFace(actor_unit.faceName()); //顔グラフィックをプリロードする\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue + 1);\r\n\t\t\t\t$gameSystem.setEventToUnit(event.eventId(), 'actor', actor_unit.actorId());\r\n\t\t\t\tevent.setType('actor');\r\n\t\t\t\tvar xy = event.makeAppearPoint(event, event.posX(), event.posY());\r\n\t\t\t\tevent.setPosition(xy[0], xy[1]);\r\n\t\t\t\t$gameMap.setEventImages();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setMasteryText = function(text){\r\n\t\t\t$gameVariables.setValue(_masteryConditionText, text);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setVictoryText = function(text){\r\n\t\t\t$gameVariables.setValue(_victoryConditionText, text);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setDefeatText = function(text){\r\n\t\t\t$gameVariables.setValue(_defeatConditionText, text);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.showStageConditions = function(){\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t$gameMessage.setFaceImage(\"\", \"\");\r\n\t\t\t\t$gameMessage.setBackground(0);\r\n\t\t\t\t$gameMessage.setPositionType(1);\r\n\t\t\t\t$gameMessage.add(APPSTRINGS.GENERAL.label_victory_condition + \": \"+($gameVariables.value(_victoryConditionText) || \"\"));\r\n\t\t\t\t$gameMessage.add(APPSTRINGS.GENERAL.label_defeat_condition + \": \"+($gameVariables.value(_defeatConditionText) || \"\"));\r\n\t\t\t\tvar masteryText = $gameVariables.value(_masteryConditionText);\r\n\t\t\t\tif($SRWSaveManager.isMapSRPointLocked($gameMap.mapId())){\r\n\t\t\t\t\tmasteryText = APPSTRINGS.GENERAL.label_mastery_locked;\r\n\t\t\t\t}\r\n\t\t\t\t$gameMessage.add(APPSTRINGS.GENERAL.label_mastery_condition + \": \"+(masteryText || \"\"));\r\n\t\t\t\t\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.showEnemyPhaseText = function(){\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t$gameMessage.setFaceImage(\"\", \"\");\r\n\t\t\t\t$gameMessage.setBackground(1);\r\n\t\t\t\t$gameMessage.setPositionType(1);\r\n\t\t\t\tvar text;\r\n\t\t\t\tif($gameSystem.isEnemyPhase()){\r\n\t\t\t\t\ttext =  APPSTRINGS.GENERAL.label_enemy_phase;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttext =  APPSTRINGS.GENERAL.label_ally_phase;\r\n\t\t\t\t}\r\n\t\t\t\tvar colorId;\r\n\t\t\t\tif($gameTemp.currentFaction == 0){\r\n\t\t\t\t\tcolorId = 18;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.currentFaction == 1){\r\n\t\t\t\t\tcolorId = 3;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.currentFaction == 2){\r\n\t\t\t\t\tcolorId = 14;\r\n\t\t\t\t}\r\n\t\t\t\t$gameMessage.add(\"\\\\TA[1]\\n\\\\>\\\\C[\"+colorId+\"]\\\\{\"+text+\"\\n\\\\.\\\\.\\\\^\");\t//\\\\|\t\t\t\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.awardSRPoint = function(){\t\r\n\t\t\tvar mapId = $gameMap.mapId();\r\n\t\t\tvar isNewlyAwarded = $SRWSaveManager.awardMapSRPoint(mapId);\t\r\n\t\t\tif(isNewlyAwarded){\r\n\t\t\t\tif(ENGINE_SETTINGS.MASTERY_REWARDS){\r\n\t\t\t\t\tif(ENGINE_SETTINGS.MASTERY_REWARDS.PP){\r\n\t\t\t\t\t\tvar scope = ENGINE_SETTINGS.MASTERY_REWARDS.PP.SCOPE;\r\n\t\t\t\t\t\tvar actors = [];\r\n\t\t\t\t\t\tif(scope == \"deployed\"){\r\n\t\t\t\t\t\t\tactors = $statCalc.getAllActors(\"actor\");\r\n\t\t\t\t\t\t} else if(scope == \"unlocked\"){\r\n\t\t\t\t\t\t\tactors = $gameParty.allMembers();\r\n\t\t\t\t\t\t} else if(scope == \"all\"){\r\n\t\t\t\t\t\t\tfor(var i = 0; i < $dataActors.length; i++){\r\n\t\t\t\t\t\t\t\tvar actor = $gameActors.actor(i);\r\n\t\t\t\t\t\t\t\tactors.push(actor);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tactors.forEach(function(actor){\r\n\t\t\t\t\t\t\tif(actor && actor.isActor()){\r\n\t\t\t\t\t\t\t\t$statCalc.addPP(actor, ENGINE_SETTINGS.MASTERY_REWARDS.PP.AMOUNT);\t\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(ENGINE_SETTINGS.MASTERY_REWARDS.FUNDS){\r\n\t\t\t\t\t\t$gameParty.gainGold(ENGINE_SETTINGS.MASTERY_REWARDS.FUNDS);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWMastery';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t$gameVariables.setValue(_masteryConditionText, APPSTRINGS.GENERAL.label_mastery_completed);\t\r\n\t\t\t\t\r\n\t\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t\t$gameMessage.setFaceImage(\"\", \"\");\r\n\t\t\t\t\t$gameMessage.setBackground(1);\r\n\t\t\t\t\t$gameMessage.setPositionType(1);\r\n\t\t\t\t\t$gameMessage.add(\"\\\\TA[1]\\n\" + APPSTRINGS.GENERAL.label_mastery_completed_message);\t\t\t\t\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.showMapAttackText = function(faceName, faceIdx, text){\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t$gameMessage.setFaceImage(faceName, faceIdx);\r\n\t\t\t\t$gameMessage.setPositionType(2);\r\n\t\t\t\t$gameMessage.setBackground(0);\r\n\t\t\t\t$gameMessage.add(text);\t\t\t\t\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorDestructionQueued  = function(id){\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(queuedDeath.actor.isActor() && queuedDeath.actor.actorId() == id && (!$gameTemp.preventedDeathQuotes || !$gameTemp.preventedDeathQuotes[id])){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyDestructionQueued  = function(id){\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(!queuedDeath.actor.isActor() && queuedDeath.actor.enemyId() == id){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventDestructionQueued  = function(id){\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(!queuedDeath.actor.isActor() && queuedDeath.actor.event.eventId() == id){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorBelowHP  = function(id, hp){\r\n\t\t\treturn $statCalc.isActorBelowHP(id, hp);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyBelowHP  = function(id, hp){\r\n\t\t\treturn $statCalc.isEnemyBelowHP(id, hp);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventBelowHP  = function(id, hp){\r\n\t\t\treturn $statCalc.isEventBelowHP(id, hp);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.cancelActorDestruction  = function(id){\r\n\t\t\tvar tmp = [];\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\t\t\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(!queuedDeath.actor.isActor() || queuedDeath.actor.actorId() != id){\r\n\t\t\t\t\t\ttmp.push(queuedDeath);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t$gameTemp.deathQueue = tmp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.cancelEnemyDestruction  = function(id){\r\n\t\t\tvar tmp = [];\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\t\t\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(queuedDeath.actor.isActor() || queuedDeath.actor.enemyId() != id){\r\n\t\t\t\t\t\ttmp.push(queuedDeath);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t$gameTemp.deathQueue = tmp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.cancelEventDestruction  = function(id){\r\n\t\t\tvar tmp = [];\r\n\t\t\tif($gameTemp.deathQueue && $gameTemp.deathQueue.length){\t\t\r\n\t\t\t\t$gameTemp.deathQueue.forEach(function(queuedDeath){\r\n\t\t\t\t\tif(!queuedDeath.actor.event && queuedDeath.actor.event.eventId() != id){\r\n\t\t\t\t\t\ttmp.push(queuedDeath);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t$gameTemp.deathQueue = tmp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.addEnemiesFromObj = function(params) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.addEnemy(\r\n\t\t\t\t\tparams.toAnimQueue, \r\n\t\t\t\t\ti, \r\n\t\t\t\t\tparams.enemyId, \r\n\t\t\t\t\tparams.mechClass, \r\n\t\t\t\t\tparams.level, \r\n\t\t\t\t\tparams.mode, \r\n\t\t\t\t\tparams.targetId, \r\n\t\t\t\t\tparams.items, \r\n\t\t\t\t\tparams.squadId, \r\n\t\t\t\t\tparams.targetRegion,\r\n\t\t\t\t\tparams.factionId\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.addEnemies = function(toAnimQueue, startId, endId, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.addEnemy(toAnimQueue, i, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.addEnemyFromObj = function(params){\r\n\t\t\tthis.addEnemy(\r\n\t\t\t\tparams.toAnimQueue, \r\n\t\t\t\tparams.eventId, \r\n\t\t\t\tparams.enemyId, \r\n\t\t\t\tparams.mechClass, \r\n\t\t\t\tparams.level, \r\n\t\t\t\tparams.mode, \r\n\t\t\t\tparams.targetId, \r\n\t\t\t\tparams.items, \r\n\t\t\t\tparams.squadId, \r\n\t\t\t\tparams.targetRegion,\r\n\t\t\t\tparams.factionId,\r\n\t\t\t\tparams.counterBehavior\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// 新規エネミーを追加する（増援）\r\n\t\tGame_Interpreter.prototype.addEnemy = function(toAnimQueue, eventId, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId, counterBehavior, attackBehavior) {\r\n\t\t\tvar enemy_unit = new Game_Enemy(enemyId, 0, 0);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif(typeof squadId == \"undefined\" || squadId == \"\"){\r\n\t\t\t\tsquadId = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof targetRegion == \"undefined\"|| targetRegion == \"\"){\r\n\t\t\t\ttargetRegion = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof factionId == \"undefined\"|| factionId == \"\"){\r\n\t\t\t\tfactionId = 0;\r\n\t\t\t}\r\n\t\t\tif (enemy_unit && event) { \t\r\n\t\t\t\tenemy_unit._mechClass = mechClass;\t\r\n\t\t\t\tenemy_unit.squadId = squadId;\t\r\n\t\t\t\tenemy_unit.targetRegion = targetRegion;\t\r\n\t\t\t\tenemy_unit.factionId = factionId;\t\r\n\t\t\t\tenemy_unit.targetUnitId = targetId || \"\";\r\n\t\t\t\tenemy_unit.counterBehavior = counterBehavior || \"attack\";\r\n\t\t\t\tenemy_unit.attackBehavior = attackBehavior || \"attack\";\r\n\t\t\t\tif (enemy_unit) {\r\n\t\t\t\t\tenemy_unit.event = event;\r\n\t\t\t\t\tif (mode) {\r\n\t\t\t\t\t\tenemy_unit.setBattleMode(mode);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tenemy_unit.initTp(); //TPを初期化\r\n\t\t\t\t\tvar faceName = enemy_unit.enemy().meta.faceName; //顔グラフィックをプリロードする\r\n\t\t\t\t\tif (faceName) {\r\n\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(faceName);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadSvEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\t\t$gameSystem.setEventToUnit(event.eventId(), 'enemy', enemy_unit);\r\n\t\t\t\t\t$statCalc.initSRWStats(enemy_unit, level, items);\r\n\t\t\t\t\t$statCalc.applyBattleStartWill(enemy_unit);\r\n\t\t\t\t\t$statCalc.updateFlightState(enemy_unit);\r\n\t\t\t\t\t\r\n\t\t\t\t\tevent.setType('enemy');\r\n\t\t\t\t\t/*var xy = event.makeAppearPoint(event, event.posX(), event.posY())\r\n\t\t\t\t\tevent.setPosition(xy[0], xy[1]);\t*/\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: event.posX(), y: event.posY()}, null, event.eventId());\r\n\t\t\t\t\tevent.locate(position.x, position.y);\r\n\t\t\t\t\tif(!$gameTemp.enemyAppearQueue){\r\n\t\t\t\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\tif(toAnimQueue){\t\t\t\t\r\n\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$gameMap.setEventImages();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.addSubTwinEnemy = function(eventId, enemyId, mechClass, level, mode, targetId, items, squadId, targetRegion, factionId, counterBehavior) {\r\n\t\t\tvar enemy_unit = new Game_Enemy(enemyId, 0, 0);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif(typeof squadId == \"undefined\" || squadId == \"\"){\r\n\t\t\t\tsquadId = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof targetRegion == \"undefined\"|| targetRegion == \"\"){\r\n\t\t\t\ttargetRegion = -1;\r\n\t\t\t}\r\n\t\t\tif(typeof factionId == \"undefined\"|| factionId == \"\"){\r\n\t\t\t\tfactionId = 0;\r\n\t\t\t}\r\n\t\t\tif (enemy_unit && event) { \t\r\n\t\t\t\tvar mainEnemy = $gameSystem.EventToUnit(eventId)[1];\r\n\t\t\t\t\r\n\t\t\t\tenemy_unit._mechClass = mechClass;\t\r\n\t\t\t\tenemy_unit.squadId = squadId;\t\r\n\t\t\t\tenemy_unit.targetRegion = targetRegion;\t\r\n\t\t\t\tenemy_unit.factionId = factionId;\t\r\n\t\t\t\tenemy_unit.targetUnitId = targetId || \"\";\r\n\t\t\t\tenemy_unit.counterBehavior = counterBehavior || \"attack\";\r\n\t\t\t\tif (enemy_unit) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (mode) {\r\n\t\t\t\t\t\tenemy_unit.setBattleMode(mode);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tenemy_unit.initTp(); //TPを初期化\r\n\t\t\t\t\tvar faceName = enemy_unit.enemy().meta.faceName; //顔グラフィックをプリロードする\r\n\t\t\t\t\tif (faceName) {\r\n\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(faceName);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadSvEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\t\t\t\r\n\t\t\t\t\t$statCalc.initSRWStats(enemy_unit, level, items);\r\n\t\t\t\t\t$statCalc.applyBattleStartWill(enemy_unit);\r\n\t\t\t\t\t\r\n\t\t\t\t\tenemy_unit.isSubTwin = true;\t\t\t\r\n\t\t\t\t\tmainEnemy.subTwin = enemy_unit;\r\n\t\t\t\t\tmainEnemy.subTwinId = enemy_unit.enemyId();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.destroyEvents = function(startId, endId) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.destroyEvent(i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.destroyEvent = function(eventId) {\r\n\t\t\t$gameMap.event(eventId).isDoingDeathAnim = true;\r\n\t\t\tvar actor = $gameSystem.EventToUnit(eventId)[1];\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t} else {\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.eraseEventsOfType = function(type, omitted, toQueue) {\r\n\t\t\tvar _this = this;\r\n\t\t\tvar candidates = $statCalc.getAllCandidateActors(type);\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif(candidate.event){\r\n\t\t\t\t\tif(omitted.indexOf(candidate.event.eventId()) == -1){\r\n\t\t\t\t\t\t_this.eraseEvent(candidate.event.eventId(), toQueue);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.eraseEvents = function(startId, endId, toQueue) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.eraseEvent(i, toQueue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.eraseEvent = function(eventId, toQueue) {\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif(event){\r\n\t\t\t\tif(toQueue){\r\n\t\t\t\t\tif(!$gameTemp.disappearQueue){\r\n\t\t\t\t\t\t$gameTemp.disappearQueue = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.disappearQueue.push(event);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\t\r\n\t\t\t\tevent.manuallyErased = true;\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(eventId)[1];\r\n\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue - 1);\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.updateWaitMode = function() {\r\n\t\t\tvar waiting = false;\r\n\t\t\tswitch (this._waitMode) {\r\n\t\t\tcase 'message':\r\n\t\t\t\twaiting = $gameMessage.isBusy();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'transfer':\r\n\t\t\t\twaiting = $gamePlayer.isTransferring();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'scroll':\r\n\t\t\t\twaiting = $gameMap.isScrolling();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'route':\r\n\t\t\t\twaiting = this._character.isMoveRouteForcing();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'animation':\r\n\t\t\t\twaiting = this._character.isAnimationPlaying();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'balloon':\r\n\t\t\t\twaiting = this._character.isBalloonPlaying();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'gather':\r\n\t\t\t\twaiting = $gamePlayer.areFollowersGathering();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'action':\r\n\t\t\t\twaiting = BattleManager.isActionForced();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'video':\r\n\t\t\t\twaiting = Graphics.isVideoPlaying();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'image':\r\n\t\t\t\twaiting = !ImageManager.isReady();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'enemy_appear':\r\n\t\t\t\twaiting = $gameTemp.enemyAppearQueueIsProcessing || $gameTemp.disappearQueueIsProcessing;\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'manual_deploy':\r\n\t\t\t\twaiting = $gameTemp.doingManualDeploy;\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'move_to_point':\r\n\t\t\t\twaiting = $gameSystem.srpgWaitMoving();\r\n\t\t\t\tbreak;\t\r\n\t\t\tcase 'battle_demo':\r\n\t\t\t\twaiting = $gameTemp.playingBattleDemo;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'spirit_activation':\r\n\t\t\t\twaiting = $gameTemp.playingSpiritAnimations;\r\n\t\t\t\tbreak;\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (!waiting) {\r\n\t\t\t\tthis._waitMode = '';\r\n\t\t\t}\r\n\t\t\treturn waiting;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.applyActorSpirits = function(actorId, spiritIds){\r\n\t\t\tthis.applyEventSpirits($gameActors.actor(actorId).event.eventId(), spiritIds);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.applyEventSpirits = function(eventId, spiritIds){\r\n\t\t\tvar spirits = [];\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\tvar actor = $gameSystem.EventToUnit(eventId)[1];\r\n\t\t\tspiritIds.forEach(function(spiritId){\r\n\t\t\t\tspirits.push({\r\n\t\t\t\t\tidx: spiritId,\r\n\t\t\t\t\tlevel: 1,\r\n\t\t\t\t\tcost: 0,\r\n\t\t\t\t\tcaster: actor,\r\n\t\t\t\t\ttarget: actor\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t$gameTemp.playingSpiritAnimations = true;\r\n\t\t\tthis.setWaitMode(\"spirit_activation\");\r\n\t\t\t$gameTemp.eventSpirits = spirits;\r\n\t\t\t$gameSystem.setSubBattlePhase(\"event_spirits\");\r\n\t\t\tthis._index++;\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.requestImages = function(list, commonList){\r\n\t\t\tif(!list) return;\r\n\r\n\t\t\tlist.forEach(function(command){\r\n\t\t\t\tvar params = command.parameters;\r\n\t\t\t\tswitch(command.code){\r\n\t\t\t\t\t// Show Text\r\n\t\t\t\t\tcase 101:\r\n\t\t\t\t\t\tImageManager.requestFace(params[0]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Common Event\r\n\t\t\t\t\tcase 117:\r\n\t\t\t\t\t\tvar commonEvent = $dataCommonEvents[params[0]];\r\n\t\t\t\t\t\tif (commonEvent) {\r\n\t\t\t\t\t\t\tif (!commonList) {\r\n\t\t\t\t\t\t\t\tcommonList = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (!commonList.contains(params[0])) {\r\n\t\t\t\t\t\t\t\tcommonList.push(params[0]);\r\n\t\t\t\t\t\t\t\tGame_Interpreter.requestImages(commonEvent.list, commonList);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Party Member\r\n\t\t\t\t\tcase 129:\r\n\t\t\t\t\t\tvar actor = $gameActors.actor(params[0]);\r\n\t\t\t\t\t\tif (actor && params[1] === 0) {\r\n\t\t\t\t\t\t\tvar name = actor.characterName();\r\n\t\t\t\t\t\t\tImageManager.requestCharacter(name);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Set Movement Route\r\n\t\t\t\t\tcase 205:\r\n\t\t\t\t\t\tif(params[1]){\r\n\t\t\t\t\t\t\tparams[1].list.forEach(function(command){\r\n\t\t\t\t\t\t\t\tvar params = command.parameters;\r\n\t\t\t\t\t\t\t\tif(command.code === Game_Character.ROUTE_CHANGE_IMAGE){\r\n\t\t\t\t\t\t\t\t\tImageManager.requestCharacter(params[0]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Show Animation, Show Battle Animation\r\n\t\t\t\t\tcase 212: case 337:\r\n\t\t\t\t\t\tif(params[1]) {\r\n\t\t\t\t\t\t\tvar animation = $dataAnimations[params[1]];\r\n\t\t\t\t\t\t\tvar name1 = animation.animation1Name;\r\n\t\t\t\t\t\t\tvar name2 = animation.animation2Name;\r\n\t\t\t\t\t\t\tvar hue1 = animation.animation1Hue;\r\n\t\t\t\t\t\t\tvar hue2 = animation.animation2Hue;\r\n\t\t\t\t\t\t\tImageManager.requestAnimation(name1, hue1);\r\n\t\t\t\t\t\t\tImageManager.requestAnimation(name2, hue2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Player Followers\r\n\t\t\t\t\tcase 216:\r\n\t\t\t\t\t\tif (params[0] === 0) {\r\n\t\t\t\t\t\t\t$gamePlayer.followers().forEach(function(follower) {\r\n\t\t\t\t\t\t\t\tvar name = follower.characterName();\r\n\t\t\t\t\t\t\t\tImageManager.requestCharacter(name);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Show Picture\r\n\t\t\t\t\tcase 231:\r\n\t\t\t\t\t\tImageManager.loadPicture(params[1]); //make show picture awaitable by the interpreter\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Tileset\r\n\t\t\t\t\tcase 282:\r\n\t\t\t\t\t\tvar tileset = $dataTilesets[params[0]];\r\n\t\t\t\t\t\ttileset.tilesetNames.forEach(function(tilesetName){\r\n\t\t\t\t\t\t\tImageManager.requestTileset(tilesetName);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Battle Back\r\n\t\t\t\t\tcase 283:\r\n\t\t\t\t\t\tif ($gameParty.inBattle()) {\r\n\t\t\t\t\t\t\tImageManager.requestBattleback1(params[0]);\r\n\t\t\t\t\t\t\tImageManager.requestBattleback2(params[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Parallax\r\n\t\t\t\t\tcase 284:\r\n\t\t\t\t\t\tif (!$gameParty.inBattle()) {\r\n\t\t\t\t\t\t\tImageManager.requestParallax(params[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Actor Images\r\n\t\t\t\t\tcase 322:\r\n\t\t\t\t\t\tImageManager.requestCharacter(params[1]);\r\n\t\t\t\t\t\tImageManager.requestFace(params[3]);\r\n\t\t\t\t\t\tImageManager.requestSvActor(params[5]);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Change Vehicle Image\r\n\t\t\t\t\tcase 323:\r\n\t\t\t\t\t\tvar vehicle = $gameMap.vehicle(params[0]);\r\n\t\t\t\t\t\tif(vehicle){\r\n\t\t\t\t\t\t\tImageManager.requestCharacter(params[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t// Enemy Transform\r\n\t\t\t\t\tcase 336:\r\n\t\t\t\t\t\tvar enemy = $dataEnemies[params[1]];\r\n\t\t\t\t\t\tvar name = enemy.battlerName;\r\n\t\t\t\t\t\tvar hue = enemy.battlerHue;\r\n\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\tImageManager.requestSvEnemy(name, hue);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tImageManager.requestEnemy(name, hue);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.processEnemyAppearQueue = function(){\r\n\t\t\tthis.setWaitMode(\"enemy_appear\");\r\n\t\t\t$gameTemp.enemyAppearQueueIsProcessing = true;\r\n\t\t\t$gameTemp.unitAppearTimer = 0;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.processUnitAppearQueue = function(){\r\n\t\t\tthis.setWaitMode(\"enemy_appear\");\r\n\t\t\t$gameTemp.enemyAppearQueueIsProcessing = true;\r\n\t\t\t$gameTemp.unitAppearTimer = 0;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.processDisappearQueue = function(){\r\n\t\t\tthis.setWaitMode(\"enemy_appear\");\r\n\t\t\t$gameTemp.disappearQueueIsProcessing = true;\r\n\t\t\t$gameTemp.unitAppearTimer = 0;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.manualDeploy = function(unlockedOnly){\r\n\t\t\tthis.setWaitMode(\"manual_deploy\");\r\n\t\t\t$gameTemp.deployMode = \"\";\r\n\t\t\t$gameTemp.manualDeployType = unlockedOnly ? \"unlocked\" : \"all\";\r\n\t\t\t$gameTemp.doingManualDeploy = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = true;\r\n\t\t\t$gameSystem.setSubBattlePhase(\"deploy_selection_window\");\r\n\t\t\t$gameTemp.pushMenu = \"in_stage_deploy\";\r\n\t\t\t$gameTemp.originalDeployInfo = JSON.parse(JSON.stringify($gameSystem.getDeployList()));\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.manualShipDeploy = function(){\r\n\t\t\tthis.setWaitMode(\"manual_deploy\");\r\n\t\t\t$gameTemp.deployMode = \"ships\";\r\n\t\t\t$gameTemp.doingManualDeploy = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = true;\r\n\t\t\t$gameSystem.setSubBattlePhase(\"deploy_selection_window\");\r\n\t\t\t$gameTemp.pushMenu = \"in_stage_deploy\";\r\n\t\t\t$gameTemp.originalDeployInfo = JSON.parse(JSON.stringify($gameSystem.getDeployList()));\r\n\t\t}\r\n\r\n\t\t// 指定した座標にプレイヤーを移動する\r\n\t\tGame_Interpreter.prototype.playerMoveTo = function(x, y) {\r\n\t\t\t$gameTemp.setAutoMoveDestinationValid(true);\r\n\t\t\t$gameTemp.setAutoMoveDestination(x, y);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.cursorMoveTo = function(x, y) {\r\n\t\t\t$gamePlayer.locate(x, y);\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.isActorInRegion = function(actorId, regionId) {\r\n\t\t\treturn $statCalc.isActorInRegion(actorId, regionId);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyInRegion = function(enemyId, regionId) {\r\n\t\t\treturn $statCalc.isEnemyInRegion(enemyId, regionId);\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.getActorKillCount = function(actorId) {\r\n\t\t\treturn $statCalc.getKills($gameActors.actor(actorId));\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setBattleModes = function(startId, endId, mode) {\r\n\t\t\tfor(var i = startId; i <= endId; i++){\r\n\t\t\t\tthis.setBattleMode(i, mode);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// 指定したイベントの戦闘モードを設定する\r\n\t\tGame_Interpreter.prototype.setBattleMode = function(eventId, mode) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tbattlerArray[1].setBattleMode(mode, true);\t\t\t\r\n\t\t\t}\r\n\t\t\tif(battlerArray[0] === 'enemy'){\r\n\t\t\t\tif(battlerArray[1].squadId != -1){\r\n\t\t\t\t\tthis.setSquadMode(squadId, mode);\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setTargetRegion = function(eventId, targetRegion) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tbattlerArray[1].targetRegion = targetRegion;\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setActorTargetRegion = function(actorId, targetRegion) {\t\r\n\t\t\treturn this.setTargetRegion($gameActors.actor(actorId).event.eventId(), targetRegion);\r\n\t\t};\r\n\r\n\t\t// 指定したイベントの戦闘モードを設定する\r\n\t\tGame_Interpreter.prototype.setActorBattleMode = function(actorId, mode) {  \r\n\t\t\t$gameActors.actor(actorId).setBattleMode(mode, true);\t\t\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.setSquadMode = function(squadId, mode) {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemy') {\r\n\t\t\t\t\tvar enemy = $gameSystem.EventToUnit(event.eventId())[1];\t\r\n\t\t\t\t\tif(enemy.squadId == squadId){\r\n\t\t\t\t\t\tenemy.setBattleMode(mode, true);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isDeployed = function(actorId) {\r\n\t\t\tvar isDeployed = false;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor') {\r\n\t\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\t\tif(battlerArray){\r\n\t\t\t\t\t\tvar actor = battlerArray[1];\r\n\t\t\t\t\t\tif(actor.actorId() == actorId){\r\n\t\t\t\t\t\t\tisDeployed = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn isDeployed;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isSquadWiped = function(squadId) {\r\n\t\t\tvar isWiped = true;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemy') {\r\n\t\t\t\t\tvar enemy = $gameSystem.EventToUnit(event.eventId())[1];\t\r\n\t\t\t\t\tif(enemy.squadId == squadId && !event.isErased()){\r\n\t\t\t\t\t\tisWiped = false;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn isWiped;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.canObtainSRPoint = function() {\r\n\t\t\treturn !$SRWSaveManager.isMapSRPointLocked($gameMap.mapId());\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.activeFaction = function() {\r\n\t\t\treturn $gameTemp.currentFaction;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.lastActorAttack = function() {\r\n\t\t\treturn $gameTemp.lastActorAttack;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorHitBy = function(actorId, weaponId, includeSupport) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.unitHitInfo && $gameTemp.unitHitInfo.actor){\r\n\t\t\t\tif($gameTemp.unitHitInfo.actor[actorId] && $gameTemp.unitHitInfo.actor[actorId][weaponId]){\r\n\t\t\t\t\tvar hitInfo = $gameTemp.unitHitInfo.actor[actorId][weaponId];\r\n\t\t\t\t\tif(includeSupport || !hitInfo.isSupport) {\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyHitBy = function(enemyId, weaponId, includeSupport) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.unitHitInfo && $gameTemp.unitHitInfo.enemy){\r\n\t\t\t\tif($gameTemp.unitHitInfo.enemy[enemyId] && $gameTemp.unitHitInfo.enemy[enemyId][weaponId]){\r\n\t\t\t\t\tvar hitInfo = $gameTemp.unitHitInfo.enemy[enemyId][weaponId];\r\n\t\t\t\t\tif(includeSupport || !hitInfo.isSupport) {\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventHitBy = function(eventId, weaponId, includeSupport) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.unitHitInfo && $gameTemp.unitHitInfo.event){\r\n\t\t\t\tif($gameTemp.unitHitInfo.event[eventId] && $gameTemp.unitHitInfo.event[eventId][weaponId]){\r\n\t\t\t\t\tvar hitInfo = $gameTemp.unitHitInfo.event[eventId][weaponId];\r\n\t\t\t\t\tif(includeSupport || !hitInfo.isSupport) {\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isActorInBattle = function(actorId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.currentBattleActor && $gameTemp.currentBattleActor.isActor()){\r\n\t\t\t\tif($gameTemp.currentBattleActor.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\t\t\r\n\t\t\t\tif($gameTemp.currentBattleActor.subTwin && $gameTemp.currentBattleActor.subTwin.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentBattleEnemy && $gameTemp.currentBattleEnemy.isActor()){\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.subTwin && $gameTemp.currentBattleEnemy.subTwin.actorId() == actorId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEnemyInBattle = function(enemyId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.currentBattleActor && $gameTemp.currentBattleActor.isEnemy()){\r\n\t\t\t\tif($gameTemp.currentBattleActor.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\t\t\r\n\t\t\t\tif($gameTemp.currentBattleActor.subTwin && $gameTemp.currentBattleActor.subTwin.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentBattleEnemy && $gameTemp.currentBattleEnemy.isEnemy()){\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t\tif($gameTemp.currentBattleEnemy.subTwin && $gameTemp.currentBattleEnemy.subTwin.enemyId() == enemyId){\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.isEventInBattle = function(eventId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif($gameTemp.currentBattleActor && $gameTemp.currentBattleActor.event && $gameTemp.currentBattleActor.event.eventId() == eventId){\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n\t\t\tif($gameTemp.currentBattleEnemy && $gameTemp.currentBattleEnemy.event && $gameTemp.currentBattleEnemy.event.eventId() == eventId){\r\n\t\t\t\tresult = true;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.applyFadeState = function() {\r\n\t\t\tif(this.isTextSkipMode){\r\n\t\t\t\tif(this._lastFadeState == 0){\r\n\t\t\t\t\t$gameScreen.startFadeOut(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$gameScreen.startFadeIn(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.executeCommand = function() {\r\n\t\t\tvar command = this.currentCommand();\r\n\t\t\t\r\n\t\t\tif (command) {\r\n\t\t\t\t//Input.update();\r\n\t\t\t\tif(!this.isHaltingCommand(command) && Input.isPressed(\"ok\") && Input.isPressed(\"menu\")){\r\n\t\t\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\t\t\t$gameScreen.startFadeOut(this.fadeSpeed());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.isTextSkipMode = true;\t\t\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = true;\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(this.isHaltingCommand(command)){\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\t\t\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t}\r\n\t\t\t\tthis._params = command.parameters;\r\n\t\t\t\tthis._indent = command.indent;\r\n\t\t\t\tvar methodName = 'command' + command.code;\r\n\t\t\t\tif (typeof this[methodName] === 'function') {\r\n\t\t\t\t\tif (!this[methodName]()) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t} else {\r\n\t\t\t\tthis.applyFadeState();\r\n\t\t\t\tthis.isTextSkipMode = false;\t\t\r\n\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\tthis.terminate();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Fadeout Screen\r\n\t\tGame_Interpreter.prototype.command221 = function() {\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\tthis._lastFadeState = 0;\r\n\t\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\t\t$gameScreen.startFadeOut(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t// Fadein Screen\r\n\t\tGame_Interpreter.prototype.command222 = function() {\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\tthis._lastFadeState = 1;\r\n\t\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\t\t$gameScreen.startFadeIn(this.fadeSpeed());\r\n\t\t\t\t\tthis.wait(this.fadeSpeed());\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t//Wait\r\n\t\tGame_Interpreter.prototype.command230 = function() {\r\n\t\t\tif(!this.isTextSkipMode){\r\n\t\t\t\tthis.wait(this._params[0]);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Show Animation\r\n\t\tGame_Interpreter.prototype.command212 = function() {\r\n\t\t\tthis._character = this.character(this._params[0]);\r\n\t\t\tif (this._character && !this.isTextSkipMode) {\r\n\t\t\t\tthis._character.requestAnimation(this._params[1]);\r\n\t\t\t\tif (this._params[2]) {\r\n\t\t\t\t\tthis.setWaitMode('animation');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tGame_Interpreter.prototype.command101 = function() {\r\n\t\t\tif (!$gameMessage.isBusy()) {\r\n\t\t\t\t$gameMessage.setFaceImage(this._params[0], this._params[1]);\r\n\t\t\t\t$gameMessage.setBackground(this._params[2]);\r\n\t\t\t\t$gameMessage.setPositionType(this._params[3]);\r\n\t\t\t\twhile (this.nextEventCode() === 401) {  // Text data\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\t$gameMessage.add(this.currentCommand().parameters[0]);\r\n\t\t\t\t}\r\n\t\t\t\tswitch (this.nextEventCode()) {\r\n\t\t\t\tcase 102:  // Show Choices\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setupChoices(this.currentCommand().parameters);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 103:  // Input Number\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setupNumInput(this.currentCommand().parameters);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 104:  // Select Item\r\n\t\t\t\t\tthis._index++;\r\n\t\t\t\t\tthis.setupItemChoice(this.currentCommand().parameters);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.applyFadeState();\r\n\t\t\t\t\tthis.isTextSkipMode = false;\r\n\t\t\t\t\t$gameTemp.isSkippingEvents = false;\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: // Regular text \r\n\t\t\t\t\tif(this.isTextSkipMode){\r\n\t\t\t\t\t\t$gameMessage.clear();\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis._index++;\r\n\t\t\t\tthis.setWaitMode('message');\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t/**************************************\r\n\t\tSample:\r\n\t\t\tthis.playBattleScene({\r\n\t\t\t\teventId: 0, // if included the matching event text will be used for the scene(see BattleText.conf.js).\r\n\t\t\t\tenemyFirst: 0, // if 0 the actor will move first, if 1 the enemy will move first. This also affects the supports. If 0, the actor support will be attacking otherwise defending. If 1, the enemy support will be attacking otherwise defending.\r\n\t\t\t\tsongId: \"Battle1\", // the id of the song that should be played during the battle scene\r\n\t\t\t\tactor: {\r\n\t\t\t\t\tid: 1, // the id of the actor pilot\r\n\t\t\t\t\taction: \"attack\", // the action the actor will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\tweapon: 1, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 20, // the start HP of the actor in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t\tposX: 0, // the x coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\tposY: 0, // the y coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\treferenceEventId: 21 // if provided posX, posY and startHP will be derived from this event instead\r\n\t\t\t\t},\r\n\t\t\t\tactorTwin: {\r\n\t\t\t\t\tid: 2, // the id of the actor pilot\r\n\t\t\t\t\taction: \"attack\", // the action the actor will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\tweapon: 3, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 20, // the start HP of the actor in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t\tposX: 0, // the x coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\tposY: 0, // the y coordinate of the position on the map where this unit stands(optional)\r\n\t\t\t\t\treferenceEventId: 21 // if provided posX, posY and startHP will be derived from this event instead\r\n\t\t\t\t},\r\n\t\t\t\tactorSupport: { // ommit this section if there is no actor supporter\r\n\t\t\t\t\tid: 3, // the id of the actor pilot\r\n\t\t\t\t\taction: \"attack\", // the action the actor will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\tweapon: 5, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 100, // the start HP of the actor in percent\r\n\t\t\t\t\ttargetEndHP: 0, // the end HP of the target in percent\r\n\t\t\t\t},\r\n\t\t\t\tenemy: {\r\n\t\t\t\t\tid: 1, // the id of the enemy pilot\r\n\t\t\t\t\tmechId: 10, // the id of the enemy mech\r\n\t\t\t\t\tweapon: 6, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\taction: \"attack\", // the action the enemy will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 80, // the start HP of the enemy in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t},\r\n\t\t\t\tenemyTwin: {\r\n\t\t\t\t\tid: 1, // the id of the enemy pilot\r\n\t\t\t\t\tmechId: 10, // the id of the enemy mech\r\n\t\t\t\t\tweapon: 6, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\taction: \"attack\", // the action the enemy will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tstartHP: 80, // the start HP of the enemy in percent\r\n\t\t\t\t\ttargetEndHP: 5, // the end HP of the target in percent\r\n\t\t\t\t},\r\n\t\t\t\tenemySupport: { // ommit this section if there is no enemy supporter\r\n\t\t\t\t\tid: 3, // the id of the enemy pilot\r\n\t\t\t\t\tmechId: 11,\r\n\t\t\t\t\taction: \"defend\", // the action the enemy will take: \"attack\", \"defend\", \"evade\". \r\n\t\t\t\t\thits: 1, // if 0 the attack performed by this unit will miss, if 1 the attack will hit \r\n\t\t\t\t\tweapon: -1, // the id of the attack the actor will use. Only used if the action is \"attack\".\r\n\t\t\t\t\tstartHP: 100, // the start HP of the enemy in percent\r\n\t\t\t\t\ttargetEndHP: 0, // the end HP of the target in percent\r\n\t\t\t\t}\t\t\t\r\n\t\t\t});\r\n\r\n\t\t**************************************/\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneActor = function(params) {\r\n\t\t\tvar actor = new Game_Actor(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\tif(params.mechId){\r\n\t\t\t\tactor._mechClass = params.mechId;\t\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t}\r\n\t\t\tparams.unit = actor;\r\n\t\t\tactor.event = {\r\n\t\t\t\teventId: function(){return 1;}, \r\n\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treturn {actor: actor, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneSupportActor = function(params) {\r\n\t\t\tvar actor = new Game_Actor(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\tif(params.mechId){\r\n\t\t\t\tactor._mechClass = params.mechId;\t\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t}\r\n\t\t\tparams.unit = actor;\r\n\t\t\tactor.event = {\r\n\t\t\t\teventId: function(){return 3;},\r\n\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treturn {actor: actor, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneActorTwin = function(params) {\r\n\t\t\tvar actor = new Game_Actor(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\tactor.isEventSubTwin = true;\r\n\t\t\tactor.isSubTwin = true;\r\n\t\t\tif(params.mechId){\r\n\t\t\t\tactor._mechClass = params.mechId;\t\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t}\r\n\t\t\tparams.unit = actor;\r\n\t\t\tactor.event = {\r\n\t\t\t\teventId: function(){return 5;},\r\n\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\treturn {actor: actor, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneEnemy = function(params) {\r\n\t\t\tvar enemy = new Game_Enemy(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tparams.unit = enemy;\r\n\t\t\tenemy._mechClass = params.mechId;\t\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tenemy.event = {\r\n\t\t\t\teventId: function(){return 2;},\r\n\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t};\r\n\t\t\treturn {actor: enemy, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneSupportEnemy = function(params) {\r\n\t\t\tvar enemy = new Game_Enemy(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tparams.unit = enemy;\r\n\t\t\tenemy._mechClass = params.mechId;\t\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tenemy.event = {\r\n\t\t\t\teventId: function(){return 4;},\r\n\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t};\r\n\t\t\treturn {actor: enemy, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneEnemyTwin = function(params) {\r\n\t\t\tvar enemy = new Game_Enemy(params.id, 0, 0);\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tenemy.isEventSubTwin = true;\r\n\t\t\tenemy.isSubTwin = true;\r\n\t\t\tparams.unit = enemy;\r\n\t\t\tenemy._mechClass = params.mechId;\t\r\n\t\t\t$statCalc.initSRWStats(enemy);\r\n\t\t\tenemy.event = {\r\n\t\t\t\teventId: function(){return 6;},\r\n\t\t\t\tposX: function(){return params.posX || 0},\r\n\t\t\t\tposY: function(){return params.posY || 0},\r\n\t\t\t};\r\n\t\t\treturn {actor: enemy, action: this.prepareBattleSceneAction(params), params: params};\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.prepareBattleSceneAction = function(params) {\r\n\t\t\tvar unit = params.unit;\r\n\t\t\t\r\n\t\t\tvar weapon;\r\n\t\t\tif(typeof params.weapon == \"object\"){\r\n\t\t\t\tweapon = params.weapon;\r\n\t\t\t} else {\r\n\t\t\t\tweapon = $statCalc.getActorMechWeapon(unit, params.weapon)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar action;\r\n\t\t\tif(params.action == \"attack\"){\t\t\r\n\t\t\t\taction = {\r\n\t\t\t\t\ttype: \"attack\",\r\n\t\t\t\t\tattack: weapon,\r\n\t\t\t\t\ttarget: 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(params.action == \"defend\"){\t\t\r\n\t\t\t\taction = {\r\n\t\t\t\t\ttype: \"defend\",\r\n\t\t\t\t\tattack: -1,\r\n\t\t\t\t\ttarget: 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(params.action == \"evade\"){\t\t\r\n\t\t\t\taction = {\r\n\t\t\t\t\ttype: \"evade\",\r\n\t\t\t\t\tattack: -1,\r\n\t\t\t\t\ttarget: 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn action;\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.setBattleSceneHP = function(actor, params) {\r\n\t\t\tif(actor && params){\r\n\t\t\t\tvar mechStats = $statCalc.getCalculatedMechStats(actor);\r\n\t\t\t\tmechStats.currentHP = Math.floor(mechStats.maxHP * (params.startHP / 100));\r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\tGame_Interpreter.prototype.playBattleScene = function(params) {\r\n\t\t\tthis.setWaitMode(\"battle_demo\");\r\n\t\t\t$gameTemp.playingBattleDemo = true;\r\n\t\t\t$gameTemp.battleEffectCache = {};\r\n\t\t\t\r\n\t\t\tvar actorInfo = this.prepareBattleSceneActor(params.actor);\r\n\t\t\tvar enemyInfo = this.prepareBattleSceneEnemy(params.enemy);\r\n\t\t\t\t\r\n\t\t\tvar actorTwinInfo;\r\n\t\t\tif(params.actorTwin){\r\n\t\t\t\tactorTwinInfo = this.prepareBattleSceneActorTwin(params.actorTwin);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar enemyTwinInfo;\r\n\t\t\tif(params.enemyTwin){\r\n\t\t\t\tenemyTwinInfo = this.prepareBattleSceneEnemyTwin(params.enemyTwin);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar actor = actorInfo.actor;\r\n\t\t\tvar enemy = enemyInfo.actor;\r\n\t\t\t\r\n\t\t\tvar attacker;\r\n\t\t\tvar attackerTwin;\r\n\t\t\tvar defender;\r\n\t\t\tvar defenderTwin;\r\n\t\t\tvar attackerSide;\r\n\t\t\tvar defenderSide;\r\n\t\t\tif(params.enemyFirst){\r\n\t\t\t\tattackerSide = \"enemy\";\r\n\t\t\t\tdefenderSide = \"actor\";\r\n\t\t\t\tattacker = enemyInfo;\r\n\t\t\t\tdefender = actorInfo;\r\n\t\t\t\tattackerTwin = enemyTwinInfo;\r\n\t\t\t\tdefenderTwin = actorTwinInfo;\r\n\t\t\t} else {\r\n\t\t\t\tattackerSide = \"actor\";\r\n\t\t\t\tdefenderSide = \"enemy\";\r\n\t\t\t\tattacker = actorInfo;\r\n\t\t\t\tdefender = enemyInfo;\r\n\t\t\t\tattackerTwin = actorTwinInfo;\r\n\t\t\t\tdefenderTwin = enemyTwinInfo;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$battleCalc.prepareBattleCache(attacker, \"initiator\");\r\n\t\t\t$battleCalc.prepareBattleCache(defender, \"defender\");\r\n\t\t\t\r\n\t\t\tif(attackerTwin){\r\n\t\t\t\t$battleCalc.prepareBattleCache(attackerTwin, \"twin attack\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(defenderTwin){\r\n\t\t\t\t$battleCalc.prepareBattleCache(defenderTwin, \"twin defend\");\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar actorCacheEntry = $gameTemp.battleEffectCache[actor._cacheReference];\r\n\t\t\tvar enemyCacheEntry = $gameTemp.battleEffectCache[enemy._cacheReference];\r\n\t\t\t\r\n\t\t\tvar supportAttacker;\r\n\t\t\tvar supportDefender;\r\n\t\t\t\r\n\t\t\tvar actorSupportInfo;\t\r\n\t\t\tif(params.actorSupport){\r\n\t\t\t\tactorSupportInfo = this.prepareBattleSceneSupportActor(params.actorSupport);\t\t\r\n\t\t\t}\r\n\t\t\tvar actorSupport;\r\n\t\t\tvar actorSupportCacheEntry;\r\n\t\t\tif(actorSupportInfo){\r\n\t\t\t\tactorSupport = actorSupportInfo.actor;\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tsupportDefender = actorSupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(actorSupportInfo, \"support defend\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsupportAttacker = actorSupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(actorSupportInfo, \"support attack\");\r\n\t\t\t\t}\t\r\n\t\t\t\tactorSupportCacheEntry = $gameTemp.battleEffectCache[actorSupport._cacheReference];\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar enemySupportInfo;\t\r\n\t\t\tif(params.enemySupport){\r\n\t\t\t\tenemySupportInfo = this.prepareBattleSceneSupportEnemy(params.enemySupport);\t\t\r\n\t\t\t}\r\n\t\t\tvar enemySupport;\r\n\t\t\tvar enemySupportCacheEntry;\r\n\t\t\tif(enemySupportInfo){\r\n\t\t\t\tenemySupport = enemySupportInfo.actor;\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tsupportAttacker = enemySupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(enemySupportInfo, \"support attack\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsupportDefender = enemySupportInfo;\r\n\t\t\t\t\t$battleCalc.prepareBattleCache(enemySupportInfo, \"support defend\");\r\n\t\t\t\t}\t\r\n\t\t\t\tenemySupportCacheEntry = $gameTemp.battleEffectCache[enemySupport._cacheReference];\t\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\tthis.setBattleSceneHP(actor, params.actor);\r\n\t\t\tthis.setBattleSceneHP(enemy, params.enemy);\r\n\t\t\tthis.setBattleSceneHP(actorSupport, params.actorSupport);\r\n\t\t\tthis.setBattleSceneHP(enemySupport, params.enemySupport);\r\n\r\n\t\t\tfunction BattleAction(attacker, defender, supportDefender, side, isSupportAttack){\r\n\t\t\t\tthis._attacker = attacker;\r\n\t\t\t\tthis._defender = defender;\r\n\t\t\t\tthis._supportDefender = supportDefender;\r\n\t\t\t\tthis._side = side;\r\n\t\t\t\tthis._isSupportAttack = isSupportAttack;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tBattleAction.prototype.execute = function(orderIdx){\r\n\t\t\t\tvar aCache = $gameTemp.battleEffectCache[this._attacker.actor._cacheReference];\r\n\t\t\t\tif(this._isSupportAttack){\r\n\t\t\t\t\taCache =  $gameTemp.battleEffectCache[this._attacker.actor._supportCacheReference];\r\n\t\t\t\t}\r\n\t\t\t\taCache.damageInflicted = 0;\r\n\t\t\t\taCache.side = this._side;\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar defenders = [this._defender];\r\n\t\t\t\tif(this._attacker.action.attack && this._attacker.action.attack.isAll){\r\n\t\t\t\t\tif(this._side == \"actor\"){ \r\n\t\t\t\t\t\tif(this._attacker.actor.isSubTwin && params.enemyTwin){\r\n\t\t\t\t\t\t\tdefenders.push(enemyInfo);\r\n\t\t\t\t\t\t} else if(params.enemy && enemyTwinInfo){\r\n\t\t\t\t\t\t\tdefenders.push(enemyTwinInfo);\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(this._side == \"enemy\"){\t\t\t\t\r\n\t\t\t\t\t\tif(this._attacker.actor.isSubTwin && params.actorTwin){\r\n\t\t\t\t\t\t\tdefenders.push(actorInfo);\r\n\t\t\t\t\t\t} else if(params.actor && actorTwinInfo){\r\n\t\t\t\t\t\t\tdefenders.push(actorTwinInfo);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(var i = 0; i < defenders.length; i++){\t\r\n\t\t\t\t\tvar attackedRef = \"\";\r\n\t\t\t\t\tif(i == 1){\r\n\t\t\t\t\t\tattackedRef = \"_all_sub\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar dCache = $gameTemp.battleEffectCache[defenders[i].actor._cacheReference];\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar activeDefender = this._defender;\r\n\t\t\t\t\tif(this._supportDefender) {\r\n\t\t\t\t\t\tvar sCache = $gameTemp.battleEffectCache[this._supportDefender.actor._supportCacheReference];\r\n\t\t\t\t\t\tif(!sCache.hasActed){\r\n\t\t\t\t\t\t\tactiveDefender = this._supportDefender;\r\n\t\t\t\t\t\t\tdCache = sCache;\r\n\t\t\t\t\t\t\tdCache.defended = defenders[i].actor;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tdCache.damageTaken = 0;\r\n\t\t\t\t\tif(!aCache.isDestroyed && !dCache.isDestroyed){\t\t\r\n\t\t\t\t\t\taCache.actionOrder = orderIdx;\r\n\t\t\t\t\t\taCache[\"attacked\"+attackedRef] = dCache;\r\n\t\t\t\t\t\taCache.originalTarget = dCache;\r\n\t\t\t\t\t\taCache.hasActed = true;\r\n\t\t\t\t\t\tdCache.hasActed = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(this._side == \"actor\"){\r\n\t\t\t\t\t\t\tdCache.side = \"enemy\";\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdCache.side = \"actor\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar isHit = this._attacker.params.hits;\r\n\t\t\t\t\t\tif(isHit){\r\n\t\t\t\t\t\t\taCache[\"hits\"+attackedRef] = isHit;\r\n\t\t\t\t\t\t\taCache.inflictedCritical = this._attacker.params.isCrit;\r\n\t\t\t\t\t\t\tdCache.isHit = isHit;\r\n\t\t\t\t\t\t\tdCache.tookCritical = this._attacker.params.isCrit;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar mechStats = $statCalc.getCalculatedMechStats(activeDefender.actor);\r\n\t\t\t\t\t\t\tvar damagePercent = activeDefender.params.startHP - this._attacker.params.targetEndHP;\r\n\t\t\t\t\t\t\tvar damage = Math.floor(mechStats.maxHP * (damagePercent / 100));\r\n\t\t\t\t\t\t\taCache[\"damageInflicted\"+attackedRef] = damage;\r\n\t\t\t\t\t\t\tdCache.damageTaken+= damage;\r\n\t\t\t\t\t\t\tif(this._attacker.params.targetEndHP <= 0){\r\n\t\t\t\t\t\t\t\tdCache.isDestroyed = true;\r\n\t\t\t\t\t\t\t\tdCache.destroyer = aCache.ref;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar currentTargetingSettings = {\r\n\t\t\t\tattacker: defender,\r\n\t\t\t\tattackerTwin: defenderTwin,\r\n\t\t\t\tdefender: attacker,\r\n\t\t\t\tdefenderTwin: attackerTwin\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(params.actor){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.actor.target == \"twin\" && params.enemyTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attacker;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defender;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\tif(params.actorTwin){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.actorTwin.target == \"twin\" && params.enemyTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attacker;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defender;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(params.enemy){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.enemy.target == \"twin\" && params.actorTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attacker = defender;\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t} else {\t\t\t\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defender = attacker;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} \r\n\t\t\t\r\n\t\t\tif(params.enemyTwin){\r\n\t\t\t\tvar target;\r\n\t\t\t\tif(params.enemyTwin.target == \"twin\" && params.actorTwin){\r\n\t\t\t\t\ttarget = \"twin\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttarget = \"main\";\r\n\t\t\t\t}\r\n\t\t\t\tif(params.enemyFirst){\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defenderTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.attackerTwin = defender;\r\n\t\t\t\t\t}\t\t\r\n\t\t\t\t} else {\t\t\t\r\n\t\t\t\t\tif(target == \"twin\"){\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attackerTwin;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcurrentTargetingSettings.defenderTwin = attacker;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar actions = [];\r\n\t\t\tif(!ENGINE_SETTINGS.USE_SRW_SUPPORT_ORDER && supportAttacker){\t\t\t\r\n\t\t\t\tactions.push(new BattleAction(supportAttacker, currentTargetingSettings.attacker, supportDefender, attackerSide, true));\t\t\t\t\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\tif(attackerTwin){\r\n\t\t\t\tactions.push(new BattleAction(attackerTwin, currentTargetingSettings.attackerTwin, supportDefender, attackerSide));\t\r\n\t\t\t}\r\n\t\t\tactions.push(new BattleAction(attacker, currentTargetingSettings.attacker, supportDefender, attackerSide));\t\r\n\t\t\t\r\n\t\t\tif(ENGINE_SETTINGS.USE_SRW_SUPPORT_ORDER && supportAttacker){\t\t\t\r\n\t\t\t\tactions.push(new BattleAction(supportAttacker, currentTargetingSettings.attacker, supportDefender, attackerSide, true));\t\t\t\t\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\tif(defenderTwin){\r\n\t\t\t\tactions.push(new BattleAction(defenderTwin, currentTargetingSettings.defenderTwin, supportDefender, defenderSide));\t\r\n\t\t\t}\r\n\t\t\tactions.push(new BattleAction(defender, currentTargetingSettings.defender, null, defenderSide));\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < actions.length; i++){\r\n\t\t\t\tactions[i].execute(i);\r\n\t\t\t}\r\n\t\t\tif(params.eventId != null){\r\n\t\t\t\t$gameTemp.scriptedBattleDemoId = params.eventId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$gameSystem.setSubBattlePhase('halt');\r\n\t\t\t//SceneManager.stop();\t\r\n\t\t\t$battleSceneManager.playBattleScene();\r\n\t\t\tif(params.songId){\r\n\t\t\t\t$songManager.playSong(params.songId);\r\n\t\t\t}\t\r\n\t\t}\r\n\r\n\t\t// 指定したイベントのターゲットＩＤを設定する（戦闘モードが'aimingEvent'または'aimingActor'でのみ機能する）\r\n\t\tGame_Interpreter.prototype.setTargetId = function(eventId, targetId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tbattlerArray[1].setTargetId(targetId);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定したイベントが戦闘不能か指定したスイッチに返す\r\n\t\tGame_Interpreter.prototype.isUnitDead = function(switchId, eventId) {\r\n\t\t\t$gameSwitches.setValue(switchId, false);\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t$gameSwitches.setValue(switchId, battlerArray[1].isDead());\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定した座標のイベントＩＤを取得する\r\n\t\tGame_Interpreter.prototype.isEventIdXy = function(variableId, x, y) {\r\n\t\t\t$gameVariables.setValue(variableId, 0);\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\t$gameVariables.setValue(variableId, event.eventId());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定したイベントＩＤのユニットを全回復する\r\n\t\tGame_Interpreter.prototype.unitRecoverAll = function(eventId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tif (battlerArray[1].isAlive()) {\r\n\t\t\t\t\tbattlerArray[1].recoverAll();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// 指定したイベントＩＤのユニットを復活する\r\n\t\tGame_Interpreter.prototype.unitRevive = function(eventId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tif (battlerArray[1].isAlive()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tbattlerArray[1].removeState(battlerArray[1].deathStateId());\r\n\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\tvar xy = event.makeAppearPoint(event, event.posX(), event.posY())\r\n\t\t\t\tevent.setPosition(xy[0], xy[1]);\r\n\t\t\t\tevent.appear();\r\n\t\t\t\t$gameMap.setEventImages();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// 指定したイベントＩＤのユニットを指定したステートにする\r\n\t\tGame_Interpreter.prototype.unitAddState = function(eventId, stateId) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tvar event = $gameMap.event(eventId);\r\n\t\t\tif (battlerArray && event && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\tvar alreadyDead = battlerArray[1].isDead();\r\n\t\t\t\tbattlerArray[1].addState(stateId);\r\n\t\t\t\tif (battlerArray[1].isDead() && !alreadyDead) {\r\n\t\t\t\t\tif (!event.isErased()) {\r\n\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\tif (battlerArray[0] === 'actor') {\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_actorsDestroyed);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_actorsDestroyed, oldValue + 1);\r\n\t\t\t\t\r\n\t\t\t\t\t\t} else if (battlerArray[0] === 'enemy') {\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue - 1);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar oldValue = $gameVariables.value(_enemiesDestroyed);\r\n\t\t\t\t\t\t\t$gameVariables.setValue(_enemiesDestroyed, oldValue + 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbattlerArray[1].clearResult();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// ターン終了を行う（メニューの「ターン終了」と同じ）\r\n\t\t\tGame_Interpreter.prototype.turnEnd = function() {\r\n\t\t\t\t$gameTemp.setTurnEndFlag(true);\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\r\n\t\t// プレイヤーの操作を受け付けるかの判定（操作できるサブフェーズか？）\r\n\t\t\tGame_Interpreter.prototype.isSubPhaseNormal = function(id) {\r\n\t\t\t\tif ($gameSystem.isBattlePhase() === 'actor_phase' && $gameSystem.isSubBattlePhase() === 'normal') {\r\n\t\t\t\t\t$gameSwitches.setValue(id, true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$gameSwitches.setValue(id, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tGame_Interpreter.prototype.runSubEvent = function(id) {\r\n\t\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\t\tif (event.event().meta.function == id) {\r\n\t\t\t\t\t\tif (event.pageIndex() >= 0){\r\n\t\t\t\t\t\t\t$gameMap._interpreter.setupChild(event.list(), 0);\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/GameInterpreter.js?");

/***/ }),

/***/ "./js/SRW Core/GameSystem.js":
/*!***********************************!*\
  !*** ./js/SRW Core/GameSystem.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t\r\n\t//====================================================================\r\n\t// ●Game_System\r\n\t//====================================================================\r\n\t//初期化処理\r\n\t\tvar _SRPG_Game_System_initialize = Game_System.prototype.initialize;\r\n\t\tGame_System.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_System_initialize.call(this);\r\n\t\t\tthis._SRPGMode = false;\r\n\t\t\tthis._isBattlePhase = 'initialize';\r\n\t\t\tthis._isSubBattlePhase = 'initialize';\r\n\t\t\tthis._AutoUnitId = 0;\r\n\t\t\tthis._EventToUnit = [];\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [false, null];\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [false, null, null];\r\n\t\t\tthis._SrpgWaitMoving = false;\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [false, null];\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [false, null];\r\n\t\t\tthis._srpgAllActors = []; //SRPGモードに参加する全てのアクターの配列\r\n\t\t\tthis._searchedItemList = [];\r\n\t\t\tthis.initOptions();\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.initOptions = function() {\r\n\t\t\tif(this.optionDisableGrid == null){\r\n\t\t\t\tthis.optionDisableGrid = false;\r\n\t\t\t}\r\n\t\t\tif(this.showWillIndicator == null){\r\n\t\t\t\tthis.showWillIndicator = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionDefaultSupport == null){\r\n\t\t\t\tthis.optionDefaultSupport = true;\r\n\t\t\t}\r\n\t\t\tif(this.optionSkipUnitMoving == null){\r\n\t\t\t\tthis.optionSkipUnitMoving = false;\r\n\t\t\t}\r\n\t\t\tif(this.optionBattleBGM == null){\r\n\t\t\t\tthis.optionBattleBGM = true;\r\n\t\t\t}\r\n\t\t\tif(this.optionAfterBattleBGM == null){\r\n\t\t\t\tthis.optionAfterBattleBGM = true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t//変数関係の処理\r\n\t\t//戦闘中かどうかのフラグを返す\r\n\t\tGame_System.prototype.isSRPGMode = function() {\r\n\t\t\treturn this._SRPGMode;\r\n\t\t};\r\n\r\n\t\t//戦闘のフェーズを返す\r\n\t\t// initialize：初期化状態\r\n\t\t// actor_phase：アクター行動フェーズ\r\n\t\t// auto_actor_phase：アクター自動行動フェーズ\r\n\t\t// enemy_phase：エネミー行動フェーズ\r\n\t\tGame_System.prototype.isBattlePhase = function() {\r\n\t\t\treturn this._isBattlePhase;\r\n\t\t};\r\n\r\n\t\t//戦闘のフェーズを変更する\r\n\t\tGame_System.prototype.setBattlePhase = function(phase) {\r\n\t\t\tthis._isBattlePhase = phase;\r\n\t\t};\r\n\r\n\t\t//戦闘のサブフェーズを返す。各BattlePhase内で使用され、処理の進行を制御する。\r\n\t\t// initialize：初期化を行う状態\r\n\t\t// normal：行動アクターが選択されていない状態\r\n\t\t// actor_move：移動範囲が表示され、移動先を選択している状態\r\n\t\t// actor_target：行動対象を選択している状態\r\n\t\t// status_window：ステータスウィンドウが開かれている状態\r\n\t\t// actor_command_window：アクターコマンドウィンドウが開かれている状態\r\n\t\t// battle_window：攻撃確認ウィンドウが開かれている状態\r\n\t\t// auto_actor_command：自動行動アクターをイベント順に行動決定する状態\r\n\t\t// auto_actor_move : 自動行動アクターが移動先を決定し、移動する状態\r\n\t\t// auto_actor_action：自動行動アクターの実際の行動を行う状態\r\n\t\t// enemy_command：エネミーをイベント順に行動決定する状態\r\n\t\t// enemy_move : エネミーが移動先を決定し、移動する状態\r\n\t\t// enemy_action：エネミーの実際の行動を行う状態\r\n\t\t// invoke_action：戦闘を実行している状態\r\n\t\t// after_battle：戦闘終了後の処理を呼び出す状態\r\n\t\tGame_System.prototype.isSubBattlePhase = function() {\r\n\t\t\treturn this._isSubBattlePhase;\r\n\t\t};\r\n\r\n\t\t//戦闘のサブフェーズを変更する\r\n\t\tGame_System.prototype.setSubBattlePhase = function(phase) {\r\n\t\t\t$SRWGameState.requestNewState(phase);\r\n\t\t\tthis._isSubBattlePhase = phase;\r\n\t\t};\r\n\r\n\t\t//自動行動・エネミーの実行ＩＤを返す\r\n\t\tGame_System.prototype.isAutoUnitId = function() {\r\n\t\t\treturn this._AutoUnitId;\r\n\t\t};\r\n\r\n\t\t//自動行動・エネミーの実行ＩＤを設定する\r\n\t\tGame_System.prototype.setAutoUnitId = function(num) {\r\n\t\t\tthis._AutoUnitId = num;\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgStatusWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgStatusWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgStatusWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// ステータスウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgStatusWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgStatusWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgBattleWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgBattleWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgBattleWindowNeedRefresh = function(actionBattlerArray, targetBattlerArray) {\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [true, actionBattlerArray, targetBattlerArray];\r\n\t\t};\r\n\r\n\t\t// 予想ウィンドウ・戦闘開始ウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgBattleWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgBattleWindowRefreshFlag = [false, null, null];\r\n\t\t};\r\n\r\n\t\t//移動範囲を表示するスプライトの最大数\r\n\t\tGame_System.prototype.spriteMoveTileMax = function() {\r\n\t\t\treturn Math.min($dataMap.width * $dataMap.height, 1000);\r\n\t\t};\r\n\r\n\t\t// 移動中のウェイトフラグを返す\r\n\t\tGame_System.prototype.srpgWaitMoving = function() {\r\n\t\t\treturn this._SrpgWaitMoving;\r\n\t\t};\r\n\r\n\t\t// 移動中のウェイトフラグを設定する\r\n\t\tGame_System.prototype.setSrpgWaitMoving = function(flag) {\r\n\t\t\tthis._SrpgWaitMoving = flag;\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgActorCommandWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgActorCommandWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgActorCommandWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// アクターコマンドウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgActorCommandWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgActorCommandWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグを返す\r\n\t\tGame_System.prototype.srpgActorCommandStatusWindowNeedRefresh = function() {\r\n\t\t\treturn this._SrpgActorCommandStatusWindowRefreshFlag;\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグを設定する\r\n\t\tGame_System.prototype.setSrpgActorCommandStatusWindowNeedRefresh = function(battlerArray) {\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [true, battlerArray];\r\n\t\t};\r\n\r\n\t\t// 行動中アクターの簡易ステータスウィンドウのリフレッシュフラグをクリアする\r\n\t\tGame_System.prototype.clearSrpgActorCommandStatusWindowNeedRefresh = function() {\r\n\t\t\tthis._SrpgActorCommandStatusWindowRefreshFlag = [false, null];\r\n\t\t};\r\n\r\n\t\t//戦闘に参加するアクターのリスト\r\n\t\tGame_System.prototype.srpgAllActors = function() {\r\n\t\t\treturn this._srpgAllActors;\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.clearSrpgAllActors = function() {\r\n\t\t\tthis._srpgAllActors = [];\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.pushSrpgAllActors = function(actor) {\r\n\t\t\tthis._srpgAllActors.push(actor);\r\n\t\t};\r\n\r\n\t\t// 探査済み座標のリスト\r\n\t\tGame_System.prototype.pushSearchedItemList = function(xy) {\r\n\t\t\tif (!this._searchedItemList) {\r\n\t\t\t\tthis._searchedItemList = [];\r\n\t\t\t}\r\n\t\t\tthis._searchedItemList.push(xy);\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.indexOfSearchedItemList = function(xy) {\r\n\t\t\tif (!this._searchedItemList) {\r\n\t\t\t\tthis._searchedItemList = [];\r\n\t\t\t}\r\n\t\t\tvar flag = -1;\r\n\t\t\tfor (var i=0; i < this._searchedItemList.length; i++) {\r\n\t\t\t\tvar xy2 = this._searchedItemList[i];\r\n\t\t\t\tif (xy[0] === xy2[0] && xy[1] === xy2[1]) {\r\n\t\t\t\t\tflag = i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\treturn flag;\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.resetSearchedItemList = function() {\r\n\t\t\tthis._searchedItemList = [];\r\n\t\t};\r\n\r\n\t//戦闘開始に関係する処理\r\n\t\t//戦闘開始するためのプラグイン・コマンド\r\n\t\tGame_System.prototype.updateAvailableUnits = function(){\r\n\t\t\tthis._availableMechs = [];//available mechs must be cleared to avoid conflicts with previously serialized entries in the listing\r\n\t\t\tthis._availableUnits = $gameParty.allMembers();\r\n\t\t\tthis.dummyId = 0;\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\tactor.isSubPilot = false;\r\n\t\t\t\t$statCalc.attachDummyEvent(actor, actor.SRWStats.mech.id);\r\n\t\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\t$statCalc.initSRWStats(actor);\t\t\t\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tvar tmp = Object.keys($SRWSaveManager.getUnlockedUnits());\t\t\t\r\n\t\t\tfor(var i = 0; i < tmp.length; i++){\r\n\t\t\t\tvar currentPilot = $statCalc.getCurrentPilot(tmp[i]);\r\n\t\t\t\tif(!currentPilot){\r\n\t\t\t\t\tvar mechData = $statCalc.getMechData($dataClasses[tmp[i]], true);\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar result = $statCalc.createEmptyActor();\t\t\t\t\r\n\t\t\t\t\tresult.SRWStats.mech = mechData;\t\t\r\n\t\t\t\t\t$statCalc.attachDummyEvent(result, mechData.id);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis._availableMechs.push(result);\r\n\t\t\t\t\t$statCalc.invalidateAbilityCache();\t\r\n\t\t\t\t\t$statCalc.calculateSRWMechStats(mechData, false, result);\t\t\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.startIntermission = function(){\r\n\t\t\tthis._isIntermission = true;\r\n\t\t\tthis.updateAvailableUnits();\r\n\t\t\t$gameTemp.summaryUnit = null;\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t$gameTemp.deployMode = \"\";\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isIntermission = function(id){\r\n\t\t\treturn this._isIntermission;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAvailableUnits = function(id){\r\n\t\t\treturn this._availableUnits;\r\n\t\t}\r\n\t\t\r\n\t\t//use $gameActors.actor instead!\r\n\t\tGame_System.prototype.getActorById = function(id){\r\n\t\t\tvar result;\r\n\t\t\tvar ctr = 0; \r\n\t\t\twhile(!result && ctr < this._availableUnits.length){\r\n\t\t\t\tif(this._availableUnits[ctr].actorId() == id){\r\n\t\t\t\t\tresult = this._availableUnits[ctr];\r\n\t\t\t\t}\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.endIntermission = function(){\r\n\t\t\t$gameTemp.intermissionPending = false;\r\n\t\t\tthis._isIntermission = false;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.startSRPG = function() {\r\n\t\t\tthis._SRPGMode = true;\r\n\t\t\tthis.enableGrid = true;\r\n\t\t\t$gameTemp.listContext = \"actor\";\r\n\t\t\t$gameSwitches.setValue(_srpgBattleSwitchID, true);\r\n\t\t\tthis._isBattlePhase = 'start_srpg';\r\n\t\t\tthis._isSubBattlePhase = 'start_srpg';\r\n\t\t\t$gamePlayer.refresh();\r\n\t\t\t$gameTemp.clearActiveEvent();\r\n\t\t\t$gameTemp.actorAction = {};\r\n\t\t\t$gameTemp.enemyAction = {};\r\n\t\t\tthis.clearData(); //データの初期化\r\n\t\t\tthis.setAllEventType(); //イベントタイプの設定\r\n\t\t\tthis._availableUnits = [];\r\n\t\t\tthis.setSrpgActors(); //アクターデータの作成\r\n\t\t\tthis.setSrpgEnemys(); //エネミーデータの作成\r\n\t\t\t\r\n\t\t\t$gameMap.setEventImages();   // ユニットデータに合わせてイベントのグラフィックを変更する\r\n\t\t\tthis.runBattleStartEvent(); // ゲーム開始時の自動イベントを実行する\r\n\t\t\tthis.runAfterDeployEvent();\r\n\t\t\t//clear stage temp variables\r\n\t\t\tfor(var i = 21; i <= 60; i++){\r\n\t\t\t\t$gameVariables.setValue(i, 0);\r\n\t\t\t}\r\n\t\t\r\n\t\t\t$gameVariables.setValue(_turnVarID, 1); //ターン数を初期化する\r\n\t\t\t$gameSystem.resetSearchedItemList(); //探索済み座標を初期化する\r\n\t\t\t$gameSystem._specialTheme = -1;\r\n\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t$gameSystem.regionHighlights = {};\r\n\t\t\t$gameSystem.enemyUpgradeLevel = 0;\r\n\t\t\t$gameSystem.persuadeOptions = {};\r\n\t\t\t$gameTemp.currentSwapSource = -1;\r\n\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t$gameSystem.defaultBattleEnv = null;\r\n\t\t\t$gameSystem.skyBattleEnv = null;\r\n\t\t\t$gameSystem.regionBattleEnv = {};\r\n\t\t\t$gameSystem.regionSkyBattleEnv = {};\r\n\t\t\t$gameSystem.stageTextId = null;\r\n\t\t\t\r\n\t\t\tif($gameSystem.foregroundSpriteToggleState == null){\r\n\t\t\t\t$gameSystem.foregroundSpriteToggleState = 0;\r\n\t\t\t}\r\n\t\t\t//$gameSystem.showWillIndicator = false;\r\n\t\t\t$gameTemp.disappearQueue = [];\r\n\r\n\t\t\t$gameSystem.actorRankLookup = $statCalc.getActorRankLookup();\r\n\t\t\t$gameTemp.AIWaitTimer = 0;\r\n\t\t\t\r\n\t\t\t$gameVariables.setValue(_masteryConditionText, APPSTRINGS.GENERAL.label_default_mastery_condition);\t\r\n\t\t\t$gameVariables.setValue(_victoryConditionText, APPSTRINGS.GENERAL.label_default_victory_condition);\t\r\n\t\t\t$gameVariables.setValue(_defeatConditionText, APPSTRINGS.GENERAL.label_default_defeat_condition);\r\n\t\t\t\r\n\t\t\t$gameSystem.factionConfig = {\r\n\t\t\t\t0: {\r\n\t\t\t\t\tattacksPlayers:true,\r\n\t\t\t\t\tattacksFactions: [1,2],\r\n\t\t\t\t\tactive: true\r\n\t\t\t\t},\r\n\t\t\t\t1: {\r\n\t\t\t\t\tattacksPlayers:false,\r\n\t\t\t\t\tattacksFactions: [0],\r\n\t\t\t\t\tactive: false\r\n\t\t\t\t},\r\n\t\t\t\t2: {\r\n\t\t\t\t\tattacksPlayers:false,\r\n\t\t\t\t\tattacksFactions: [0],\r\n\t\t\t\t\tactive: false\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t$gameTemp.preventedDeathQuotes = {};\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t\t\r\n\t\t\tSceneManager._scene.createPauseWindow(); //ensure pause menu is updated to reflect the new mode\r\n\t\t};\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tGame_System.prototype.enableFaction = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].active = true;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.disableFaction = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].active = false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setFactionAggro = function(id, aggro) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].attacksFactions = [];\r\n\t\t\t\tfor(var i = 0; i < aggro.length; i++){\r\n\t\t\t\t\tif(aggro[i] == \"player\"){\r\n\t\t\t\t\t\tthis.factionConfig[id].attacksPlayers = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.factionConfig[id].attacksFactions.push(aggro[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\tGame_System.prototype.clearFactionAggro = function(id) {\r\n\t\t\tif(this.factionConfig[id]){\r\n\t\t\t\tthis.factionConfig[id].attacksFactions = [];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPlayerFactionInfo = function() {\r\n\t\t\t var aggressiveFactions = [];\r\n\t\t\t if(this.factionConfig[0].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(0);\r\n\t\t\t }\r\n\t\t\t if(this.factionConfig[1].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(1);\r\n\t\t\t }\r\n\t\t\t if(this.factionConfig[2].attacksPlayers){\r\n\t\t\t\t aggressiveFactions.push(2);\r\n\t\t\t }\r\n\t\t\t return {\r\n\t\t\t\tattacksPlayers:false,\r\n\t\t\t\tattacksFactions: aggressiveFactions,\r\n\t\t\t\tactive: true \r\n\t\t\t };\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getFactionId = function(actor) {\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn \"player\";\r\n\t\t\t} else {\r\n\t\t\t\treturn actor.factionId;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getEnemyFactionInfo = function(enemy) {\r\n\t\t\t return this.factionConfig[enemy.factionId];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isFriendly = function(actor, factionId) {\r\n\t\t\tvar factionInfo = this.getUnitFactionInfo(actor);\r\n\t\t\tif(factionId == \"player\"){\r\n\t\t\t\treturn !factionInfo.attacksPlayers;\r\n\t\t\t} else {\r\n\t\t\t\treturn factionInfo.attacksFactions.indexOf(factionId) == -1;\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.getUnitFactionInfo = function(actor) {\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn this.getPlayerFactionInfo();\r\n\t\t\t} else {\r\n\t\t\t\treturn this.getEnemyFactionInfo(actor);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isEnemy = function(actor) {\r\n\t\t\tif(!actor.isActor){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.getEnemyFactionInfo(actor).attacksPlayers;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isEnemyPhase = function(actor) {\r\n\t\t\treturn $gameSystem.factionConfig[$gameTemp.currentFaction].attacksPlayers;\r\n\t\t}\r\n\r\n\t\t//イベントＩＤに対応するアクター・エネミーデータを初期化する\r\n\t\tGame_System.prototype.clearData = function() {\r\n\t\t\tthis._EventToUnit = [];\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t};\r\n\r\n\t\t//イベントＩＤに対応するアクター・エネミーデータをセットする\r\n\t\tGame_System.prototype.setEventToUnit = function(event_id, type, data) {\r\n\t\t\tthis._EventToUnit[event_id] = [type, data];\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.clearEventToUnit = function(event_id) {\r\n\t\t\tdelete this._EventToUnit[event_id];\r\n\t\t}\r\n\r\n\t\t//イベントＩＤから対応するアクター・エネミーデータを返す\r\n\t\tGame_System.prototype.EventToUnit = function(event_id) {\r\n\t\t\t//return this._EventToUnit[event_id];\r\n\t\t\tvar battlerArray = this._EventToUnit[event_id];\r\n\t\t\tif (battlerArray) {\r\n\t\t\t\tif (battlerArray[0] === 'actor') {\r\n\t\t\t\t\tvar actor = $gameActors.actor(battlerArray[1]);\r\n\t\t\t\t\treturn [battlerArray[0], actor]\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn battlerArray;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//アクターＩＤから対応するイベントＩＤを返す\r\n\t\tGame_System.prototype.ActorToEvent = function(actor_id) {\r\n\t\t\tvar eventId = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tvar unit =  $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\t\tif(unit){\r\n\t\t\t\t\t\tvar actor = unit[1];\r\n\t\t\t\t\t\tif (actor && actor.actorId() == actor_id) {\r\n\t\t\t\t\t\t\teventId = event.eventId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}              \r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn eventId;\r\n\t\t};\r\n\t\t\r\n\r\n\t\t// イベントのメモからイベントのタイプを設定する\r\n\t\tGame_System.prototype.setAllEventType = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.event().meta.type) {\r\n\t\t\t\t\tevent.setType(event.event().meta.type);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActorsWithAction = function(){\r\n\t\t\tvar _this = this;\t\t\r\n\t\t\tvar result = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = _this.EventToUnit(event.eventId());\r\n\t\t\t\tif(!event.isErased() && battlerArray){\r\n\t\t\t\t\tvar actor = battlerArray[1];\r\n\t\t\t\t\tif(actor.isActor() && !actor.srpgTurnEnd()){\r\n\t\t\t\t\t\tresult.push(actor);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// イベントのメモからアクターを読み込み、対応するイベントＩＤに紐づけする\r\n\t\tGame_System.prototype.setSrpgActors = function() {\r\n\t  \r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameVariables.setValue(_actorsDestroyed, 0);\r\n\t\t\t$gameVariables.setValue(_existShipVarId, 0);\t\r\n\r\n\t\t\tthis._availableUnits = $gameParty.allMembers();\r\n\t\t\tthis._availableUnits.forEach(function(actor){\r\n\t\t\t\t$statCalc.initSRWStats(actor);\r\n\t\t\t\tactor.event = null;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' || event.isType() === 'ship' || event.isType() === 'ship_event') {\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tGame_System.prototype.deployShips = function(toAnimQueue) {\t\t\r\n\t\t\tvar _this = this;\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar deployList = _this.getActiveShipDeployList();\t\t\t\r\n\t\t\t\r\n\t\t\tvar shipCtr = 0;\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) { //ensure to spawn ships first so that are drawn below the other actor sprites\r\n\t\t\t\tif (event.isType() === 'ship' && !event.isDeployed) {\r\n\t\t\t\t\tvar actor_unit;\r\n\t\t\t\t\tvar entry = deployList[shipCtr] || {};\r\n\t\t\t\t\tvar actorId = entry.main;\t\t\t\t\t\r\n\t\t\t\t\tif(typeof actorId != \"undefined\"){\r\n\t\t\t\t\t\tactor_unit = $gameActors.actor(actorId);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (actor_unit) {\r\n\t\t\t\t\t\tactor_unit.event = event;\r\n\t\t\t\t\t\t_this.pushSrpgAllActors(event.eventId());\r\n\t\t\t\t\t\tevent.isDeployed = true;\r\n\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(actor_unit.faceName()); //顔グラフィックをプリロードする\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existShipVarId);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existShipVarId, oldValue + 1);\r\n\t\t\t\t\t\t_this.setEventToUnit(event.eventId(), 'actor', actor_unit.actorId());\r\n\t\t\t\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t\t\t\tactor_unit.setSrpgTurnEnd(false);\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(toAnimQueue){\t\t\t\t\r\n\t\t\t\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tevent.appear();\r\n\t\t\t\t\t\t\t$gameMap.setEventImages();\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tshipCtr++;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.deployActor = function(actor_unit, event, toAnimQueue, subId) {\r\n\t\t\tvar _this = this;\r\n\t\t\tactor_unit.event = event;\r\n\t\t\t_this.pushSrpgAllActors(event.eventId());\r\n\t\t\tevent.isDeployed = true;\r\n\t\t\tvar bitmap = ImageManager.loadFace(actor_unit.faceName()); //顔グラフィックをプリロードする\r\n\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t$gameVariables.setValue(_existActorVarID, oldValue + 1);\r\n\t\t\t_this.setEventToUnit(event.eventId(), 'actor', actor_unit.actorId());\r\n\t\t\tactor_unit.isSubPilot = false;\r\n\t\t\t\r\n\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t\r\n\t\t\t$statCalc.applyDeployActions(actor_unit.SRWStats.pilot.id, actor_unit.SRWStats.mech.id);\r\n\t\t\t\r\n\t\t\t$statCalc.applyBattleStartWill(actor_unit);\r\n\t\t\tactor_unit.SRPGActionTimesSet($statCalc.applyStatModsToValue(actor_unit, 1, [\"extra_action\"]));\r\n\t\t\tactor_unit.setSrpgTurnEnd(false);\t\r\n\t\t\tactor_unit.setBattleMode(\"\");\r\n\r\n\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: event.posX(), y: event.posY()}, null, event.eventId());\r\n\t\t\tevent.locate(position.x, position.y);\r\n\t\t\t\r\n\t\t\tif(!$gameTemp.enemyAppearQueue){\r\n\t\t\t\t$gameTemp.enemyAppearQueue = [];\r\n\t\t\t}\t\r\n\t\t\tif(toAnimQueue){\t\t\t\t\r\n\t\t\t\t$gameTemp.enemyAppearQueue.push(event);\r\n\t\t\t\tevent.erase();\r\n\t\t\t\tevent.isPendingDeploy = true;\r\n\t\t\t} else {\r\n\t\t\t\tevent.appear();\r\n\t\t\t\t//event.refreshImage();\r\n\t\t\t\t$gameMap.setEventImages();\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*var deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\tvar currentSlot = -1;\r\n\t\t\tvar currentMaxSlot = -1;\r\n\t\t\t\r\n\t\t\tObject.keys(deployInfo.assigned).forEach(function(slot){\r\n\t\t\t\tif(slot > currentMaxSlot){\r\n\t\t\t\t\tcurrentMaxSlot = slot;\r\n\t\t\t\t}\r\n\t\t\t\tif(deployInfo.assigned[slot] == actor_unit.actorId()){\r\n\t\t\t\t\tcurrentSlot = slot;\r\n\t\t\t\t}\r\n\t\t\t});\t\t\r\n\t\t\tif(currentSlot == -1){\r\n\t\t\t\tdeployInfo.assigned[currentMaxSlot+1] = actor_unit.actorId();\r\n\t\t\t}\r\n\t\t\t$gameSystem.setDeployInfo(deployInfo);*/\r\n\t\t\t\r\n\t\t\tif(subId != null){\r\n\t\t\t\tactor_unit.subTwinId = subId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t$statCalc.initSRWStats(actor_unit);\r\n\t\t\t$statCalc.updateFlightState(actor_unit);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getEventDeploySlot = function(event) {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!this.eventToDeploySlot){\r\n\t\t\t\tthis.eventToDeploySlot = {};\r\n\t\t\t\tvar i = 0;\r\n\t\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\t\tif(event.isType() === 'actor') {\r\n\t\t\t\t\t\t_this.eventToDeploySlot[event.eventId()] = i++;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn this.eventToDeploySlot[event.eventId()];\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.highlightDeployTiles = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!$gameSystem.highlightedTiles){\r\n\t\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t}\r\n\t\t\tthis.removeDeployTileHighlights();\r\n\t\t\t$gameTemp.currentDeployTileHighlights = [];\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar i = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif(event.isType() === 'actor') {\r\n\t\t\t\t\tif(i == $gameTemp.currentSwapSource){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"#00FF00\"});\r\n\t\t\t\t\t} else if(deployInfo.lockedSlots[i]){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"yellow\"});\r\n\t\t\t\t\t} else if(deployInfo.assigned[i] && !$statCalc.canStandOnTile($gameActors.actor(deployInfo.assigned[i]), {x: event.posX(), y: event.posY()})){\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"red\"});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$gameSystem.highlightedTiles.push({x: event.posX(), y: event.posY(), color: \"white\"});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.currentDeployTileHighlights.push({x: event.posX(), y: event.posY()});\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t}\t\r\n\t\t\r\n\t\tGame_System.prototype.removeDeployTileHighlights = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif($gameTemp.currentDeployTileHighlights && $gameSystem.highlightedTiles){\r\n\t\t\t\tvar tileLookup = {};\r\n\t\t\t\t$gameTemp.currentDeployTileHighlights.forEach(function(coords){\r\n\t\t\t\t\tif(!tileLookup[coords.x]){\r\n\t\t\t\t\t\ttileLookup[coords.x] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttileLookup[coords.x][coords.y] = true;\r\n\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tvar tmp = [];\r\n\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\t\tif(!tileLookup[$gameSystem.highlightedTiles[i].x] || !tileLookup[$gameSystem.highlightedTiles[i].x][$gameSystem.highlightedTiles[i].y]){\r\n\t\t\t\t\t\ttmp.push($gameSystem.highlightedTiles);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.highlightedTiles = tmp;\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.undeployActors = function(){\r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t\t$gameMap.events().forEach(function(event) {\t\t\t\r\n\t\t\t\tif (event.isType() === 'actor') {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t\tevent.erase();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.redeployActors = function(validatePositions){                                                                                                                                                                                                                             \r\n\t\t\t$gameVariables.setValue(_existActorVarID, 0);\r\n\t\t\t$gameSystem.clearSrpgAllActors();\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor') {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t}\r\n\t\t\t });\r\n\t\t\t this.deployActors(false, $gameTemp.manualDeployType, validatePositions);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.redeployActor = function(actorId, toAnimQueue){  \r\n\t\t\tvar actor = $gameActors.actor(actorId);\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.eventId() === actor.event.eventId()) {\r\n\t\t\t\t\t$gameSystem.clearEventToUnit(event.eventId());\r\n\t\t\t\t\tevent.isDeployed = false;\r\n\t\t\t\t\tvar oldValue = $gameVariables.value(_existActorVarID);\r\n\t\t\t\t\t$gameVariables.setValue(_existActorVarID, oldValue - 1);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.deployActor(actor, actor.event, toAnimQueue);\r\n\t\t\tactor.initImages(actor.SRWStats.mech.classData.meta.srpgOverworld.split(\",\"));\r\n\t\t\tif(!toAnimQueue){\r\n\t\t\t\tactor.event.refreshImage();\r\n\t\t\t}\t\t \r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.deployActors = function(toAnimQueue, lockedOnly, validatePositions) {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(lockedOnly == null){\r\n\t\t\t\tlockedOnly = \"all\";\r\n\t\t\t}\r\n\t\t\tvar deployInfo = _this.getDeployInfo();\r\n\t\t\tvar deployList = _this.getActiveDeployList();\r\n\t\t\tvar i = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actor' && !event.isDeployed) {\r\n\t\t\t\t\tvar actor_unit;\r\n\t\t\t\t\tvar entry = deployList[i] || {};\r\n\t\t\t\t\tvar actorId =entry.main;\t\t\r\n\t\t\t\t\tif(lockedOnly == \"all\" || (lockedOnly == \"locked\" && deployInfo.lockedSlots[i]) || (lockedOnly == \"unlocked\" && !deployInfo.lockedSlots[i])){\r\n\t\t\t\t\t\tif(typeof actorId != \"undefined\"){\r\n\t\t\t\t\t\t\tactor_unit = $gameActors.actor(actorId);\r\n\t\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\t\tif (actor_unit) {\r\n\t\t\t\t\t\t\tvar validPosition;\r\n\t\t\t\t\t\t\tif(validatePositions && !deployInfo.lockedSlots[i]){\r\n\t\t\t\t\t\t\t\tvalidPosition = $statCalc.canStandOnTile(actor_unit, {x: event.posX(), y: event.posY()})\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvalidPosition = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(validPosition){\r\n\t\t\t\t\t\t\t\t_this.deployActor(actor_unit, event, toAnimQueue, entry.sub);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tevent.erase();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\r\n\t\t\t\t\t\r\n\t\t\t\t\ti++;\t\r\n\t\t\t\t}\t\t\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\t// イベントのメモからエネミーを読み込み、対応するイベントＩＤに紐づけする\r\n\t\tGame_System.prototype.setSrpgEnemys = function() {\r\n\t\t\t$gameVariables.setValue(_existEnemyVarID, 0);\r\n\t\t\t$gameVariables.setValue(_enemiesDestroyed, 0);\r\n\t\t\tvar i = 0;\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemy') {\r\n\t\t\t\t\tvar enemyId = event.event().meta.id ? Number(event.event().meta.id) : 1;\r\n\t\t\t\t\tvar enemy_unit = new Game_Enemy(enemyId, 0, 0);\t\t\t\t\r\n\t\t\t\t\tenemy_unit._mechClass = parseInt(event.event().meta.mechClass)\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (enemy_unit) {\r\n\t\t\t\t\t\tenemy_unit.event = event;\r\n\t\t\t\t\t\tif (event.event().meta.mode) {\r\n\t\t\t\t\t\t\tenemy_unit.setBattleMode(event.event().meta.mode);\r\n\t\t\t\t\t\t\tif (event.event().meta.targetId) {\r\n\t\t\t\t\t\t\t\tenemy_unit.setTargetId(event.event().meta.targetId);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tenemy_unit.initTp(); //TPを初期化\r\n\t\t\t\t\t\tvar faceName = enemy_unit.enemy().meta.faceName; //顔グラフィックをプリロードする\r\n\t\t\t\t\t\tif (faceName) {\r\n\t\t\t\t\t\t\tvar bitmap = ImageManager.loadFace(faceName);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif ($gameSystem.isSideView()) {\r\n\t\t\t\t\t\t\t\tvar bitmap = ImageManager.loadSvEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar bitmap = ImageManager.loadEnemy(enemy_unit.battlerName(), enemy_unit.battlerHue());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar oldValue = $gameVariables.value(_existEnemyVarID);\r\n\t\t\t\t\t\t$gameVariables.setValue(_existEnemyVarID, oldValue + 1);\r\n\t\t\t\t\t\t$gameSystem.setEventToUnit(event.eventId(), 'enemy', enemy_unit);\r\n\t\t\t\t\t\t$statCalc.initSRWStats(enemy_unit);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//２イベント間の距離を返す\r\n\t\tGame_System.prototype.unitDistance = function(event1, event2) {\r\n\t\t\tvar minDisX = Math.abs(event1.posX() - event2.posX());\r\n\t\t\tvar minDisY = Math.abs(event1.posY() - event2.posY());\r\n\t\t\tif ($gameMap.isLoopHorizontal() == true) {\r\n\t\t\t\tvar event1X = event1.posX() > event2.posX() ? event1.posX() - $gameMap.width() : event1.posX() + $gameMap.width();\r\n\t\t\t\tvar disX = Math.abs(event1X - event2.posX());\r\n\t\t\t\tminDisX = minDisX < disX ? minDisX : disX;\r\n\t\t\t}\r\n\t\t\tif ($gameMap.isLoopVertical() == true) {\r\n\t\t\t\tvar event1Y = event1.posY() > event2.posY() ? event1.posY() - $gameMap.height() : event1.posY() + $gameMap.height();\r\n\t\t\t\tvar disY = Math.abs(event1Y - event2.posY());\r\n\t\t\t\tminDisY = minDisY < disY ? minDisY : disY;\r\n\t\t\t}\r\n\t\t\treturn minDisX + minDisY;\r\n\t\t};\r\n\r\n\t//戦闘終了に関係する処理\r\n\t\t//戦闘終了するためのプラグイン・コマンド\r\n\t\tGame_System.prototype.endSRPG = function() {\r\n\t\t\t$gameTemp.clearActiveEvent();\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tif (_srpgBattleEndAllHeal == 'true') {\r\n\t\t\t\t\t\tbattlerArray[1].recoverAll();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbattlerArray[1].onTurnEnd();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._SRPGMode = false;\r\n\t\t\t$gameSwitches.setValue(_srpgBattleSwitchID, false);\r\n\t\t\tthis._isBattlePhase = 'initialize';\r\n\t\t\tthis._isSubBattlePhase = 'initialize';\r\n\t\t\t$gamePlayer.refresh();\r\n\t\t\tthis.clearData(); //データの初期化\r\n\t\t\t$gameMap.setEventImages();   // ユニットデータに合わせてイベントのグラフィックを変更する\r\n\t\t\t\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t\tSceneManager._scene.createPauseWindow(); //ensure pause menu is updated to reflect the new mode\r\n\t\t};\r\n\r\n\t//戦闘の進行に関係する処理\r\n\t\t// 戦闘開始時のイベントを起動する\r\n\t\tGame_System.prototype.runBattleStartEvent = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'battleStart') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.runAfterDeployEvent = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'afterDeploy') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(R)\r\n\t\tGame_System.prototype.getNextRActor = function() {\r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\");\r\n\t\t\tthis.actorLRId++;\r\n\t\t\tif(this.actorLRId >= candidates.length){\r\n\t\t\t\tthis.actorLRId = 0;\r\n\t\t\t}\r\n\t\t\tvar candidate = candidates[this.actorLRId];\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \r\n\t\t}\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(L)\r\n\t\tGame_System.prototype.getNextLActor = function() {       \r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"actor\");\r\n\t\t\tthis.actorLRId--;\r\n\t\t\tif(this.actorLRId < 0){\r\n\t\t\t\tthis.actorLRId = candidates.length-1;\r\n\t\t\t}\r\n\t\t\tvar candidate = candidates[this.actorLRId];\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}        \r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isValidAttackTarget = function(candidate){\r\n\t\t\tvar actionBattlerArray = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId());\r\n\t\t\tvar targetBattlerArray = $gameSystem.EventToUnit(candidate.event.eventId());\r\n\t\t   \r\n\t\t\tvar isInRange = $battleCalc.isTargetInRange({x: $gameTemp.activeEvent()._x, y: $gameTemp.activeEvent()._y}, {x: candidate.event.posX(), y: candidate.event.posY()}, $statCalc.getRealWeaponRange(actionBattlerArray[1], $gameTemp.actorAction.attack), $gameTemp.actorAction.attack.minRange);\r\n\t\t\tvar validTarget = $statCalc.canUseWeapon(actionBattlerArray[1], $gameTemp.actorAction.attack, false, targetBattlerArray[1]);\r\n\t\t\t\r\n\t\t\treturn isInRange && validTarget;\r\n\t\t}                               \r\n\t\t\r\n\t\tGame_System.prototype.getNextRTarget = function() {\r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetLRId++;\r\n\t\t\t\tif(this.targetLRId >= candidates.length){\r\n\t\t\t\t\tthis.targetLRId = 0;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.isValidAttackTarget(candidates[this.targetLRId])){\r\n\t\t\t\t\tcandidate = candidates[this.targetLRId];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \r\n\t\t}\r\n\r\n\t\t//次のカーソル移動先のアクターを取得する(L)\r\n\t\tGame_System.prototype.getNextLTarget = function() {       \r\n\t\t\tvar candidates =  $statCalc.getAllCandidates(\"enemy\");\r\n\t\t\tvar candidate;\r\n\t\t\tvar ctr = 0;\r\n\t\t\twhile(ctr < candidates.length && !candidate){\r\n\t\t\t\tthis.targetLRId--;\r\n\t\t\t\tif(this.targetLRId < 0){\r\n\t\t\t\t\tthis.targetLRId = candidates.length-1;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.isValidAttackTarget(candidates[this.targetLRId])){\r\n\t\t\t\t\tcandidate = candidates[this.targetLRId];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(candidate){\r\n\t\t\t\t$gamePlayer.locate(candidate.pos.x, candidate.pos.y);\r\n\t\t\t}  \t\t\r\n\t\t}\r\n\r\n\t\t//アクターターンの開始\r\n\t\tGame_System.prototype.srpgStartActorTurn = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\t$gameTemp.currentFaction = -1;\r\n\t\t\t$songManager.playStageSong();\r\n\t\t\tthis.aliveActorIdList = [];\r\n\t\t\tthis.actorLRId = 0;\r\n\t\t\tthis.targetLRId = 0;\r\n\t\t\tvar spiritActivations = [];\r\n\t\t\tvar AIActors = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'actorTurn') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'actor' && battlerArray[1].isAlive() && !event.isErased()) {\r\n\t\t\t\t\t$gameSystem.aliveActorIdList.push(event.eventId());\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet($statCalc.applyStatModsToValue(battlerArray[1], 1, [\"extra_action\"]));\r\n\t\t\t\t\tvar SPRegen = 0;\r\n\t\t\t\t\tSPRegen = $statCalc.applyStatModsToValue(battlerArray[1], SPRegen, [\"SP_regen\"]);\r\n\t\t\t\t\tif(ENGINE_SETTINGS.VXT_SP){\r\n\t\t\t\t\t\tSPRegen+=5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(ENGINE_SETTINGS.DEFAULT_SP_REGEN){\r\n\t\t\t\t\t\tSPRegen+=ENGINE_SETTINGS.DEFAULT_SP_REGEN;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($gameVariables.value(_turnVarID) != 1){\r\n\t\t\t\t\t\t$statCalc.recoverSP(battlerArray[1], SPRegen);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar autoSpirits = $statCalc.getModDefinitions(battlerArray[1], [\"auto_spirit\"]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tautoSpirits.forEach(function(autoSpirit){\t\t\r\n\t\t\t\t\t\t$statCalc.setAbilityUsed(battlerArray[1], \"auto_spirit_\"+autoSpirit.stackId);\r\n\t\t\t\t\t\tspiritActivations.push({actor: battlerArray[1], spirit: autoSpirit.value});\t\t\t\t\r\n\t\t\t\t\t});\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($statCalc.isAI(battlerArray[1])){\r\n\t\t\t\t\t\tAIActors.push(event);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'enemy' && battlerArray[1].isAlive()) {\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet(1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"strike\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"wall\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"focus\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"disrupt\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"analyse\");\r\n\t\t\t$statCalc.clearTempEffectOnAll(\"actor\", \"victory_turn\");\r\n\t\t\t$statCalc.resetAllBattleTemp();\r\n\t\t\t$statCalc.resetAllStatus(\"enemy\");\r\n\t\t\tif($gameVariables.value(_turnVarID) != 1){\r\n\t\t\t\t$statCalc.applyTurnStartWill(\"actor\");\r\n\t\t\t}\r\n\t\t\t$statCalc.applyENRegen(\"actor\");\r\n\t\t\t$statCalc.applyAmmoRegen(\"actor\");\r\n\t\t\t$statCalc.applyHPRegen(\"actor\");\r\n\t\t\tthis.aliveActorIdList.sort(function(a, b) {\r\n\t\t\t\treturn a - b;\r\n\t\t\t});\r\n\t\t\tvar actor1 = $gameMap.event(this.aliveActorIdList[0]);\r\n\t\t\tif (actor1) {\r\n\t\t\t\t$gamePlayer.locate(actor1.posX(), actor1.posY());\r\n\t\t\t}\r\n\t\t\t$gameTemp.autoSpirits = spiritActivations;\r\n\t\t\t$gameTemp.autoSpiritsDelay = 150;\r\n\t\t\t\r\n\t\t\t_this.setBattlePhase('actor_phase');\r\n\t\t\t\r\n\t\t\t$gameTemp.AIActors = AIActors;\r\n\t\t\tif(spiritActivations.length){\t\t\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('auto_spirits');\r\n\t\t\t} else if($gameTemp.AIActors.length){\r\n\t\t\t\t_this.setBattlePhase('AI_phase');\r\n\t\t\t\t_this.setSubBattlePhase('enemy_command');\r\n\t\t\t} else {\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('initialize');\r\n\t\t\t}\t\r\n\t\t};\r\n\r\n\t\t//自動行動アクターターンの開始\r\n\t\tGame_System.prototype.srpgStartAutoActorTurn = function() {\r\n\t\t\tthis.setBattlePhase('auto_actor_phase');\r\n\t\t\tthis.setSubBattlePhase('auto_actor_command');\r\n\t\t};\r\n\r\n\t\t//エネミーターンの開始\r\n\t\tGame_System.prototype.srpgStartEnemyTurn = function(factionId) {\r\n\t\t\tvar _this = this;\r\n\t\t\t$statCalc.invalidateAbilityCache();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t$gameTemp.showAllyAttackIndicator = false;\r\n\t\t\t$gameTemp.showAllyDefendIndicator = false;\r\n\t\t\t$gameTemp.showEnemyAttackIndicator = false;\r\n\t\t\t$gameTemp.showEnemyDefendIndicator = false;\r\n\t\t\t$gameTemp.currentFaction = factionId;\r\n\t\t\tif(factionId > 2){\r\n\t\t\t\t$gameSystem.srpgTurnEnd();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!$gameSystem.factionConfig[factionId].active){\r\n\t\t\t\t$gameTemp.currentFaction++;\r\n\t\t\t\tthis.srpgStartEnemyTurn($gameTemp.currentFaction);\r\n\t\t\t\treturn;\r\n\t\t\t}\t\t\r\n\t\t\t$songManager.playStageSong();\r\n\t\t\tvar spiritActivations = [];\r\n\t\t\t$gameTemp.AIActors = [];\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'enemyTurn') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && battlerArray[0] === 'enemy' && battlerArray[1].isAlive()) {\r\n\t\t\t\t\tbattlerArray[1].SRPGActionTimesSet($statCalc.applyStatModsToValue(battlerArray[1], 1, [\"extra_action\"]));\r\n\t\t\t\t\tvar SPRegen = 0;\r\n\t\t\t\t\tSPRegen = $statCalc.applyStatModsToValue(battlerArray[1], SPRegen, [\"SP_regen\"]);\r\n\t\t\t\t\t$statCalc.recoverSP(battlerArray[1], SPRegen);\r\n\t\t\t\t\t\r\n\t\t\t\t\t$gameTemp.AIActors.push(event);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar autoSpirits = $statCalc.getModDefinitions(battlerArray[1], [\"auto_spirit\"]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tautoSpirits.forEach(function(autoSpirit){\t\r\n\t\t\t\t\t\t$statCalc.setAbilityUsed(actor, \"auto_spirit_\"+autoSpirit.stackId);\r\n\t\t\t\t\t\tspiritActivations.push({actor: battlerArray[1], spirit: autoSpirit.value});\t\t\t\t\r\n\t\t\t\t\t});\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"strike\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"wall\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"enemy\", \"focus\", factionId);\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"disrupt\");\r\n\t\t\t$statCalc.clearSpiritOnAll(\"actor\", \"analyse\");\r\n\t\t\t$statCalc.applyTurnStartWill(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyENRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyAmmoRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.applyHPRegen(\"enemy\", factionId);\r\n\t\t\t$statCalc.resetAllBattleTemp(null, factionId);\r\n\t\t\t$statCalc.resetAllStatus(\"actor\");\r\n\t\t\t$gameTemp.AIWaitTimer = 0;\r\n\t\t\t\r\n\t\t\t$gameTemp.autoSpirits = spiritActivations;\r\n\t\t\t$gameTemp.autoSpiritsDelay = 150;\r\n\t\t\t\r\n\t\t\tif(spiritActivations.length){\t\t\t\t\t\r\n\t\t\t\t_this.setSubBattlePhase('auto_spirits');\r\n\t\t\t} //else if($gameTemp.AIActors.length){\r\n\t\t\t\t_this.setBattlePhase('AI_phase');\r\n\t\t\t\t_this.setSubBattlePhase('enemy_command');\r\n\t\t\t//}\r\n\t\t\t\r\n\t\t\t//this.setSubBattlePhase('enemy_command');\r\n\t\t};\r\n\r\n\t\t//ターン終了\r\n\t\tGame_System.prototype.srpgTurnEnd = function() {\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tbattlerArray[1].onTurnEnd();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'turnEnd') {\r\n\t\t\t\t\tif (event.pageIndex() >= 0) event.start();\r\n\t\t\t\t\t$gameTemp.pushSrpgEventList(event);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.srpgTurnPlus();\r\n\t\t\tthis.srpgStartActorTurn();//アクターターンを開始する\r\n\t\t};\r\n\r\n\t\t//ターン数を増やす\r\n\t\tGame_System.prototype.srpgTurnPlus = function() {\r\n\t\t\tvar oldValue = $gameVariables.value(_turnVarID);\r\n\t\t\t$gameVariables.setValue(_turnVarID, oldValue + 1);\r\n\t\t\t\r\n\t\t\tvar oldValue = $gameVariables.value(_turnCountVariable);\r\n\t\t\t$gameVariables.setValue(_turnCountVariable, oldValue + 1);\r\n\t\t};\r\n\r\n\t//戦闘の計算に関係する処理\r\n\t\t// 移動範囲および攻撃範囲を計算・表示する\r\n\t\tGame_System.prototype.srpgMakeMoveTable = function(event) {\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(event.eventId());\r\n\t\t\t\r\n\t\t\tvar moveRange = $statCalc.getCurrentMoveRange(battlerArray[1]);\r\n\t\t\t$gameTemp.clearMoveTable();\r\n\t\t\t$gameTemp.initialMoveTable(event.posX(), event.posY(), battlerArray[1].srpgThroughTag());\r\n\t\t\tevent.makeMoveTable(event.posX(), event.posY(), moveRange, [0], battlerArray[1]);\r\n\t\t\tvar list = $gameTemp.moveList();\r\n\t\t\t\r\n\t\t\t$gameTemp.pushRangeListToMoveList();\r\n\t\t};\r\n\r\n\t\t//移動先にアクターまたはエネミーがいる場合は移動できない（重なりを避ける）\r\n\t\tGame_System.prototype.areTheyNoUnits = function(x, y, type) {\r\n\t\t\tvar flag = true;\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(event._eventId);\r\n\t\t\t\tif (battlerArray && event != $gameTemp.activeEvent() && !event.isErased() &&\r\n\t\t\t\t\tbattlerArray[0] === type || event.isType() === 'playerEvent') {\r\n\t\t\t\t\tflag = false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn flag;\r\n\t\t};\r\n\r\n\t\t//移動先にイベントユニットがあるかどうか\r\n\t\tGame_System.prototype.isThereEventUnit = function(x, y) {\r\n\t\t\tvar flag = false;\r\n\t\t\t$gameMap.eventsXy(x, y).forEach(function(event) {\r\n\t\t\t\tif (event.isType() === 'unitEvent') {\r\n\t\t\t\t\tflag = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn flag;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getTwinInfo = function() {\r\n\t\t\tif(!$gameSystem.twinInfo){\r\n\t\t\t\t$gameSystem.twinInfo = {};\r\n\t\t\t} \r\n\t\t\treturn $gameSystem.twinInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getIsTwinInfo = function() {\r\n\t\t\tif(!$gameSystem.isTwinInfo){\r\n\t\t\t\t$gameSystem.isTwinInfo = {};\r\n\t\t\t} \r\n\t\t\treturn $gameSystem.isTwinInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPreferredSlotInfo = function() {\r\n\t\t\tif(!this.preferredSlotInfo){\r\n\t\t\t\tthis.preferredSlotInfo = {};\r\n\t\t\t} \r\n\t\t\treturn this.preferredSlotInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPreferredShipSlotInfo = function() {\r\n\t\t\tif(!this.preferredShipSlotInfo){\r\n\t\t\t\tthis.preferredShipSlotInfo = {};\r\n\t\t\t} \r\n\t\t\treturn this.preferredShipSlotInfo;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.invalidateDeployList = function() {\r\n\t\t\t$gameSystem.deployList = null;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getDeployList = function() {\r\n\t\t\tif(!$gameSystem.deployList){\r\n\t\t\t\tthis.constructDeployList();\r\n\t\t\t}\r\n\t\t\treturn $gameSystem.deployList;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getShipDeployList = function() {\r\n\t\t\tif(!$gameSystem.shipDeployList){\r\n\t\t\t\tthis.constructShipDeployList();\r\n\t\t\t}\r\n\t\t\treturn $gameSystem.shipDeployList;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActiveDeployList = function() {\r\n\t\t\treturn this._activeDeploylist;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setActiveDeployList = function(list) {\r\n\t\t\tthis._activeDeploylist = list;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getActiveShipDeployList = function() {\r\n\t\t\treturn this._activeShipDeploylist;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setActiveShipDeployList = function(list) {\r\n\t\t\tthis._activeShipDeploylist = list;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.constructDeployList = function(forShips) {\r\n\t\t\t$gameSystem.deployList = [];\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tvar usedUnits = {};\r\n\t\t\tvar slotLookup = {};\r\n\t\t\t\r\n\t\t\tvar validActors = {};\r\n\t\t\tvar candidates = $gameSystem.getAvailableUnits();\t\r\n\t\t\tvar tmp = [];\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif($statCalc.isValidForDeploy(candidate) && !$statCalc.isShip(candidate)){\r\n\t\t\t\t\tvalidActors[candidate.actorId()] = true;\r\n\t\t\t\t\ttmp.push(candidate);\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\tcandidates = tmp;\r\n\t\t\t\r\n\t\t\tvar sortedCandidates = [];\r\n\t\t\tvar usedActors = {};\r\n\t\t\tvar preferredSlotInfo = this.getPreferredSlotInfo();\r\n\t\t\tObject.keys(preferredSlotInfo).forEach(function(slot){\r\n\t\t\t\tvar info = preferredSlotInfo[slot];\t\t\t\r\n\t\t\t\tvar entry = {\r\n\t\t\t\t\tmain: null,\r\n\t\t\t\t\tsub: null\r\n\t\t\t\t};\r\n\t\t\t\tisValid = false;\r\n\t\t\t\tif(info.main != -1 && validActors[info.main]){\r\n\t\t\t\t\tentry.main = info.main;\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tusedActors[entry.main] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(info.sub != -1 && validActors[info.sub]){\r\n\t\t\t\t\tentry.sub = info.sub;\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tusedActors[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(isValid){\r\n\t\t\t\t\tsortedCandidates.push(entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\ttmp.forEach(function(candidate){\r\n\t\t\t\tif(!usedActors[candidate.actorId()]){\r\n\t\t\t\t\tsortedCandidates.push({\r\n\t\t\t\t\t\tmain: candidate.actorId(),\r\n\t\t\t\t\t\tsub: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(sortedCandidates.length){\t\r\n\t\t\t\tvar entry = {};\r\n\t\t\t\tif(i < deployInfo.count){\t\t\t\t\r\n\t\t\t\t\tvar isPredefined = false;\r\n\t\t\t\t\tif(deployInfo.assigned[i] && validActors[deployInfo.assigned[i]]){\r\n\t\t\t\t\t\tentry.main = deployInfo.assigned[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(deployInfo.assignedSub[i] && validActors[deployInfo.assigned[i]]){\r\n\t\t\t\t\t\tentry.sub = deployInfo.assignedSub[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!isPredefined){\r\n\t\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t\t} \t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.main]){\r\n\t\t\t\t\tentry.main = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.sub]){\r\n\t\t\t\t\tentry.sub = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(entry.main || entry.sub){\r\n\t\t\t\t\t$gameSystem.deployList.push(entry);\t\t\t\t\t\t\t\r\n\t\t\t\t\tusedUnits[entry.main] = true;\r\n\t\t\t\t\tusedUnits[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.constructShipDeployList = function() {\r\n\t\t\t$gameSystem.shipDeployList = [];\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tvar usedUnits = {};\r\n\t\t\t\r\n\t\t\tvar validActors = {};\r\n\t\t\tvar candidates = $gameSystem.getAvailableUnits();\t\r\n\t\t\tvar tmp = [];\r\n\t\t\tcandidates.forEach(function(candidate){\r\n\t\t\t\tif($statCalc.isValidForDeploy(candidate) && $statCalc.isShip(candidate)){\r\n\t\t\t\t\tvalidActors[candidate.actorId()] = true;\r\n\t\t\t\t\ttmp.push(candidate);\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\tcandidates = tmp;\r\n\t\t\t\r\n\t\t\tvar sortedCandidates = [];\r\n\t\t\tvar usedActors = {};\r\n\t\t\tvar preferredSlotInfo = this.getPreferredShipSlotInfo();\r\n\t\t\tObject.keys(preferredSlotInfo).forEach(function(slot){\r\n\t\t\t\tvar info = preferredSlotInfo[slot];\t\t\t\r\n\t\t\t\tvar entry = {\r\n\t\t\t\t\tmain: null,\r\n\t\t\t\t\tsub: null\r\n\t\t\t\t};\r\n\t\t\t\tisValid = false;\r\n\t\t\t\tif(info.main != -1 && validActors[info.main]){\r\n\t\t\t\t\tentry.main = info.main;\r\n\t\t\t\t\tisValid = true;\r\n\t\t\t\t\tusedActors[entry.main] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(isValid){\r\n\t\t\t\t\tsortedCandidates.push(entry);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\ttmp.forEach(function(candidate){\r\n\t\t\t\tif(!usedActors[candidate.actorId()]){\r\n\t\t\t\t\tsortedCandidates.push({\r\n\t\t\t\t\t\tmain: candidate.actorId(),\r\n\t\t\t\t\t\tsub: null\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\t\r\n\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tvar i = 0;\r\n\t\t\twhile(sortedCandidates.length){\t\r\n\t\t\t\tvar entry = {};\r\n\t\t\t\tif(i < deployInfo.shipCount){\t\t\t\t\r\n\t\t\t\t\tvar isPredefined = false;\r\n\t\t\t\t\tif(deployInfo.assignedShips[i] && validActors[deployInfo.assignedShips[i]]){\r\n\t\t\t\t\t\tentry.main = deployInfo.assignedShips[i];\r\n\t\t\t\t\t\tisPredefined = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!isPredefined){\r\n\t\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t\t} \t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tentry = sortedCandidates.pop();\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.main]){\r\n\t\t\t\t\tentry.main = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(usedUnits[entry.sub]){\r\n\t\t\t\t\tentry.sub = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(entry.main || entry.sub){\r\n\t\t\t\t\t$gameSystem.shipDeployList.push(entry);\t\t\t\t\t\t\t\r\n\t\t\t\t\tusedUnits[entry.main] = true;\r\n\t\t\t\t\tusedUnits[entry.sub] = true;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.syncPreferredSlots = function() {\r\n\t\t\tvar deployInfo = this.getDeployList();\r\n\t\t\tthis.preferredSlotInfo = {};\r\n\t\t\tfor(var i = 0; i < deployInfo.length; i++){\r\n\t\t\t\tthis.preferredSlotInfo[i] = deployInfo[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getDeployInfo = function() {\r\n\t\t\tvar info = $gameVariables.value(_nextMapDeployVariable);\r\n\t\t\tif(!info){\r\n\t\t\t\tinfo = {\r\n\t\t\t\t\tcount: 0,\r\n\t\t\t\t\tshipCount: 0,\r\n\t\t\t\t\tassigned: {},\r\n\t\t\t\t\tassignedSub: {},\r\n\t\t\t\t\tassignedShips: {},\r\n\t\t\t\t\tlockedSlots: {},\t\t\r\n\t\t\t\t\tlockedShipSlots: {},\t\r\n\t\t\t\t\tfavorites: {}\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tinfo = JSON.parse(info);\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.setDeployInfo = function(info) {\r\n\t\t\tthis.invalidateDeployList();\r\n\t\t\t$gameVariables.setValue(_nextMapDeployVariable, JSON.stringify(info));\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.clearActorDeployInfo = function(actorId) {\r\n\t\t\tvar deployInfo = this.getDeployInfo();\r\n\t\t\tObject.keys(deployInfo.assigned).forEach(function(slot){\r\n\t\t\t\tif(deployInfo.assigned[slot] == actorId){\r\n\t\t\t\t\tdelete deployInfo.assigned[slot];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.setDeployInfo(deployInfo);\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getPersuadeOption = function(actor) {\r\n\t\t\tif(this.persuadeOptions && actor.isActor()){\r\n\t\t\t\tvar lookup = this.persuadeOptions[actor.actorId()];\r\n\t\t\t\tif(lookup){\r\n\t\t\t\t\tvar event = actor.event;\r\n\t\t\t\t\tvar position = {x: event.posX(), y: event.posY()};\r\n\t\t\t\t\tvar adjacentEvents = $statCalc.getAdjacentEvents(null, position);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar option;\r\n\t\t\t\t\tvar ctr = 0;\r\n\t\t\t\t\twhile(!option && ctr < adjacentEvents.length){\r\n\t\t\t\t\t\tvar eventId = adjacentEvents[ctr].eventId();\r\n\t\t\t\t\t\tif(lookup[eventId] != null){\r\n\t\t\t\t\t\t\toption = {eventId: eventId, controlVar: lookup[eventId]};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tctr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn option;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t} \r\n\t\t\treturn null;\t\t\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.getUnitSceneBgId = function(actor) {\r\n\t\t\tif($gameTemp.editMode){\r\n\t\t\t\treturn $SRWEditor.getBattleEnvironmentId();\r\n\t\t\t} else {\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\tvar region = $gameMap.regionId(event.posX(), event.posY());\r\n\t\t\t\tif($statCalc.isFlying(actor)){\r\n\t\t\t\t\tif($gameSystem.regionSkyBattleEnv[region] != null){\r\n\t\t\t\t\t\treturn $gameSystem.regionSkyBattleEnv[region];\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($gameSystem.skyBattleEnv){\r\n\t\t\t\t\t\treturn $gameSystem.skyBattleEnv;\r\n\t\t\t\t\t} \r\n\t\t\t\t} \r\n\t\t\t\tif($gameSystem.regionBattleEnv[region] != null){\r\n\t\t\t\t\treturn $gameSystem.regionBattleEnv[region];\r\n\t\t\t\t}\r\n\t\t\t\treturn $gameSystem.defaultBattleEnv;\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_System.prototype.validateAbilityLockInfo = function(actorId, abilityId) {\r\n\t\t\tif(!this.abilityLockInfo){\r\n\t\t\t\tthis.abilityLockInfo = {\r\n\t\t\t\t\tactor: {},\r\n\t\t\t\t\tmech: {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityStatus = function(abilityInfo, id, abilityId, status) {\r\n\t\t\t//status: hidden, locked, \"\"\r\n\t\t\tif(!abilityInfo[id]){\r\n\t\t\t\tabilityInfo[id] = {};\r\n\t\t\t}\r\n\t\t\tabilityInfo[id][abilityId] = status;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAbilityStatus = function(abilityInfo, id, abilityId) {\r\n\t\t\t//status: hidden, locked, \"\"\t\t\r\n\t\t\tvar result = \"\";\r\n\t\t\tif(abilityInfo[id] && abilityInfo[id][abilityId]){\r\n\t\t\t\tresult = abilityInfo[id][abilityId];\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setPilotAbilityStatus = function(actorId, abilityId, status) {\t\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\tthis.setAbilityStatus(this.abilityLockInfo.actor, actorId, abilityId, status);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getPilotAbilityStatus = function(actorId, abilityId) {\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\treturn this.getAbilityStatus(this.abilityLockInfo.actor, actorId, abilityId);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isHiddenActorAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\tvar status = this.getPilotAbilityStatus(actor.actorId(), abilityId);\r\n\t\t\t\tresult = status == \"hidden\" || status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isLockedActorAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\tvar status = this.getPilotAbilityStatus(actor.actorId(), abilityId);\r\n\t\t\t\tresult = status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setMechAbilityStatus = function(mechId, abilityId, status) {\t\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\tthis.setAbilityStatus(this.abilityLockInfo.mech, mechId, abilityId, status);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getMechAbilityStatus = function(mechId, abilityId) {\t\r\n\t\t\tthis.validateAbilityLockInfo();\r\n\t\t\treturn this.getAbilityStatus(this.abilityLockInfo.mech, mechId, abilityId);\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isHiddenMechAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.SRWStats && actor.SRWStats.mech){\r\n\t\t\t\tvar status = this.getMechAbilityStatus(actor.SRWStats.mech.id, abilityId);\r\n\t\t\t\tresult = status == \"hidden\" || status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isLockedMechAbility = function(actor, abilityId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(actor.SRWStats && actor.SRWStats.mech){\r\n\t\t\t\tvar status = this.getMechAbilityStatus(actor.SRWStats.mech.id, abilityId);\r\n\t\t\t\tresult = status == \"locked\";\r\n\t\t\t}\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.validateTransformationLockInfo = function() {\r\n\t\t\tif(!this.transformationLockInfo){\r\n\t\t\t\tthis.transformationLockInfo = {}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.isTransformationLocked = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(this.transformationLockInfo[mechId]){\r\n\t\t\t\treturn this.transformationLockInfo[mechId][index];\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.lockTransformation = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(!this.transformationLockInfo[mechId]){\r\n\t\t\t\tthis.transformationLockInfo[mechId] = {};\r\n\t\t\t}\r\n\t\t\tthis.transformationLockInfo[mechId][index] = true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.lockAllTransformations = function() {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tfor(var i = 1; i < $dataClasses.length; i++){\r\n\t\t\t\tvar mechProperties = $dataClasses[i].meta;\r\n\t\t\t\tvar transformsInto;\r\n\t\t\t\ttransformsInto = mechProperties.mechTransformsInto * 1 || -1;\t\r\n\t\t\t\tif(transformsInto == -1 && mechProperties.mechTransformsInto != null){\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\ttransformsInto = JSON.parse(mechProperties.mechTransformsInto);\r\n\t\t\t\t\t} catch(e){\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(transformsInto && transformsInto != -1){\r\n\t\t\t\t\tif(!Array.isArray(transformsInto)){\r\n\t\t\t\t\t\ttransformsInto = [transformsInto];\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttransformsInto = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis.transformationLockInfo[i] = {};\r\n\t\t\t\tfor(var j = 0; j < transformsInto.length; j++){\t\t\t\t\r\n\t\t\t\t\tthis.transformationLockInfo[i][j] = true;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.unlockTransformation = function(mechId, index) {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tif(this.transformationLockInfo[mechId]){\r\n\t\t\t\tthis.transformationLockInfo[mechId][index] = false;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.unlockAllTransformations = function() {\r\n\t\t\tthis.validateTransformationLockInfo();\r\n\t\t\tfor(var i = 1; i < $dataClasses.length; i++){\r\n\t\t\t\tdelete this.transformationLockInfo[i];\r\n\t\t\t}\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tGame_System.prototype.validateAbilityUpgradesInfo = function(type) {\r\n\t\t\tif(!this.abilityUpgradesInfo){\r\n\t\t\t\tthis.abilityUpgradesInfo = {}\r\n\t\t\t}\r\n\t\t\tif(!this.abilityUpgradesInfo[type]){\r\n\t\t\t\tthis.abilityUpgradesInfo[type] = {};\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.setAbilityUpgrade = function(type, baseIdx, upgradeIdx) {\r\n\t\t\tthis.validateAbilityUpgradesInfo(type);\r\n\t\t\tthis.abilityUpgradesInfo[type][baseIdx] = upgradeIdx;\r\n\t\t}\r\n\t\t\r\n\t\tGame_System.prototype.getAbilityUpgrades = function(type) {\r\n\t\t\tthis.validateAbilityUpgradesInfo(type);\r\n\t\t\treturn this.abilityUpgradesInfo[type];\r\n\t\t}\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/GameSystem.js?");

/***/ }),

/***/ "./js/SRW Core/GameTemp.js":
/*!*********************************!*\
  !*** ./js/SRW Core/GameTemp.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// ●Game_Temp\r\n\t\t//====================================================================\r\n\t\t//初期化処理\r\n\t\tvar _SRPG_Game_Temp_initialize = Game_Temp.prototype.initialize;\r\n\t\tGame_Temp.prototype.initialize = function() {\r\n\t\t\t_SRPG_Game_Temp_initialize.call(this);\r\n\t\t\tthis._MoveTable = [];\r\n\t\t\tthis._MoveList = [];\r\n\t\t\tthis._RangeTable = [];\r\n\t\t\tthis._RangeList = [];\r\n\t\t\tthis._ResetMoveList = false;\r\n\t\t\tthis._SrpgDistance = 0;\r\n\t\t\tthis._SrpgSpecialRange = true;\r\n\t\t\tthis._ActiveEvent = null;\r\n\t\t\tthis._TargetEvent = null;\r\n\t\t\tthis._OriginalPos = [];\r\n\t\t\tthis._SrpgEventList = [];\r\n\t\t\tthis._autoMoveDestinationValid = false;\r\n\t\t\tthis._autoMoveDestinationX = -1;\r\n\t\t\tthis._autoMoveDestinationY = -1;\r\n\t\t\tthis._srpgLoadFlag = false;\r\n\t\t\tthis._srpgActorEquipFlag = false;\r\n\t\t\tthis._SrpgTurnEndFlag = false;\r\n\t\t\tthis._srpgBestSearchFlag = false;\r\n\t\t\tthis._srpgBestSearchRoute = [null, []];\r\n\t\t\tthis._srpgPriorityTarget = null;\r\n\t\t\tthis._mapButtons = {};\r\n\t\t\tthis.summariesTimeout = 0;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.killMenu = function(id) {\r\n\t\t\tif(!this.killMenus){\r\n\t\t\t\tthis.killMenus = {};\r\n\t\t\t}\r\n\t\t\tthis.killMenus[id] = true;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Temp.prototype.setMapButton = function(button) {\r\n\t\t\tthis._mapButtons[button] = true;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.clearMapButton = function(button) {\r\n\t\t\tdelete this._mapButtons[button];\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.mapButtonClicked = function(button) {\r\n\t\t\treturn this._mapButtons[button];\r\n\t\t};\r\n\t\t\r\n\t\t//移動範囲と移動経路を記録する配列変数を返す\r\n\t\tGame_Temp.prototype.MoveTable = function(x, y) {\r\n\t\t\treturn this._MoveTable[x][y];\r\n\t\t};\r\n\r\n\t\t//移動範囲を設定する\r\n\t\tGame_Temp.prototype.setMoveTable = function(x, y, move, route) {\r\n\t\t\tthis._MoveTable[x][y] = [move, route];\r\n\t\t};\r\n\r\n\t\t//攻撃射程と計算経路を記録する配列変数を返す\r\n\t\tGame_Temp.prototype.RangeTable = function(x, y) {\r\n\t\t\treturn this._RangeTable[x][y];\r\n\t\t};\r\n\r\n\t\t//攻撃射程を設定する\r\n\t\tGame_Temp.prototype.setRangeTable = function(x, y, move, route) {\r\n\t\t\tthis._RangeTable[x][y] = [move, route];\r\n\t\t};\r\n\r\n\t\t//移動可能な座標のリストを返す(移動範囲表示で使用)\r\n\t\tGame_Temp.prototype.moveList = function() {\r\n\t\t\treturn this._MoveList;\r\n\t\t};\r\n\r\n\t\t//移動可能な座標のリストに追加する\r\n\t\tGame_Temp.prototype.pushMoveList = function(xy) {\r\n\t\t\tthis._MoveList.push(xy);\r\n\t\t};\r\n\r\n\t\t//座標リストにデータが入っているか返す\r\n\t\tGame_Temp.prototype.isMoveListValid = function() {\r\n\t\t\treturn this._MoveList.length > 0;\r\n\t\t};\r\n\r\n\t\t//攻撃可能な座標のリストを返す(攻撃射程表示で使用)\r\n\t\tGame_Temp.prototype.rangeList = function() {\r\n\t\t\treturn this._RangeList;\r\n\t\t};\r\n\r\n\t\t//攻撃可能な座標のリストに追加する\r\n\t\tGame_Temp.prototype.pushRangeList = function(xy) {\r\n\t\t\tthis._RangeList.push(xy);\r\n\t\t};\r\n\r\n\t\t//移動範囲の配列に射程範囲の配列を結合する\r\n\t\tGame_Temp.prototype.pushRangeListToMoveList = function(array) {\r\n\t\t\tArray.prototype.push.apply(this._MoveList, this._RangeList);\r\n\t\t};\r\n\r\n\t\t//射程範囲から最低射程を除く\r\n\t\tGame_Temp.prototype.minRangeAdapt = function(oriX, oriY, minRange) {\r\n\t\t\tvar newList = [];\r\n\t\t\tfor (var i = 0; i < this._RangeList.length; i++) {\r\n\t\t\t\tvar x = this._RangeList[i][0];\r\n\t\t\t\tvar y = this._RangeList[i][1];\r\n\t\t\t\tvar dis = Math.abs(x - oriX) + Math.abs(y - oriY);\r\n\t\t\t\tif (dis >= minRange) {\r\n\t\t\t\t\tnewList.push(this._RangeList[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._RangeList = [];\r\n\t\t\tthis._RangeList = newList;\r\n\t\t};\r\n\r\n\t\t//移動範囲を初期化する\r\n\t\tGame_Temp.prototype.clearMoveTable = function() {\r\n\t\t\t$gameTemp.validTiles = {};\r\n\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t$gameTemp.disableHighlightGlow = false;\r\n\t\t\tthis._MoveTable = [];\r\n\t\t\tthis._MoveList = [];\r\n\t\t\tfor (var i = 0; i < $dataMap.width; i++) {\r\n\t\t\t  var vartical = [];\r\n\t\t\t  for (var j = 0; j < $dataMap.height; j++) {\r\n\t\t\t\tvartical[j] = [-1, []];\r\n\t\t\t  }\r\n\t\t\t  this._MoveTable[i] = vartical;\r\n\t\t\t}\r\n\t\t\tthis._RangeTable = [];\r\n\t\t\tthis._RangeList = [];\r\n\t\t\tfor (var i = 0; i < $dataMap.width; i++) {\r\n\t\t\t  var vartical = [];\r\n\t\t\t  for (var j = 0; j < $dataMap.height; j++) {\r\n\t\t\t\tvartical[j] = [-1, []];\r\n\t\t\t  }\r\n\t\t\t  this._RangeTable[i] = vartical;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//移動範囲のスプライト消去のフラグを返す\r\n\t\tGame_Temp.prototype.resetMoveList = function() {\r\n\t\t\treturn this._ResetMoveList;\r\n\t\t};\r\n\r\n\t\t//移動範囲のスプライト消去のフラグを設定する\r\n\t\tGame_Temp.prototype.setResetMoveList = function(flag) {\r\n\t\t\tthis._ResetMoveList = flag;\r\n\t\t};\r\n\r\n\t\t//自身の直下は常に歩けるようにする\r\n\t\tGame_Temp.prototype.initialMoveTable = function(oriX, oriY, oriMove) {\r\n\t\t\tthis.setMoveTable(oriX, oriY, oriMove, [0]);\r\n\t\t\tthis.pushMoveList([oriX, oriY, false]);\r\n\t\t}\r\n\r\n\t\t//自身の直下は常に攻撃射程に含める\r\n\t\tGame_Temp.prototype.initialRangeTable = function(oriX, oriY, oriMove) {\r\n\t\t\tthis.setRangeTable(oriX, oriY, oriMove, [0]);\r\n\t\t\tthis.pushRangeList([oriX, oriY, true]);\r\n\t\t}\r\n\r\n\t\t//攻撃ユニットと対象の距離を返す\r\n\t\tGame_Temp.prototype.SrpgDistance = function() {\r\n\t\t\treturn this._SrpgDistance;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象の距離を設定する\r\n\t\tGame_Temp.prototype.setSrpgDistance = function(val) {\r\n\t\t\tthis._SrpgDistance = val;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象が特殊射程内にいるかを返す\r\n\t\tGame_Temp.prototype.SrpgSpecialRange = function() {\r\n\t\t\treturn this._SrpgSpecialRange;\r\n\t\t};\r\n\r\n\t\t//攻撃ユニットと対象が特殊射程内にいるかを設定する\r\n\t\tGame_Temp.prototype.setSrpgSpecialRange = function(val) {\r\n\t\t\tthis._SrpgSpecialRange = val;\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの設定\r\n\t\tGame_Temp.prototype.activeEvent = function() {\r\n\t\t\treturn this._ActiveEvent;\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.setActiveEvent = function(event) {\r\n\t\t\tthis._ActiveEvent = event;\r\n\t\t\t$gameVariables.setValue(_activeEventID, event.eventId());\r\n\t\t\tvar actor = $gameSystem.EventToUnit(event.eventId())[1];\r\n\t\t\tif(actor.isActor()){\r\n\t\t\t\t$gameVariables.setValue(_currentActorId, actor.actorId());\r\n\t\t\t} else {\r\n\t\t\t\t$gameVariables.setValue(_currentEnemyId, actor.enemyId());\r\n\t\t\t}\t\t\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.clearActiveEvent = function() {\r\n\t\t\tthis._ActiveEvent = null;\r\n\t\t\t$gameVariables.setValue(_activeEventID, 0);\r\n\t\t};\r\n\r\n\t\t//行動対象となるユニットの設定\r\n\t\tGame_Temp.prototype.targetEvent = function() {\r\n\t\t\treturn this._TargetEvent;\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.setTargetEvent = function(event) {\r\n\t\t\tthis._TargetEvent = event;\r\n\t\t\tif (this._TargetEvent) {\r\n\t\t\t\t$gameVariables.setValue(_targetEventID, event.eventId());\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(event.eventId())[1];\r\n\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t$gameVariables.setValue(_currentActorId, actor.actorId());\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$gameVariables.setValue(_currentEnemyId, actor.enemyId());\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tGame_Temp.prototype.clearTargetEvent = function() {\r\n\t\t\tthis._TargetEvent = null;\r\n\t\t\t$gameVariables.setValue(_targetEventID, 0);\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの座標を返す\r\n\t\tGame_Temp.prototype.originalPos = function() {\r\n\t\t\treturn this._OriginalPos;\r\n\t\t};\r\n\r\n\t\t//アクティブイベントの座標を記録する\r\n\t\tGame_Temp.prototype.reserveOriginalPos = function(x, y) {\r\n\t\t\tthis._OriginalPos = [x, y];\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストを確認する\r\n\t\tGame_Temp.prototype.isSrpgEventList = function() {\r\n\t\t\treturn this._SrpgEventList.length > 0;\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストを追加する\r\n\t\tGame_Temp.prototype.pushSrpgEventList = function(event) {\r\n\t\t\tthis._SrpgEventList.push(event);\r\n\t\t};\r\n\r\n\t\t//実行待ちイベントリストの先頭を取得し、前に詰める\r\n\t\tGame_Temp.prototype.shiftSrpgEventList = function() {\r\n\t\t\tvar event = this._SrpgEventList[0];\r\n\t\t\tthis._SrpgEventList.shift();\r\n\t\t\treturn event;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動フラグを返す\r\n\t\tGame_Temp.prototype.isAutoMoveDestinationValid = function() {\r\n\t\t\treturn this._autoMoveDestinationValid;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動フラグを設定する\r\n\t\tGame_Temp.prototype.setAutoMoveDestinationValid = function(val) {\r\n\t\t\tthis._autoMoveDestinationValid = val;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を返す(X)\r\n\t\tGame_Temp.prototype.autoMoveDestinationX = function() {\r\n\t\t\treturn this._autoMoveDestinationX;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を返す(Y)\r\n\t\tGame_Temp.prototype.autoMoveDestinationY = function() {\r\n\t\t\treturn this._autoMoveDestinationY;\r\n\t\t};\r\n\r\n\t\t//プレイヤーの自動移動先を設定する\r\n\t\tGame_Temp.prototype.setAutoMoveDestination = function(x, y) {\r\n\t\t\tthis._autoMoveDestinationX = x;\r\n\t\t\tthis._autoMoveDestinationY = y;\r\n\t\t};\r\n\r\n\t\t//戦闘中にロードしたフラグを返す\r\n\t\tGame_Temp.prototype.isSrpgLoadFlag = function() {\r\n\t\t\treturn this._srpgLoadFlag;\r\n\t\t};\r\n\r\n\t\t//戦闘中にロードしたフラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgLoadFlag = function(flag) {\r\n\t\t\tthis._srpgLoadFlag = flag;\r\n\t\t};\r\n\r\n\t\t//ターン終了フラグを返す\r\n\t\tGame_Temp.prototype.isTurnEndFlag = function() {\r\n\t\t\treturn this._SrpgTurnEndFlag;\r\n\t\t};\r\n\r\n\t\t//ターン終了フラグを変更する\r\n\t\tGame_Temp.prototype.setTurnEndFlag = function(flag) {\r\n\t\t\tthis._SrpgTurnEndFlag = flag;\r\n\t\t};\r\n\r\n\t\t//オート戦闘フラグを返す\r\n\t\tGame_Temp.prototype.isAutoBattleFlag = function() {\r\n\t\t\treturn this._SrpgAutoBattleFlag;\r\n\t\t};\r\n\r\n\t\t//オート戦闘フラグを変更する\r\n\t\tGame_Temp.prototype.setAutoBattleFlag = function(flag) {\r\n\t\t\tthis._SrpgAutoBattleFlag = flag;\r\n\t\t};\r\n\r\n\t\t//アクターコマンドから装備を呼び出したフラグを返す\r\n\t\tGame_Temp.prototype.isSrpgActorEquipFlag = function() {\r\n\t\t\treturn this._srpgActorEquipFlag;\r\n\t\t};\r\n\r\n\t\t//アクターコマンドから装備を呼び出したフラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgActorEquipFlag = function(flag) {\r\n\t\t\tthis._srpgActorEquipFlag = flag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の実行フラグを返す\r\n\t\tGame_Temp.prototype.isSrpgBestSearchFlag = function() {\r\n\t\t\treturn this._srpgBestSearchFlag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の実行フラグを設定する\r\n\t\tGame_Temp.prototype.setSrpgBestSearchFlag = function(flag) {\r\n\t\t\tthis._srpgBestSearchFlag = flag;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の最適ルートを返す\r\n\t\tGame_Temp.prototype.isSrpgBestSearchRoute = function() {\r\n\t\t\treturn this._srpgBestSearchRoute;\r\n\t\t};\r\n\r\n\t\t//探索用移動範囲計算時の最適ルートを設定する\r\n\t\tGame_Temp.prototype.setSrpgBestSearchRoute = function(array) {\r\n\t\t\tthis._srpgBestSearchRoute = array;\r\n\t\t};\r\n\r\n\t\t//優先ターゲットを返す\r\n\t\tGame_Temp.prototype.isSrpgPriorityTarget = function() {\r\n\t\t\treturn this._srpgPriorityTarget;\r\n\t\t};\r\n\r\n\t\t//優先ターゲットを設定する\r\n\t\tGame_Temp.prototype.setSrpgPriorityTarget = function(event) {\r\n\t\t\tthis._srpgPriorityTarget = event;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Temp.prototype.isMapTarget = function(eventId) {\r\n\t\t\tvar result = false;\r\n\t\t\tif(this.currentMapTargets){\r\n\t\t\t\tfor(var i = 0; i < this.currentMapTargets.length; i++){\r\n\t\t\t\t\tif($statCalc.getReferenceEvent(this.currentMapTargets[i]).eventId() == eventId){\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t};\r\n\t\tGame_Temp.prototype.updatePlayerSpriteVisibility = function(id) {\r\n\t\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\t\tif(this.upperPlayerSprite){\r\n\t\t\t\t\tthis.upperPlayerSprite.show();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.lowerPlayerSprite){\r\n\t\t\t\t\tthis.lowerPlayerSprite.hide();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif(this.upperPlayerSprite){\r\n\t\t\t\t\tthis.upperPlayerSprite.hide();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.lowerPlayerSprite){\r\n\t\t\t\t\tthis.lowerPlayerSprite.show();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/GameTemp.js?");

/***/ }),

/***/ "./js/SRW Core/Map.js":
/*!****************************!*\
  !*** ./js/SRW Core/Map.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\t//====================================================================\r\n\t\t// ●Game_Map\r\n\t\t//====================================================================\r\n\t\t//アクター・エネミーデータに合わせてグラフィックを変更する\r\n\t\t\r\n\t\tvar Game_Map_prototype_initialize = Game_Map.prototype.initialize;\r\n\t\tGame_Map.prototype.initialize = function() {\r\n\t\t\tGame_Map_prototype_initialize.call(this);\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.setupEvents = function() {\r\n\t\t\tthis._events = [];\r\n\t\t\tfor (var i = 0; i < $dataMap.events.length; i++) {\r\n\t\t\t\tif ($dataMap.events[i]) {\r\n\t\t\t\t\tthis._events[i] = new Game_Event(this._mapId, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._startOfDynamicEvents = this._events.length;\r\n\t\t\tfor (var i = this._startOfDynamicEvents; i < this._startOfDynamicEvents + 100; i++) {\r\n\t\t\t\tvar event = new Game_Event(this._mapId, i);\r\n\t\t\t\tevent.isUnused = true;\r\n\t\t\t\tthis._events[i] = event;\t\t\t\r\n\t\t\t}\r\n\t\t\tthis._commonEvents = this.parallelCommonEvents().map(function(commonEvent) {\r\n\t\t\t\treturn new Game_CommonEvent(commonEvent.id);\r\n\t\t\t});\r\n\t\t\tthis.refreshTileEvents();\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.getRegionTiles = function(id) {\r\n\t\t\tif(!this._regionTilesLookup){\r\n\t\t\t\tthis._regionTilesLookup = {};\r\n\t\t\t\tfor(var i = 0; i < this.width(); i++){\r\n\t\t\t\t\tfor(var j = 0; j < this.width(); j++){\r\n\t\t\t\t\t\tvar region = this.regionId(i, j);\r\n\t\t\t\t\t\tif(!this._regionTilesLookup[region]){\r\n\t\t\t\t\t\t\tthis._regionTilesLookup[region] = [];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis._regionTilesLookup[region].push({x: i, y: j});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn this._regionTilesLookup[id] || [];\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.initSRWTileProperties = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif(!this._SRWTileProperties){\r\n\t\t\t\tthis._SRWTileProperties = {};\r\n\t\t\t}\r\n\t\t\tif(!this._SRWTileProperties[this._tilesetId]){\r\n\t\t\t\tvar regex = new RegExp(\"srwTileAttributes([0-9]+)\");\r\n\t\t\t\tvar rangeRegex = new RegExp(\"srwTileAttributes([0-9]+)\\-([0-9]+)\");\r\n\t\t\t\tthis._SRWTileProperties[this._tilesetId] = {};\r\n\t\t\t\tvar tileSetMeta = $dataTilesets[this._tilesetId].meta;\r\n\t\t\t\tObject.keys(tileSetMeta).forEach(function(key){\t\t\t\t\r\n\t\t\t\t\tvar matches = key.match(regex);\r\n\t\t\t\t\tif(matches.length){\r\n\t\t\t\t\t\t_this._SRWTileProperties[_this._tilesetId][matches[1]] = tileSetMeta[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar matches = key.match(rangeRegex);\r\n\t\t\t\t\tif(matches.length){\r\n\t\t\t\t\t\tvar startId = matches[1];\r\n\t\t\t\t\t\tvar endId = matches[2];\r\n\t\t\t\t\t\tfor(var i = startId; i < endId; i++){\r\n\t\t\t\t\t\t\t_this._SRWTileProperties[_this._tilesetId][i] = tileSetMeta[key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.getTileProperties = function(tileCoords) {\r\n\t\t\tif(this._SRWTileProperties && this._SRWTileProperties[this._tilesetId]){\r\n\t\t\t\tvar bTileId = $gameMap.tileId(tileCoords.x, tileCoords.y, 3);\r\n\t\t\t\tvar autoTileId = $gameMap.tileId(tileCoords.x, tileCoords.y, 1);\r\n\t\t\t\tvar groundTileId = $gameMap.tileId(tileCoords.x, tileCoords.y, 0);\r\n\t\t\t\t\r\n\t\t\t\tif(this._SRWTileProperties[this._tilesetId][bTileId]){\r\n\t\t\t\t\treturn this._SRWTileProperties[this._tilesetId][bTileId];\r\n\t\t\t\t} else if(this._SRWTileProperties[this._tilesetId][autoTileId]){\r\n\t\t\t\t\treturn this._SRWTileProperties[this._tilesetId][autoTileId];\r\n\t\t\t\t} else if(this._SRWTileProperties[this._tilesetId][groundTileId]){\r\n\t\t\t\t\treturn this._SRWTileProperties[this._tilesetId][groundTileId];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.getTilePropertiesAsObject = function(tileCoords) {\r\n\t\t\tvar result;\r\n\t\t\tvar string = this.getTileProperties(tileCoords);\r\n\t\t\tif(string){\r\n\t\t\t\tvar parts = string.split(\",\");\t\t\r\n\t\t\t\tresult = {\r\n\t\t\t\t\tdefense: String(parts[0]).trim()*1,\r\n\t\t\t\t\tevasion: String(parts[1]).trim()*1,\r\n\t\t\t\t\thp_regen: String(parts[2]).trim()*1,\r\n\t\t\t\t\ten_regen: String(parts[3]).trim()*1\r\n\t\t\t\t};\r\n\t\t\t}\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\r\n\t\tGame_Map.prototype.requestDynamicEvent = function() {\r\n\t\t\tvar event;\r\n\t\t\tvar ctr = this._startOfDynamicEvents;\r\n\t\t\twhile(ctr < this._events.length && !event){\r\n\t\t\t\tif(this._events[ctr].isUnused){\r\n\t\t\t\t\tevent = this._events[ctr];\r\n\t\t\t\t}\r\n\t\t\t\tctr++;\r\n\t\t\t}\r\n\t\t\tif(event){\r\n\t\t\t\tevent.isUnused = false;\r\n\t\t\t}\t\t\r\n\t\t\treturn event;\r\n\t\t};\t\r\n\t\t\r\n\t\tGame_Map.prototype.setEventImages = function() {\r\n\t\t\tthis.events().forEach(function(event) {\r\n\t\t\t\tevent.refreshImage();\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t//最大のイベントＩＤを返す\r\n\t\tGame_Map.prototype.isMaxEventId = function() {\r\n\t\t\tvar maxId = 0;\r\n\t\t\tthis.events().forEach(function(event) {\r\n\t\t\t\tif (event.eventId() > maxId) {\r\n\t\t\t\t\tmaxId = event.eventId();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn maxId;\r\n\t\t};\r\n\r\n\t\t//イベントの実行順序を変更する（実行待ちのイベントを優先する）\r\n\t\tvar _SRPG_Game_Map_setupStartingMapEvent = Game_Map.prototype.setupStartingMapEvent;\r\n\t\tGame_Map.prototype.setupStartingMapEvent = function() {\r\n\t\t\tif ($gameTemp.isSrpgEventList()) {\r\n\t\t\t\tvar event = $gameTemp.shiftSrpgEventList();\r\n\t\t\t\tif (event.isStarting()) {\r\n\t\t\t\t\tevent.clearStartingFlag();\r\n\t\t\t\t\tthis._interpreter.setup(event.list(), event.eventId());\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn _SRPG_Game_Map_setupStartingMapEvent.call(this);\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.SRPGTerrainTag = function(x, y) {\r\n\t\t\tif (this.isValid(x, y)) {\r\n\t\t\t\tvar flags = this.tilesetFlags();\r\n\t\t\t\tvar tiles = this.layeredTiles(x, y);\r\n\t\t\t\tfor (var i = 0; i < tiles.length; i++) {\r\n\t\t\t\t\tvar tag = flags[tiles[i]] >> 12;\r\n\t\t\t\t\tif (tiles[i] != 0) {\r\n\t\t\t\t\t\treturn tag;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t};\r\n\t\t\r\n\t\tGame_Map.prototype.hasStarTile = function(x, y) {\r\n\t\t\tvar flags = this.tilesetFlags();\r\n\t\t\tvar tile = this.allTiles(x, y)[0];\r\n\t\t\tif(tile != 0){\r\n\t\t\t\tvar flag = flags[tile];\r\n\t\t\t\tif ((flag & 0x10) !== 0){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t\t\r\n\t\t\t\r\n\t\tGame_Map.prototype.applyDragDistances = function(distanceX, distanceY) {\r\n\t\t\tvar lastX = this._displayX;\r\n\t\t\tthis._displayX += distanceX;\r\n\t\t\tif(this._displayX < -5){\r\n\t\t\t\tthis._displayX = -5;\r\n\t\t\t}\r\n\t\t\tif(this._displayX > this.width() + 5 - this.screenTileX()){\r\n\t\t\t\tthis._displayX = this.width() + 5 - this.screenTileX();\r\n\t\t\t}\r\n\t\t\tthis._parallaxX += this._displayX - lastX;\r\n\t\t\t\r\n\t\t\tvar lastY = this._displayY;\r\n\t\t\tthis._displayY += distanceY;\r\n\t\t\tif(this._displayY < -5){\r\n\t\t\t\tthis._displayY = -5;\r\n\t\t\t}\r\n\t\t\tif(this._displayY > this.height() + 5 - this.screenTileY()){\r\n\t\t\t\tthis._displayY = this.height() + 5 - this.screenTileY();\r\n\t\t\t}\r\n\t\t\tthis._parallaxY += this._displayY - lastY;\r\n\t\t};\t\r\n\t//====================================================================\r\n\t// ●Spriteset_Map\r\n\t//====================================================================\r\n\r\n\t\tfunction UpperTilemap(){\r\n\t\t\tthis.initialize.apply(this, arguments);\r\n\t\t}\r\n\t\t\r\n\t\tUpperTilemap.prototype = Object.create(Tilemap.prototype);\r\n\t\tUpperTilemap.prototype.constructor = UpperTilemap;\r\n\t\t\r\n\t\tUpperTilemap.prototype._paintTiles = function(startX, startY, x, y) {\r\n\t\t\tvar tableEdgeVirtualId = 10000;\r\n\t\t\tvar mx = startX + x;\r\n\t\t\tvar my = startY + y;\r\n\t\t\tvar dx = (mx * this._tileWidth).mod(this._layerWidth);\r\n\t\t\tvar dy = (my * this._tileHeight).mod(this._layerHeight);\r\n\t\t\tvar lx = dx / this._tileWidth;\r\n\t\t\tvar ly = dy / this._tileHeight;\r\n\t\t\tvar tileId0 = this._readMapData(mx, my, 0);\r\n\t\t\tvar tileId1 = this._readMapData(mx, my, 1);\r\n\t\t\tvar tileId2 = this._readMapData(mx, my, 2);\r\n\t\t\tvar tileId3 = this._readMapData(mx, my, 3);\r\n\t\t\tvar shadowBits = this._readMapData(mx, my, 4);\r\n\t\t\tvar upperTileId1 = this._readMapData(mx, my - 1, 1);\r\n\t\t\tvar lowerTiles = [];\r\n\t\t\tvar upperTiles = [];\r\n\r\n\t\t\tif (this._isHigherTile(tileId0)) {\r\n\t\t\t\tupperTiles.push(tileId0);\r\n\t\t\t}\r\n\t\t\tif (this._isHigherTile(tileId1)) {\r\n\t\t\t\tupperTiles.push(tileId1);\r\n\t\t\t} \r\n\r\n\t\t\tif (this._isOverpassPosition(mx, my)) {\r\n\t\t\t\tupperTiles.push(tileId2);\r\n\t\t\t\tupperTiles.push(tileId3);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._isHigherTile(tileId2)) {\r\n\t\t\t\t\tupperTiles.push(tileId2);\r\n\t\t\t\t} \r\n\t\t\t\tif (this._isHigherTile(tileId3)) {\r\n\t\t\t\t\tupperTiles.push(tileId3);\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t\tvar lastUpperTiles = this._readLastTiles(1, lx, ly);\r\n\t\t\tif (!upperTiles.equals(lastUpperTiles)) {\r\n\t\t\t\tthis._upperBitmap.clearRect(dx, dy, this._tileWidth, this._tileHeight);\r\n\t\t\t\tfor (var j = 0; j < upperTiles.length; j++) {\r\n\t\t\t\t\tthis._drawTile(this._upperBitmap, upperTiles[j], dx, dy);\r\n\t\t\t\t}\r\n\t\t\t\tthis._writeLastTiles(1, lx, ly, upperTiles);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction UpperShaderTileMap(){\r\n\t\t\tTilemap.apply(this, arguments);\r\n\t\t\tthis.roundPixels = true;\r\n\t\t}\r\n\t\t\r\n\t\tUpperShaderTileMap.prototype = Object.create(ShaderTilemap.prototype);\r\n\t\tUpperShaderTileMap.prototype.constructor = UpperShaderTileMap;\r\n\t\t\r\n\t\tUpperShaderTileMap.prototype._paintTiles = function(startX, startY, x, y) {\r\n\t\t\tvar mx = startX + x;\r\n\t\t\tvar my = startY + y;\r\n\t\t\tvar dx = x * this._tileWidth, dy = y * this._tileHeight;\r\n\t\t\tvar tileId0 = this._readMapData(mx, my, 0);\r\n\t\t\tvar tileId1 = this._readMapData(mx, my, 1);\r\n\t\t\tvar tileId2 = this._readMapData(mx, my, 2);\r\n\t\t\tvar tileId3 = this._readMapData(mx, my, 3);\r\n\t\t\tvar shadowBits = this._readMapData(mx, my, 4);\r\n\t\t\tvar upperTileId1 = this._readMapData(mx, my - 1, 1);\r\n\t\t\tvar lowerLayer = this.lowerLayer.children[0];\r\n\t\t\tvar upperLayer = this.upperLayer.children[0];\r\n\r\n\t\t\tif (this._isHigherTile(tileId0)) {\r\n\t\t\t\tthis._drawTile(upperLayer, tileId0, dx, dy);\r\n\t\t\t} \r\n\t\t\tif (this._isHigherTile(tileId1)) {\r\n\t\t\t\tthis._drawTile(upperLayer, tileId1, dx, dy);\r\n\t\t\t} \r\n\r\n\t\t\t\r\n\t\t\tif (this._isOverpassPosition(mx, my)) {\r\n\t\t\t\tthis._drawTile(upperLayer, tileId2, dx, dy);\r\n\t\t\t\tthis._drawTile(upperLayer, tileId3, dx, dy);\r\n\t\t\t} else {\r\n\t\t\t\tif (this._isHigherTile(tileId2)) {\r\n\t\t\t\t\tthis._drawTile(upperLayer, tileId2, dx, dy);\r\n\t\t\t\t} \r\n\t\t\t\tif (this._isHigherTile(tileId3)) {\r\n\t\t\t\t\tthis._drawTile(upperLayer, tileId3, dx, dy);\r\n\t\t\t\t} \r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createUpperLayer = function() {\r\n\t\t\t\r\n\t\t\t/*if($gameTemp.intermissionPending){\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\t\t\r\n\t\t\tif (Graphics.isWebGL()) {\r\n\t\t\t\tthis._upperTilemap = new UpperShaderTileMap();\r\n\t\t\t} else {\r\n\t\t\t\tthis._upperTilemap = new UpperTilemap();\r\n\t\t\t}\r\n\t\t\tthis._upperTilemap.tileWidth = $gameMap.tileWidth();\r\n\t\t\tthis._upperTilemap.tileHeight = $gameMap.tileHeight();\r\n\t\t\tthis._upperTilemap.setData($gameMap.width(), $gameMap.height(), $gameMap.data());\r\n\t\t\tthis._upperTilemap.horizontalWrap = $gameMap.isLoopHorizontal();\r\n\t\t\tthis._upperTilemap.verticalWrap = $gameMap.isLoopVertical();\r\n\t\t\r\n\t\t\tthis._tileset = $gameMap.tileset();\r\n\t\t\tif (this._tileset) {\r\n\t\t\t\tvar tilesetNames = this._tileset.tilesetNames;\r\n\t\t\t\tfor (var i = 0; i < tilesetNames.length; i++) {\r\n\t\t\t\t\tthis._upperTilemap.bitmaps[i] = ImageManager.loadTileset(tilesetNames[i]);\r\n\t\t\t\t}\r\n\t\t\t\tvar newTilesetFlags = $gameMap.tilesetFlags();\t\t\t\r\n\t\t\t\tthis._upperTilemap.refreshTileset();\r\n\t\t\t\tif (!this._tilemap.flags.equals(newTilesetFlags)) {\t\t\t\t\r\n\t\t\t\t\tthis._upperTilemap.refresh();\r\n\t\t\t\t}\r\n\t\t\t\tthis._upperTilemap.flags = newTilesetFlags;\r\n\t\t\t}\r\n\t\t\r\n\t\t\tthis._baseSprite.addChild(this._upperTilemap);\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.shipUpperTops.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.shipUpperTops[i]);\r\n\t\t\t}\r\n\t\t\tfor (var i = 0; i < this.actorUpperTops.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.actorUpperTops[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._srpgMoveTile = [];\r\n\t\t\tfor (var i = 0; i < $gameSystem.spriteMoveTileMax(); i++) {\r\n\t\t\t\tthis._srpgMoveTile[i] = new Sprite_SrpgMoveTile();\r\n\t\t\t\tthis._baseSprite.addChild(this._srpgMoveTile[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._highlightSprite = new Sprite_AreaHighlights();\r\n\t\t\tthis._baseSprite.addChild(this._highlightSprite); \r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.shipBottomOverlays.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.shipBottomOverlays[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.shipTopOverlays.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.shipTopOverlays[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.actorBottomOverlays.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.actorBottomOverlays[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.actorTopOverlays.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.actorTopOverlays[i]);\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.shipTurnEndSprites.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.shipTurnEndSprites[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this.actorTurnEndSprites.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this.actorTurnEndSprites[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tthis.createDefendIndicator(event._eventId, event);\r\n\t\t\t\tthis.createAttackIndicator(event._eventId, event);\r\n\t\t\t\tthis.createWillIndicator(event._eventId, event);\r\n\t\t\t\tthis.createTwinIndicator(event._eventId, event);\r\n\t\t\t\tthis.createExplosionSprite(event._eventId, event);\r\n\t\t\t\tthis.createAppearSprite(event._eventId, event);\r\n\t\t\t\tthis.createDisappearSprite(event._eventId, event);\t\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis._reticuleSprite = new Sprite_Reticule();\r\n\t\t\tthis.addCharacterToBaseSprite(this._reticuleSprite);\r\n\t\t\t\r\n\t\t\tvar sprite = new Sprite_Player($gamePlayer);\r\n\t\t\t$gameTemp.upperPlayerSprite = sprite;\r\n\t\t\tthis.addCharacterToBaseSprite(sprite);   \r\n\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\tthis.createPictures();\r\n\t\t\tthis.createTimer();\r\n\t\t\tthis.createScreenSprites();\r\n\t\t\t\r\n\t\t\t$gameTemp.updatePlayerSpriteVisibility();\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.updateTilemap = function() {\r\n\t\t\tthis._tilemap.origin.x = $gameMap.displayX() * $gameMap.tileWidth();\r\n\t\t\tthis._tilemap.origin.y = $gameMap.displayY() * $gameMap.tileHeight();\r\n\t\t\t\r\n\t\t\tthis._upperTilemap.origin.x = $gameMap.displayX() * $gameMap.tileWidth();\r\n\t\t\tthis._upperTilemap.origin.y = $gameMap.displayY() * $gameMap.tileHeight();\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Spriteset_Map_createTilemap = Spriteset_Map.prototype.createTilemap;\r\n\t\tSpriteset_Map.prototype.createTilemap = function() {\t\t\r\n\t\t\t_SRPG_Spriteset_Map_createTilemap.call(this);\r\n\t\t\tif($gameTemp.intermissionPending){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._gridSprite = new Sprite_SrpgGrid();\r\n\t\t\tthis._baseSprite.addChild(this._gridSprite);   \r\n\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.addCharacterToBaseSprite = function(sprite) {\r\n\t\t\tvar child = this._baseSprite.addChild(sprite);\r\n\t\t\tthis._characterLayerSprites.push(child);\r\n\t\t}\r\n\t\t\r\n\t\tSpriteset_Map.prototype.reloadCharacters = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tthis._characterLayerSprites.forEach(function(child){\r\n\t\t\t\t_this._baseSprite.removeChild(child);\r\n\t\t\t});\r\n\t\t\tthis.createCharacters();\r\n\t\t}\r\n\t\t\r\n\t\tvar _SRPG_Spriteset_Map_createTilemap_createCharacters = Spriteset_Map.prototype.createCharacters;\r\n\t\tSpriteset_Map.prototype.createCharacters = function() {\r\n\t\t\tvar _this  = this;\r\n\t\t\tthis._characterLayerSprites = [];\r\n\t\t\t/*if($gameTemp.intermissionPending){\r\n\t\t\t\treturn;\r\n\t\t\t}*/\r\n\t\t\t\t\r\n\t\t\tthis._bshadowSprites = {};\r\n\t\t\tthis._explosionSprites = {};\r\n\t\t\tthis._appearSprites = {};\r\n\t\t\tthis._disappearSprites = {};\r\n\t\t\tthis._willIndicators = {};\r\n\t\t\tthis._defendIndicators = {};\r\n\t\t\tthis._attackIndicators = {};\r\n\t\t\tthis._twinIndicators = {};\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tthis.createBShadow(event._eventId,event);\t\t\t\r\n\t\t\t}, this);\r\n\t\t\t//_SRPG_Spriteset_Map_createTilemap_createCharacters.call(this);\r\n\t\t\tthis._characterSprites = [];\r\n\t\t\tvar ships = [];\r\n\t\t\tvar shipBottoms = [];\r\n\t\t\tvar shipTops = [];\r\n\t\t\tvar actors = [];\r\n\t\t\tvar actorBottoms = [];\r\n\t\t\tvar actorTops = [];\r\n\t\t\t\r\n\t\t\tthis.shipTurnEndSprites = [];\r\n\t\t\tthis.actorTurnEndSprites = [];\r\n\t\t\tthis.shipUpperTops = [];\r\n\t\t\tthis.actorUpperTops = [];\r\n\t\t\tthis.actorTopOverlays = [];\r\n\t\t\tthis.actorBottomOverlays = [];\r\n\t\t\tthis.shipTopOverlays = [];\r\n\t\t\tthis.shipBottomOverlays = [];\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif(event.isType() == \"ship\" || event.isType() == \"ship_event\"){\r\n\t\t\t\t\tships.push(new Sprite_Character(event));\r\n\t\t\t\t\tshipBottoms.push(new Sprite());\r\n\t\t\t\t\t_this.shipBottomOverlays.push(new Sprite());\r\n\t\t\t\t\t_this.shipTurnEndSprites.push(new Sprite());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tactors.push(new Sprite_Character(event));\r\n\t\t\t\t\tactorBottoms.push(new Sprite());\r\n\t\t\t\t\t_this.actorBottomOverlays.push(new Sprite());\r\n\t\t\t\t\t_this.actorTurnEndSprites.push(new Sprite());\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t$gameMap.events().forEach(function(event) {\r\n\t\t\t\tif(event.isType() == \"ship\" || event.isType() == \"ship_event\"){\t\t\t\t\r\n\t\t\t\t\tshipTops.push(new Sprite());\r\n\t\t\t\t\t_this.shipTopOverlays.push(new Sprite());\r\n\t\t\t\t\t_this.shipUpperTops.push(new Sprite());\r\n\t\t\t\t} else {\t\t\t\r\n\t\t\t\t\tactorTops.push(new Sprite());\r\n\t\t\t\t\t_this.actorTopOverlays.push(new Sprite());\r\n\t\t\t\t\t_this.actorUpperTops.push(new Sprite());\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}, this);\r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < actors.length; i++){\r\n\t\t\t\tactors[i].setLowerBody(actorBottoms[i]);\r\n\t\t\t\tactors[i].setUpperBody(actorTops[i]);\r\n\t\t\t\tactors[i].setUpperBodyTop(this.actorUpperTops[i]);\r\n\t\t\t\tactors[i].setTurnEnd(this.actorTurnEndSprites[i]);\r\n\t\t\t\tactors[i].setLowerBodyOverlay(this.actorBottomOverlays[i]);\r\n\t\t\t\tactors[i].setUpperBodyOverlay(this.actorTopOverlays[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(var i = 0; i < ships.length; i++){\r\n\t\t\t\tships[i].setLowerBody(shipBottoms[i]);\r\n\t\t\t\tships[i].setUpperBody(shipTops[i]);\r\n\t\t\t\tships[i].setUpperBodyTop(this.shipUpperTops[i]);\r\n\t\t\t\tships[i].setTurnEnd(this.shipTurnEndSprites[i]);\r\n\t\t\t\tships[i].setLowerBodyOverlay(this.shipBottomOverlays[i]);\r\n\t\t\t\tships[i].setUpperBodyOverlay(this.shipTopOverlays[i]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._characterSprites = shipBottoms.concat(actorBottoms).concat(shipTops).concat(actorTops).concat(ships).concat(actors);\r\n\t\t\t\r\n\t\t\t//.concat(shipTurnEndSprites) .concat(actorTurnEndSprites)\r\n\t\t\t$gameMap.vehicles().forEach(function(vehicle) {\r\n\t\t\t\tthis._characterSprites.push(new Sprite_Character(vehicle));\r\n\t\t\t}, this);\r\n\t\t\t$gamePlayer.followers().reverseEach(function(follower) {\r\n\t\t\t\tthis._characterSprites.push(new Sprite_Character(follower));\r\n\t\t\t}, this);\r\n\t\t\tvar sprite = new Sprite_Player($gamePlayer);\r\n\t\t\t$gameTemp.lowerPlayerSprite = sprite;\r\n\t\t\tthis.addCharacterToBaseSprite(sprite);  \t\t \r\n\t\t\t\r\n\t\t\tfor (var i = 0; i < this._characterSprites.length; i++) {\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._characterSprites[i]);\r\n\t\t\t}\t\t   \t\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createExplosionSprite = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._explosionSprites[id]) {\r\n\t\t\t\tthis._explosionSprites[id] = new Sprite_Destroyed(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._explosionSprites[id]);\r\n\t\t\t\tcharacter._explosionSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createAppearSprite = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._appearSprites[id]) {\r\n\t\t\t\tthis._appearSprites[id] = new Sprite_Appear(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._appearSprites[id]);\r\n\t\t\t\tcharacter._appearSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createDisappearSprite = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._disappearSprites[id]) {\r\n\t\t\t\tthis._disappearSprites[id] = new Sprite_Disappear(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._disappearSprites[id]);\r\n\t\t\t\tcharacter._disappearSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createBShadow = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._bshadowSprites[id]) {\r\n\t\t\t\tthis._bshadowSprites[id] = new Sprite_BasicShadow(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._bshadowSprites[id]);\r\n\t\t\t\tcharacter._shadSprite = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createWillIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._willIndicators[id]) {\r\n\t\t\t\tthis._willIndicators[id] = new Sprite_WillIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._willIndicators[id]);\r\n\t\t\t\tcharacter._willIndicator = true;\r\n\t\t\t};\r\n\t\t};\t\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createDefendIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._defendIndicators[id]) {\r\n\t\t\t\tthis._defendIndicators[id] = new Sprite_DefendIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._defendIndicators[id]);\r\n\t\t\t\tcharacter._defendIndicator = true;\r\n\t\t\t};\r\n\t\t};\t\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createAttackIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._attackIndicators[id]) {\r\n\t\t\t\tthis._attackIndicators[id] = new Sprite_AttackIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._attackIndicators[id]);\r\n\t\t\t\tcharacter._defendIndicator = true;\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\tSpriteset_Map.prototype.createTwinIndicator = function(id,character) {\r\n\t\t\tif (!character) return;\r\n\t\t\tif (!this._twinIndicators[id]) {\r\n\t\t\t\tthis._twinIndicators[id] = new Sprite_TwinIndicator(character);\r\n\t\t\t\tthis.addCharacterToBaseSprite(this._twinIndicators[id]);\r\n\t\t\t\tcharacter._twinIndicator = true;\r\n\t\t\t};\r\n\t\t};\t\r\n\r\n\t\tvar _SRPG_Spriteset_Map_update = Spriteset_Map.prototype.update;\r\n\t\tSpriteset_Map.prototype.update = function() {\r\n\t\t\t_SRPG_Spriteset_Map_update.call(this);\r\n\t\t\tthis.updateSrpgMoveTile();\r\n\t\t\tif($gameTemp.tempSprites){\r\n\t\t\t\twhile($gameTemp.tempSprites.length){\r\n\t\t\t\t\tvar sprite = $gameTemp.tempSprites.pop();\r\n\t\t\t\t\tthis._baseSprite.addChild(sprite);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tSpriteset_Map.prototype.updateSrpgMoveTile = function() {\r\n\t\t\tif(this._srpgMoveTile){\t\t\r\n\t\t\t\tif ($gameTemp.resetMoveList() == true) {\r\n\t\t\t\t\tfor (var i = 0; i < $gameSystem.spriteMoveTileMax(); i++) {\r\n\t\t\t\t\t\tthis._srpgMoveTile[i].clearThisMoveTile();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameTemp.setResetMoveList(false);\r\n\t\t\t\t}\r\n\t\t\t\tif ($gameTemp.isMoveListValid()) {\r\n\t\t\t\t\tif (!this._srpgMoveTile[0].isThisMoveTileValid()) {\r\n\t\t\t\t\t\tvar list = $gameTemp.moveList();\r\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) {\r\n\t\t\t\t\t\t\tvar pos = list[i];\r\n\t\t\t\t\t\t\tthis._srpgMoveTile[i].setThisMoveTile(pos[0], pos[1], pos[2]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this._srpgMoveTile[0].isThisMoveTileValid()) {\r\n\t\t\t\t\t\tfor (var i = 0; i < $gameSystem.spriteMoveTileMax(); i++) {\r\n\t\t\t\t\t\t\tthis._srpgMoveTile[i].clearThisMoveTile();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/Map.js?");

/***/ }),

/***/ "./js/SRW Core/PluginCommands.js":
/*!***************************************!*\
  !*** ./js/SRW Core/PluginCommands.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tvar _Game_Interpreter_pluginCommand =\r\n            Game_Interpreter.prototype.pluginCommand;\r\n\t\tGame_Interpreter.prototype.pluginCommand = function(command, args) {\r\n\t\t\t_Game_Interpreter_pluginCommand.call(this, command, args);\r\n\t\t\t\r\n\t\t\tif (command === 'SRPGBattle') {\r\n\t\t\t\tswitch (args[0]) {\r\n\t\t\t\tcase 'Start':\r\n\t\t\t\t\t$gameSystem.startSRPG();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'End':\r\n\t\t\t\t\t$gameSystem.endSRPG();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'Intermission') {\r\n\t\t\t\tswitch (args[0]) {\r\n\t\t\t\tcase 'Start':\r\n\t\t\t\t\t$gameSystem.startIntermission();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'End':\r\n\t\t\t\t\t$gameSystem.endIntermission();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'UnlockUnit') {\r\n\t\t\t\t$SRWSaveManager.setUnitUnlocked(args[0]);\r\n\t\t\t}\r\n\t\t\tif (command === 'unlockUnit') {\r\n\t\t\t\t$SRWSaveManager.setUnitUnlocked(args[0]);\r\n\t\t\t}\r\n\t\t\tif (command === 'lockUnit') {\r\n\t\t\t\t$SRWSaveManager.setUnitLocked(args[0]);\r\n\t\t\t}\r\n\t\t\tif (command === 'SetLevel') {\r\n\t\t\t\t$SRWSaveManager.setPilotLevel(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'setLevel') {\r\n\t\t\t\t$SRWSaveManager.setPilotLevel(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'addKills') {\r\n\t\t\t\t$SRWSaveManager.addKills(args[0], args[1]);\r\n\t\t\t}\t\t\r\n\t\t\tif (command === 'addPP') {\r\n\t\t\t\t$SRWSaveManager.addPP(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'addExp') {\r\n\t\t\t\t$SRWSaveManager.addExp(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'setStageSong') {\r\n\t\t\t\t$gameSystem.currentStageSong  = args[0];\r\n\t\t\t}\t\r\n\t\t\tif (command === 'setSpecialTheme') {\r\n\t\t\t\t$songManager.setSpecialTheme(args[0]);\r\n\t\t\t}\t\r\n\t\t\tif (command === 'clearSpecialTheme') {\r\n\t\t\t\t$songManager.clearSpecialTheme();\r\n\t\t\t}\t\t\t\r\n\t\t\tif (command === 'addItem') {\r\n\t\t\t\t$inventoryManager.addItem(args[0]);\r\n\t\t\t}\t\r\n\t\t\tif (command === 'addAllItems') {            \r\n\t\t\t\tfor(var i = 0; i < $itemEffectManager.getDefinitionCount(); i++){\r\n\t\t\t\t\t$inventoryManager.addItem(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'removeItem') {\r\n\t\t\t\t$inventoryManager.removeItem(args[0]);\r\n\t\t\t}\t\r\n\t\t\tif (command === 'addItemToHolder') {\r\n\t\t\t\t$inventoryManager.addItemHolder(args[0], args[1], args[2]);\r\n\t\t\t}\r\n\t\t\tif (command === 'removeItemFromHolder') {\r\n\t\t\t\t$inventoryManager.removeItemHolder(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\tif (command === 'focusActor') {\r\n\t\t\t\tvar actorId = args[0];\r\n\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(actorId));\r\n\t\t\t\tif(event && !event.isErased()){\r\n\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (command === 'focusEvent') {\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event && !event.isErased()){\r\n\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearDeployInfo') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.count = 0;\r\n\t\t\t\tdeployInfo.assigned = {};\r\n\t\t\t\tdeployInfo.assignedSub = {};\r\n\t\t\t\tdeployInfo.assignedShips = {};\r\n\t\t\t\tdeployInfo.lockedSlots = {};\r\n\t\t\t\tdeployInfo.lockedShipSlots = {};\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'populateDeployList') {\r\n\t\t\t\t$gameSystem.constructDeployList();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setDeployCount') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.count = args[0];\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setShipDeployCount') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.shipCount = args[0];\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'assignSlot') {\r\n\t\t\t\t//args[0]: slot \r\n\t\t\t\t//args[1]: actor id\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar actorId = args[1];\r\n\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\tdeployInfo.assigned[args[0]] = actorId;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'assignSlotSub') {\r\n\t\t\t\t//args[0]: slot \r\n\t\t\t\t//args[1]: actor id\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar actorId = args[1];\r\n\t\t\t\tvar parts = actorId.match(/\\<(.*)\\>/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\tactorId = $gameVariables.value(parts[1]);\r\n\t\t\t\t}\r\n\t\t\t\tdeployInfo.assignedSub[args[0]] = actorId;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'assignShipSlot') {\r\n\t\t\t\t//args[0]: slot \r\n\t\t\t\t//args[1]: actor id\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.assignedShips[args[0]] = args[1];\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockDeploySlot') {\r\n\t\t\t\t//prevents a slot from being changed by the player in the menu, assignSlot can still override\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedSlots[args[0]] = true;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockDeploySlot') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedSlots[args[0]] = false;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockShipDeploySlot') {\r\n\t\t\t\t//prevents a slot from being changed by the player in the menu, assignSlot can still override\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedShipSlots[args[0]] = true;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockShipDeploySlot') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tdeployInfo.lockedShipSlots[args[0]] = false;\r\n\t\t\t\t$gameSystem.setDeployInfo(deployInfo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleBg') {\r\n\t\t\t\t$gameSystem.battleBg = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax1') {\r\n\t\t\t\t$gameSystem.battleParallax1 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax2') {\r\n\t\t\t\t$gameSystem.battleParallax2 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax3') {\r\n\t\t\t\t$gameSystem.battleParallax3 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleParallax3') {\r\n\t\t\t\t$gameSystem.battleParallax3 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleFloor') {\r\n\t\t\t\t$gameSystem.battleFloor = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWBattleSkybox') {\r\n\t\t\t\t$gameSystem.battleSkyBox = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWSkyBattleBg') {\r\n\t\t\t\t$gameSystem.skyBattleBg = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWSkyBattleParallax1') {\r\n\t\t\t\t$gameSystem.skyBattleParallax1 = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSRWDefaultBattleEnv') {\r\n\t\t\t\t$gameSystem.defaultBattleEnv = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setDefaultBattleEnv') {\r\n\t\t\t\t$gameSystem.defaultBattleEnv = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSkyBattleEnv') {\r\n\t\t\t\t$gameSystem.skyBattleEnv = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setRegionBattleEnv') {\r\n\t\t\t\t$gameSystem.regionBattleEnv[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setRegionSkyBattleEnv') {\r\n\t\t\t\t$gameSystem.regionSkyBattleEnv[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'resetRegionAttributes') {\t\t\t\r\n\t\t\t\tif(!$gameSystem.regionAttributes){\r\n\t\t\t\t\t$gameSystem.regionAttributes = {};\r\n\t\t\t\t}\t\r\n\t\t\t\tdelete $gameSystem.regionAttributes[args[0] * 1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'addRegionAttributes') {\r\n\t\t\t\tif(!$gameSystem.regionAttributes){\r\n\t\t\t\t\t$gameSystem.regionAttributes = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.regionAttributes[args[0] * 1] = {\r\n\t\t\t\t\tdefense: args[1] * 1,\r\n\t\t\t\t\tevasion: args[2] * 1,\r\n\t\t\t\t\thp_regen: args[3] * 1, \r\n\t\t\t\t\ten_regen: args[4] * 1\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'addMapHighlight') {\r\n\t\t\t\tif(!$gameSystem.highlightedTiles){\r\n\t\t\t\t\t$gameSystem.highlightedTiles = [];\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.highlightedTiles.push({x: args[0], y: args[1], color: args[2] || \"white\"});\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'removeMapHighlight') {\r\n\t\t\t\tif($gameSystem.highlightedTiles){\r\n\t\t\t\t\tvar x = args[0];\r\n\t\t\t\t\tvar y = args[1];\r\n\t\t\t\t\tvar tmp = [];\r\n\t\t\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\t\t\tif($gameSystem.highlightedTiles[i].x != x || $gameSystem.highlightedTiles[i].y != y){\r\n\t\t\t\t\t\t\ttmp.push($gameSystem.highlightedTiles);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$gameSystem.highlightedTiles = tmp;\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'addMapRegionHighlight') {\r\n\t\t\t\tif(!$gameSystem.regionHighlights){\r\n\t\t\t\t\t$gameSystem.regionHighlights = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.regionHighlights[args[0]] = args[1] || \"white\";\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'removeMapRegionHighlight') {\r\n\t\t\t\tdelete $gameSystem.regionHighlights[args[0]];\r\n\t\t\t\t$gameSystem.highlightsRefreshed = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEnemyUpgradeLevel') {\r\n\t\t\t\t$gameSystem.enemyUpgradeLevel = args[0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setMechUpgradeLevel') {\r\n\t\t\t\tvar mechId = args[0]*1;\r\n\t\t\t\tvar targetLevel = args[1]*1;\r\n\t\t\t\tvar force = args[2]*1;\r\n\t\t\t\tvar mechData = $statCalc.getMechData($dataClasses[mechId], true);\r\n\t\t\t\tif(mechData && mechData.id != -1){\r\n\t\t\t\t\tvar upgradeLevels = mechData.stats.upgradeLevels;\r\n\t\t\t\t\tvar targetUpgrades = [\"maxHP\",\"maxEN\",\"armor\",\"mobility\",\"accuracy\",\"weapons\"];\r\n\t\t\t\t\ttargetUpgrades.forEach(function(upgrade){\r\n\t\t\t\t\t\tif(upgradeLevels[upgrade] < targetLevel || force){\r\n\t\t\t\t\t\t\tupgradeLevels[upgrade] = targetLevel;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$statCalc.storeMechData(mechData);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setPilotRelationship') {\r\n\t\t\t\tvar actorId = parseInt(args[0]);\r\n\t\t\t\tvar otherActorId = parseInt(args[1]);\r\n\t\t\t\tvar effectId = parseInt(args[2]);\r\n\t\t\t\tvar level = parseInt( args[3]);\r\n\t\t\t\t\r\n\t\t\t\tvar actor = $gameActors.actor(actorId);\r\n\t\t\t\tif(!actor.SRWStats.pilot.relationships){\r\n\t\t\t\t\tactor.SRWStats.pilot.relationships = {};\r\n\t\t\t\t}\r\n\t\t\t\tactor.SRWStats.pilot.relationships[otherActorId] = {\r\n\t\t\t\t\tactor: otherActorId,\r\n\t\t\t\t\teffectId: effectId,\r\n\t\t\t\t\tlevel: level\r\n\t\t\t\t};\r\n\t\t\t\t$statCalc.storeActorData(actor);\t\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\tif (command === 'addPersuadeOption') {\r\n\t\t\t\t//args[0] = actorId\r\n\t\t\t\t//args[1] = eventId\r\n\t\t\t\t//args[2] = varId\r\n\t\t\t\tif(!$gameSystem.persuadeOptions[args[0]]){\r\n\t\t\t\t\t$gameSystem.persuadeOptions[args[0]] = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.persuadeOptions[args[0]][args[1]] = args[2];\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'removePersuadeOption') {\r\n\t\t\t\t//args[0] = actorId\r\n\t\t\t\t//args[1] = eventId\r\n\t\t\t\tif($gameSystem.persuadeOptions[args[0]]){\r\n\t\t\t\t\tdelete $gameSystem.persuadeOptions[args[0]][args[1]];\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\t\r\n\t\t\tif (command === 'deployShips') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar deployList = $gameSystem.getShipDeployList();\t\t\t\r\n\t\t\t\tvar activeDeployList = [];\r\n\t\t\t\tfor(var i = 0; i < deployInfo.shipCount; i++){\r\n\t\t\t\t\tactiveDeployList.push(deployList[i]);\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.setActiveShipDeployList(activeDeployList);\r\n\t\t\t\t$gameSystem.deployShips(args[0]);\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployAll') {\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar deployList = $gameSystem.getDeployList();\r\n\t\t\t\tvar activeDeployList = [];\r\n\t\t\t\tfor(var i = 0; i < deployInfo.count; i++){\r\n\t\t\t\t\tactiveDeployList.push(deployList[i]);\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.setActiveDeployList(activeDeployList);\r\n\t\t\t\t$gameSystem.deployActors(args[0], \"all\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployAllLocked') {\r\n\t\t\t\t$gameSystem.deployActors(args[0], \"locked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployAllUnLocked') {\r\n\t\t\t\t$gameSystem.deployActors(args[0], \"unlocked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deployActor') {\r\n\t\t\t\tvar actor_unit = $gameActors.actor(args[0]);\r\n\t\t\t\tvar event = $gameMap.event(args[1]);\r\n\t\t\t\tif(actor_unit && event){\r\n\t\t\t\t\tvar type;\r\n\t\t\t\t\tif(event.event().meta.type){\r\n\t\t\t\t\t\ttype = event.event().meta.type;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttype = \"actor\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevent.setType(type);\r\n\t\t\t\t\t$gameSystem.deployActor(actor_unit, event, args[2] * 1, args[3]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'deploySlot') {\r\n\t\t\t\tvar slot = args[0];\r\n\t\t\t\tvar deployInfo = $gameSystem.getDeployInfo();\r\n\t\t\t\tvar actor_id = deployInfo.assigned[slot];\r\n\t\t\t\tvar actor_unit = $gameActors.actor(actor_id);\r\n\t\t\t\tvar eventId = -1;\r\n\t\t\t\tvar ctr = 0;\r\n\t\t\t\tvar actorEventCtr = 0;\r\n\t\t\t\tvar events = $gameMap.events();\r\n\t\t\t\twhile(eventId == -1 && ctr < events.length){\r\n\t\t\t\t\tvar event = events[ctr];\r\n\t\t\t\t\tif (event.isType() === 'actor'){\r\n\t\t\t\t\t\tif(actorEventCtr == slot){\r\n\t\t\t\t\t\t\teventId = event.eventId();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tactorEventCtr++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctr++;\r\n\t\t\t\t}\r\n\t\t\t\tif(actor_unit && eventId != -1){\r\n\t\t\t\t\t$gameSystem.deployActor(actor_unit, $gameMap.event(eventId), args[1], deployInfo.assignedSub[slot]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'redeployActor') {\r\n\t\t\t\t$gameSystem.redeployActor(args[0], args[1] * 1);\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveEventToPoint') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: args[1], y: args[2]}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[3] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveActorToPoint') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: args[1], y: args[2]}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[3] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveEventToEvent') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $gameMap.event(args[1]);\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveActorToEvent') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $gameMap.event(args[1]);\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveEventToActor') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $statCalc.getReferenceEvent($gameActors.actor(args[1]));\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'moveActorToActor') {\r\n\t\t\t\t$gameMap._interpreter.setWaitMode(\"move_to_point\");\r\n\t\t\t\t$gameSystem.setSrpgWaitMoving(true);\r\n\t\t\t\tvar targetEvent = $statCalc.getReferenceEvent($gameActors.actor(args[1]));\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event && targetEvent){\r\n\t\t\t\t\tvar position = $statCalc.getAdjacentFreeSpace({x: targetEvent.posX(), y: targetEvent.posY()}, null, null, {x: event.posX(), y: event.posY()});\r\n\t\t\t\t\tevent.srpgMoveToPoint(position, true, true);\r\n\t\t\t\t\tif(args[2] * 1){\r\n\t\t\t\t\t\t$gamePlayer.locate(event.posX(), event.posY());\r\n\t\t\t\t\t\t$gameTemp.followMove = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventFlying') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\tif($statCalc.canFly(actor)){\r\n\t\t\t\t\t$statCalc.setFlying(actor, true);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventLanded') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\t\t\r\n\t\t\t\t$statCalc.setFlying(actor, false);\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'enableFaction') {\r\n\t\t\t\t$gameSystem.enableFaction(args[0]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'disableFaction') {\r\n\t\t\t\t$gameSystem.disableFaction(args[0]);\r\n\t\t\t}\t\t\t\r\n\t\t\t\r\n\t\t\tif (command === 'setFactionAggro') {\r\n\t\t\t\t$gameSystem.setFactionAggro(args[0], JSON.parse(args[1]));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearFactionAggro') {\r\n\t\t\t\t$gameSystem.clearFactionAggro(args[0]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'transformEvent') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t}*/\r\n\t\t\t\t$statCalc.transform(actor, args[1], true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'combineEvent') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t$statCalc.combine(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'splitEvent') {\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t$statCalc.split(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'transformActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t}*/\r\n\t\t\t\t$statCalc.transform(actor, args[1], true, args[2]);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\r\n\t\t\tif (command === 'transformActorDirect') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t/*if(actor.isSubTwin){\r\n\t\t\t\t\tvar main = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(main, true);\r\n\t\t\t\t}*/\r\n\t\t\t\t$statCalc.transform(actor, 0, true, args[1]);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\r\n\t\t\tif (command === 'combineActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.combine(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'splitActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.split(actor, true);\r\n\t\t\t\tvar se = {};\r\n\t\t\t\tse.name = 'SRWTransform';\r\n\t\t\t\tse.pan = 0;\r\n\t\t\t\tse.pitch = 100;\r\n\t\t\t\tse.volume = 80;\r\n\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'separateActor') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\tactor = $statCalc.getMainTwin(actor);\r\n\t\t\t\t}\r\n\t\t\t\tif(actor.subTwin || actor.isSubTwin){\r\n\t\t\t\t\t$statCalc.separate(actor, true);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'makeActorMainTwin') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\tif(actor.isSubTwin){\r\n\t\t\t\t\tactor = $statCalc.getMainTwin(actor);\r\n\t\t\t\t\t$statCalc.swap(actor, true);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'preventActorDeathQuote') {\r\n\t\t\t\tif(!$gameTemp.preventedDeathQuotes){\r\n\t\t\t\t\t$gameTemp.preventedDeathQuotes = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameTemp.preventedDeathQuotes[args[0]] = true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setSaveDisplayName') {\t\t\t\r\n\t\t\t\t$gameSystem.saveDisplayName = (args[0] || \"\").replace(/\\_/ig, \" \");\r\n\t\t\t}\t\r\n\r\n\t\t\tif (command === 'setStageTextId') {\t\t\t\r\n\t\t\t\t$gameSystem.stageTextId = args[0];\r\n\t\t\t}\t\t\t\t\r\n\t\t\t\r\n\t\t\tif (command === 'setEventWill') {\t\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\t$statCalc.setWill(actor, args[1] * 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setActorWill') {\t\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setWill(actor, args[1] * 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'makeActorAI') {\t\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setIsAI(actor, true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'makeActorControllable') {\t\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setIsAI(actor, false);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setActorEssential') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setEssential(actor, true);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setActorNonEssential') {\r\n\t\t\t\tvar actor = $gameActors.actor(args[0]);\r\n\t\t\t\t$statCalc.setEssential(actor, false);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockMechWeapon') {\t\t\t\r\n\t\t\t\t$statCalc.setWeaponUnlocked(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockMechWeapon') {\r\n\t\t\t\t$statCalc.setWeaponLocked(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setUnlockedUpgradeLevel') {\r\n\t\t\t\tvar tmp = parseInt(args[0]);\r\n\t\t\t\tif(!isNaN(tmp)){\r\n\t\t\t\t\t$gameSystem.unlockedUpgradeLevel = tmp;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setRequiredFUBLevel') {\r\n\t\t\t\tvar tmp = parseInt(args[0]);\r\n\t\t\t\tif(!isNaN(tmp)){\r\n\t\t\t\t\t$gameSystem.requiredFUBLevel = tmp;\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventCounterAction') {\t\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\tactor.counterBehavior = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventAttackAction') {\t\r\n\t\t\t\tvar actor = $gameSystem.EventToUnit(args[0])[1];\r\n\t\t\t\tactor.attackBehavior = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setEventBattleMode') {\t\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(args[0]);\r\n\t\t\t\tif (battlerArray && (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy')) {\r\n\t\t\t\t\tbattlerArray[1].setBattleMode(args[1], true);\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tif(battlerArray[0] === 'enemy'){\r\n\t\t\t\t\tif(battlerArray[1].squadId != -1){\r\n\t\t\t\t\t\tthis.setSquadMode(squadId, args[1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (command === 'hidePilotAbility') {\t\r\n\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"hidden\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockPilotAbility') {\t\r\n\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"locked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockPilotAbility') {\t\r\n\t\t\t\t$gameSystem.setPilotAbilityStatus(args[0], args[1], \"\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'hideMechAbility') {\t\r\n\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"hidden\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockMechAbility') {\t\r\n\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"locked\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockMechAbility') {\t\r\n\t\t\t\t$gameSystem.setMechAbilityStatus(args[0], args[1], \"\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockTransformation') {\t\r\n\t\t\t\t$gameSystem.lockTransformation(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'lockAllTransformations') {\t\r\n\t\t\t\t$gameSystem.lockAllTransformations();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockTransformation') {\t\r\n\t\t\t\t$gameSystem.unlockTransformation(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'unlockAllTransformations') {\t\r\n\t\t\t\t$gameSystem.unlockAllTransformations();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setFaceAlias') {\t\r\n\t\t\t\tif(!$gameSystem.faceAliases){\r\n\t\t\t\t\t$gameSystem.faceAliases = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.faceAliases[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setCharacterIndexAlias') {\t\r\n\t\t\t\tif(!$gameSystem.characterIdexAliases){\r\n\t\t\t\t\t$gameSystem.characterIdexAliases = {};\r\n\t\t\t\t}\r\n\t\t\t\t$gameSystem.characterIdexAliases[args[0]] = args[1];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setPilotAbilityUpgrade') {\t\r\n\t\t\t\t$pilotAbilityManager.setUpgrade(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'setMechAbilityUpgrade') {\t\r\n\t\t\t\t$mechAbilityManager.setUpgrade(args[0], args[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command == 'showTargetingReticule'){\t\t\t\r\n\t\t\t\tvar eventIdSource;\r\n\t\t\t\tvar parts = args[0].match(/\\actor\\:(.*)/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\teventIdSource = $gameSystem.ActorToEvent(parts[1]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\teventIdSource = args[0];\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar eventIdTarget;\r\n\t\t\t\tvar parts = args[1].match(/\\actor\\:(.*)/);\t\r\n\t\t\t\tif(parts && parts.length > 1){\r\n\t\t\t\t\teventIdTarget = $gameSystem.ActorToEvent(parts[1]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\teventIdTarget = args[1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar actionArray = $gameSystem.EventToUnit(eventIdSource);\r\n\t\t\t\tvar targetArray = $gameSystem.EventToUnit(eventIdTarget);\r\n\t\t\t\tif(actionArray && targetArray){\r\n\t\t\t\t\t$gameTemp.reticuleInfo = {\r\n\t\t\t\t\t\tactor: actionArray[1],\r\n\t\t\t\t\t\ttargetActor: targetArray[1]\r\n\t\t\t\t\t};\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearTile') {\r\n\t\t\t\tvar position = {x: args[0], y: args[1]};\r\n\t\t\t\tvar actor = $statCalc.activeUnitAtPosition(position);\r\n\t\t\t\tif(actor){\r\n\t\t\t\t\tvar newPosition = $statCalc.getAdjacentFreeSpace(position);\r\n\t\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\t\tvar actorId = -1;\r\n\t\t\t\t\tif(actor.isActor()){\r\n\t\t\t\t\t\tactorId = actor.actorId();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(event.eventId() != args[2] && actorId != args[3]){\r\n\t\t\t\t\t\tevent.locate(newPosition.x, newPosition.y);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfunction clearAdjacentToTile(position, includeDiagonal){\r\n\t\t\t\tvar positions  = [];\r\n\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y}, biasPosition:{x: position.x - 2, y: position.y}});\r\n\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y}, biasPosition:{x: position.x + 2, y: position.y}});\r\n\t\t\t\tpositions.push({position: {x: position.x, y: position.y + 1}, biasPosition:{x: position.x, y: position.y + 2}});\r\n\t\t\t\tpositions.push({position: {x: position.x, y: position.y - 1}, biasPosition:{x: position.x, y: position.y - 2}});\r\n\t\t\t\t\r\n\t\t\t\tif(includeDiagonal){\r\n\t\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y - 1}, biasPosition:{x: position.x - 2, y: position.y - 2}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y + 1}, biasPosition:{x: position.x + 2, y: position.y + 2}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x - 1, y: position.y + 1}, biasPosition:{x: position.x - 2, y: position.y + 2}});\r\n\t\t\t\t\tpositions.push({position: {x: position.x + 1, y: position.y - 1}, biasPosition:{x: position.x + 2, y: position.y - 2}});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar usedPositions = {};\r\n\t\t\t\tpositions.forEach(function(currentInfo){\t\t\t\t\r\n\t\t\t\t\tvar actor = $statCalc.activeUnitAtPosition(currentInfo.position);\r\n\t\t\t\t\tif(actor){\r\n\t\t\t\t\t\tvar newPosition = $statCalc.getAdjacentFreeSpace(currentInfo.position, null, null, currentInfo.biasPosition, true, usedPositions);\r\n\t\t\t\t\t\tif(!usedPositions[newPosition.x]){\r\n\t\t\t\t\t\t\tusedPositions[newPosition.x] = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!usedPositions[newPosition.x][newPosition.y]){\r\n\t\t\t\t\t\t\tusedPositions[newPosition.x][newPosition.y] = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar event = $statCalc.getReferenceEvent(actor);\r\n\t\t\t\t\t\tvar actorId = -1;\t\t\t\t\t\r\n\t\t\t\t\t\tevent.locate(newPosition.x, newPosition.y);\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t});\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearAdjacentToTile') {\r\n\t\t\t\tclearAdjacentToTile({x: args[0] * 1, y: args[1] * 1}, args[2] * 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearAdjacentToEvent') {\r\n\t\t\t\tvar event = $gameMap.event(args[0]);\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tclearAdjacentToTile({x: event.posX(), y:  event.posY()}, args[1] * 1);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (command === 'clearAdjacentToActor') {\r\n\t\t\t\tvar event = $statCalc.getReferenceEvent($gameActors.actor(args[0]));\r\n\t\t\t\tif(event){\r\n\t\t\t\t\tclearAdjacentToTile({x: event.posX(), y:  event.posY()}, args[1] * 1);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\tif (command === 'stopSkipping') {\r\n\t\t\t\t//exists purely to manually ensure A+Start skipping stops at the point the command is called.\r\n\t\t\t}\r\n\t\t};\t\r\n\t}\n\n//# sourceURL=webpack:///./js/SRW_Core/PluginCommands.js?");

/***/ }),

/***/ "./js/SRW Core/Sprites.js":
/*!********************************!*\
  !*** ./js/SRW Core/Sprites.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t\tSprite_Player: Sprite_Player,\r\n\t\tSprite_SrpgMoveTile:Sprite_SrpgMoveTile,\r\n\t\tSprite_MapEffect:Sprite_MapEffect,\r\n\t\tSprite_MapAttack:Sprite_MapAttack,\r\n\t\tSprite_WillIndicator:Sprite_WillIndicator,\r\n\t\tSprite_BasicShadow:Sprite_BasicShadow,\r\n\t\tSprite_DefendIndicator:Sprite_DefendIndicator,\r\n\t\tSprite_AttackIndicator:Sprite_AttackIndicator,\r\n\t\tSprite_TwinIndicator:Sprite_TwinIndicator,\r\n\t\tSprite_Destroyed:Sprite_Destroyed,\r\n\t\tSprite_Appear:Sprite_Appear,\r\n\t\tSprite_Disappear:Sprite_Disappear,\r\n\t\tSprite_Reticule:Sprite_Reticule,\r\n\t\tSprite_SrpgGrid:Sprite_SrpgGrid,\r\n\t\tSprite_AreaHighlights:Sprite_AreaHighlights,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tSprite_Character.prototype.setupAnimation = function() {\r\n\t\t\tif (this._character.animationId() > 0) {\r\n\t\t\t\tvar animation = $dataAnimations[this._character.animationId()];\r\n\t\t\t\tvar animOptions = this._character._animationOptions;\r\n\t\t\t\tif(animOptions){\r\n\t\t\t\t\tObject.keys(animOptions).forEach(function(key){\r\n\t\t\t\t\t\tanimation[key] = animOptions[key];\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tthis.startAnimation(animation, false, 0);\r\n\t\t\t\tthis._character.startAnimation();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tSprite_Animation.prototype.update = function() {\r\n\t\t\tSprite.prototype.update.call(this);\r\n\t\t\tthis.updateMain();\r\n\t\t\tthis.updateFlash();\r\n\t\t\tthis.updateScreenFlash();\r\n\t\t\tthis.updateHiding();\r\n\t\t\tSprite_Animation._checker1 = {};\r\n\t\t\tSprite_Animation._checker2 = {};\t\t\r\n\t\t\t\r\n\t\t\tthis.scale.x = 1;\r\n\t\t\tthis.scale.y = 1;\t\r\n\t\t\tthis.rotation = 0;\r\n\t\t\tif(this._animation.direction){\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(this._animation.direction == \"down\"){\r\n\t\t\t\t\tthis.scale.y = -1;\t\r\n\t\t\t\t}\r\n\t\t\t\tif(this._animation.direction == \"left\" || this._animation.direction == \"right\"){\t\t\t\t\r\n\t\t\t\t\tthis.scale.x = -1;\t\t\r\n\t\t\t\t\tthis.rotation = 90 * Math.PI / 180;\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(this._animation.direction == \"left\"){\r\n\t\t\t\t\tthis.scale.y = -1;\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif(this._animation.offset){\r\n\t\t\t\t\tvar offset = this._animation.offset[this._animation.direction];\t\r\n\t\t\t\t\tif(offset){\r\n\t\t\t\t\t\tthis.x+=offset.x;\r\n\t\t\t\t\t\tthis.y+=offset.y;\r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(this._animation.scale){\r\n\t\t\t\tthis.scale.y*=this._animation.scale;\r\n\t\t\t\tthis.scale.x*=this._animation.scale;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t};\r\n\t\t\t\r\n\t\tSprite_Animation.prototype.updatePosition = function() {\r\n\t\t\tif (this._animation.position === 3) {\r\n\t\t\t\tthis.x = this.parent.width / 2;\r\n\t\t\t\tthis.y = this.parent.height / 2;\r\n\t\t\t} else {\r\n\t\t\t\tvar parent = this._target.parent;\r\n\t\t\t\tvar grandparent = parent ? parent.parent : null;\r\n\t\t\t\tthis.x = this._target.x;\r\n\t\t\t\tthis.y = this._target.y;\r\n\t\t\t\tif (this.parent === grandparent) {\r\n\t\t\t\t\tthis.x += parent.x;\r\n\t\t\t\t\tthis.y += parent.y;\r\n\t\t\t\t}\r\n\t\t\t\tif (this._animation.position === 0) {\r\n\t\t\t\t\tthis.y -= this._target.height;\r\n\t\t\t\t} else if (this._animation.position === 1) {\r\n\t\t\t\t\tthis.y -= this._target.height / 2 - 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tvar _SRPG_Sprite_Actor_setActorHome = Sprite_Actor.prototype.setActorHome;\r\n\t\tSprite_Actor.prototype.setActorHome = function(index) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis.setHome(Graphics.width - 216 - index * 240, Graphics.height / 2 + 48);\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Sprite_Actor_setActorHome.call(this, index);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t//Character sprites are split into two a bottom and top part to improve overlap for units whose map icon goes outside their current tiles.\r\n\t\t//This can happen for flying units for example.\r\n\t\t//The base sprite is normally hidden, but is still available.\r\n\t\t\r\n\t\tSprite_Character.prototype.allBodyPartsAvailable = function(character) {\r\n\t\t\treturn this._upperBody && this._lowerBody && this._upperBodyTop && this._upperBodyOverlay && this._lowerBodyOverlay;\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.update = function(character) {\r\n\t\t\tSprite_Base.prototype.update.call(this);\r\n\t\t\tif(!this.visible) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.updateBitmap();\r\n\t\t\tthis.updateFrame();\r\n\t\t\tthis.updatePosition();\r\n\t\t\tthis.updateAnimation();\r\n\t\t\tthis.updateBalloon();\r\n\t\t\tthis.updateOther();\r\n\t\t\tif (this._character.isEvent() == true) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._character.eventId());\r\n\t\t\t\tif (battlerArray) {\r\n\t\t\t\t\tif ($gameSystem.isEnemy(battlerArray[1]) && !ENGINE_SETTINGS.KEEP_ENEMY_SPRITE_ORIENTATION) {\r\n\t\t\t\t\t\tthis.scale.x = -1;\t\t\t\r\n\t\t\t\t\t\tif(this.allBodyPartsAvailable()){\t\r\n\t\t\t\t\t\t\tthis._upperBody.scale.x = -1;\r\n\t\t\t\t\t\t\tthis._upperBodyOverlay.scale.x = -1;\r\n\t\t\t\t\t\t\tthis._upperBodyTop.scale.x = -1;\r\n\t\t\t\t\t\t\tthis._lowerBody.scale.x = -1;\r\n\t\t\t\t\t\t\tthis._lowerBodyOverlay.scale.x = -1;\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.scale.x = 1;\t\t\t\t\r\n\t\t\t\t\t\tif(this.allBodyPartsAvailable()){\t\r\n\t\t\t\t\t\t\tthis._upperBody.scale.x = 1;\r\n\t\t\t\t\t\t\tthis._upperBodyOverlay.scale.x = 1;\r\n\t\t\t\t\t\t\tthis._upperBodyTop.scale.x = 1;\r\n\t\t\t\t\t\t\tthis._lowerBody.scale.x = 1;\r\n\t\t\t\t\t\t\tthis._lowerBodyOverlay.scale.x = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(this.allBodyPartsAvailable()){\t\r\n\t\t\t\t\t\tif(battlerArray[0] === 'actor' && $gameTemp.doingManualDeploy){\r\n\t\t\t\t\t\t\tthis._frameCount+=2;\r\n\t\t\t\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\t\t\t\tif(this._frameCount < 100){\r\n\t\t\t\t\t\t\t\tthis._upperBody.opacity = this._frameCount + 80;\r\n\t\t\t\t\t\t\t\tthis._upperBodyTop.opacity = this._frameCount + 80;\r\n\t\t\t\t\t\t\t\tthis._lowerBody.opacity = this._frameCount + 80;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis._upperBody.opacity = 200 + 80 - this._frameCount;\r\n\t\t\t\t\t\t\t\tthis._upperBodyTop.opacity = 200 + 80 - this._frameCount;\r\n\t\t\t\t\t\t\t\tthis._lowerBody.opacity = 200 + 80 - this._frameCount;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis._upperBody.opacity = 255;\r\n\t\t\t\t\t\t\tthis._upperBodyTop.opacity = 255;\r\n\t\t\t\t\t\t\tthis._lowerBody.opacity = 255;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar refX;\r\n\t\t\t\t\t\tvar refY;\r\n\t\t\t\t\t\tif(this._character._x != this._character._realX || this._character._y != this._character._realY){\r\n\t\t\t\t\t\t\tif($gameMap.hasStarTile(this._character._x,  this._character._y) || $gameMap.hasStarTile(this._character._prevX,  this._character._prevY)){\r\n\t\t\t\t\t\t\t\tthis._upperBodyTop.opacity = 0;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif($gameSystem.foregroundSpriteToggleState == 0){\r\n\t\t\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 1){\r\n\t\t\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 2){\r\n\t\t\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//this._upperBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\t//this._lowerBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis._upperBodyTop.opacity = 255;\r\n\t\t\t\t\t\t\t\tthis._upperBody.opacity = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif($gameMap.hasStarTile(this._character._x,  this._character._y)){\r\n\t\t\t\t\t\t\t\tthis._upperBodyTop.opacity = 0;\r\n\t\t\t\t\t\t\t\tif($gameSystem.foregroundSpriteToggleState == 0){\r\n\t\t\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 0;\r\n\t\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 1){\r\n\t\t\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\t} else if($gameSystem.foregroundSpriteToggleState == 2){\r\n\t\t\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//this._upperBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t\t//this._lowerBodyOverlay.opacity = 128;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis._upperBodyTop.opacity = 255;\r\n\t\t\t\t\t\t\t\tthis._upperBody.opacity = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif($gameTemp.activeEvent() == this._character || \r\n\t\t\t\t\t\t\t$gameTemp._TargetEvent == this._character ||\r\n\t\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"actor_move\" || \r\n\t\t\t\t\t\t\t$gameSystem.isSubBattlePhase()== \"enemy_move\" || \r\n\t\t\t\t\t\t\t$gameSystem.isSubBattlePhase()== \"actor_target\" || \r\n\t\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"enemy_targeting_display\" ||\r\n\t\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"post_move_command_window\" ||\r\n\t\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"rearrange_deploys\" ||\r\n\t\t\t\t\t\t\t$gameSystem.isSubBattlePhase() == \"hover_deploy_btn\"\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t){\r\n\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity = 255;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(battlerArray && battlerArray[1] && $statCalc.getCurrentTerrain(battlerArray[1]) == \"water\"){\r\n\t\t\t\t\t\t\tthis._upperBody.opacity-=120;\r\n\t\t\t\t\t\t\tthis._upperBodyOverlay.opacity-=120;\r\n\t\t\t\t\t\t\tthis._upperBodyTop.opacity-=120;\r\n\t\t\t\t\t\t\tthis._lowerBody.opacity-=120;\r\n\t\t\t\t\t\t\tthis._lowerBodyOverlay.opacity-=120;\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.isTurnEndUnit = function() {\r\n\t\t\tif (this._character.isEvent() == true) {\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._character.eventId());\r\n\t\t\t\tif (battlerArray) {\r\n\t\t\t\t\tif (battlerArray[0] === 'actor' || battlerArray[0] === 'enemy') {\r\n\t\t\t\t\t\treturn battlerArray[1].srpgTurnEnd();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t//キャラクタービットマップの更新\r\n\t\tvar _SRPG_Sprite_Character_setCharacterBitmap = Sprite_Character.prototype.setCharacterBitmap;\r\n\t\tSprite_Character.prototype.setCharacterBitmap = function() {\r\n\t\t\t_SRPG_Sprite_Character_setCharacterBitmap.call(this);\r\n\t\t\tthis._turnEndBitmap = ImageManager.loadCharacter('srpg_set');\r\n\t\t\tthis._frameCount = 0;\r\n\t\t};\r\n\t\t\r\n\t\tSprite_Character.prototype.setUpperBodyTop = function(sprite) {\r\n\t\t\tthis._upperBodyTop = sprite;\r\n\t\t\tthis._upperBodyTop.anchor.x = 0.5;\r\n\t\t\tthis._upperBodyTop.anchor.y = 2;\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.setUpperBody = function(sprite) {\r\n\t\t\tthis._upperBody = sprite;\r\n\t\t\tthis._upperBody.anchor.x = 0.5;\r\n\t\t\tthis._upperBody.anchor.y = 2;\r\n\t\t}\r\n\r\n\t\tSprite_Character.prototype.setLowerBody = function(sprite) {\r\n\t\t\tthis._lowerBody = sprite;\r\n\t\t\tthis._lowerBody.anchor.x = 0.5;\r\n\t\t\tthis._lowerBody.anchor.y = 2;\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.setUpperBodyOverlay = function(sprite) {\r\n\t\t\tthis._upperBodyOverlay = sprite;\r\n\t\t\tthis._upperBodyOverlay.anchor.x = 0.5;\r\n\t\t\tthis._upperBodyOverlay.anchor.y = 2;\r\n\t\t}\r\n\r\n\t\tSprite_Character.prototype.setLowerBodyOverlay = function(sprite) {\r\n\t\t\tthis._lowerBodyOverlay = sprite;\r\n\t\t\tthis._lowerBodyOverlay.anchor.x = 0.5;\r\n\t\t\tthis._lowerBodyOverlay.anchor.y = 2;\r\n\t\t}\r\n\t\t\r\n\t\tSprite_Character.prototype.setTurnEnd = function(sprite) {\r\n\t\t\tthis._turnEndSprite = sprite;\r\n\t\t\tthis._turnEndSprite.anchor.x = 0;\r\n\t\t\tthis._turnEndSprite.anchor.y = 1;\r\n\t\t}\r\n\r\n\t\t\r\n\t\tSprite_Character.prototype.updateHalfBodySprites = function() {   \r\n\t\t\tif(this.allBodyPartsAvailable()){\t\t\r\n\t\t\t\tthis._upperBody.bitmap = this.bitmap;\r\n\t\t\t\tthis._upperBody.visible = true;\r\n\t\t\t\tthis._upperBodyTop.bitmap = this.bitmap;\r\n\t\t\t\tthis._upperBodyTop.visible = true;\r\n\t\t\t\tthis._lowerBody.bitmap = this.bitmap;\r\n\t\t\t\tthis._lowerBody.visible = true;\t\r\n\t\t\t\tthis._upperBodyOverlay.bitmap = this.bitmap;\r\n\t\t\t\tthis._upperBodyOverlay.visible = true;\r\n\t\t\t\tthis._lowerBodyOverlay.bitmap = this.bitmap;\r\n\t\t\t\tthis._lowerBodyOverlay.visible = true;\t\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tSprite_Character.prototype.updatePosition = function() {\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ();\r\n\t\t\t\r\n\t\t\tif(this.allBodyPartsAvailable()){\r\n\t\t\t\tthis._upperBody.x = this.x;\r\n\t\t\t\tthis._upperBody.y = this.y;\r\n\t\t\t\tthis._upperBody.z = this.z + 1;\r\n\t\t\t\t\r\n\t\t\t\tthis._upperBodyOverlay.x = this.x;\r\n\t\t\t\tthis._upperBodyOverlay.y = this.y;\r\n\t\t\t\tthis._upperBodyOverlay.z = this.z + 1;\r\n\t\t\t\t\r\n\t\t\t\tthis._upperBodyTop.x = this.x;\r\n\t\t\t\tthis._upperBodyTop.y = this.y;\r\n\t\t\t\tthis._upperBodyTop.z = this.z + 1;\r\n\t\t\t\t\r\n\t\t\t\tthis._lowerBody.x = this.x;\r\n\t\t\t\tthis._lowerBody.y = this.y + 24;\r\n\t\t\t\tthis._lowerBody.z = this.z;\r\n\t\t\t\t\r\n\t\t\t\tthis._lowerBodyOverlay.x = this.x;\r\n\t\t\t\tthis._lowerBodyOverlay.y = this.y + 24;\r\n\t\t\t\tthis._lowerBodyOverlay.z = this.z;\r\n\t\t\t\t\r\n\t\t\t\tthis._turnEndSprite.x = this.x - 20;\r\n\t\t\t\tthis._turnEndSprite.y = this.y - this._character._floatOffset;\r\n\t\t\t\tthis._turnEndSprite.z = this.z + 2;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t//キャラクターフレームの更新\r\n\t\tvar _SRPG_Sprite_Character_updateCharacterFrame = Sprite_Character.prototype.updateCharacterFrame;\r\n\t\tSprite_Character.prototype.updateCharacterFrame = function() {\r\n\t\t\tvar pw = this.patternWidth();\r\n\t\t\tvar ph = this.patternHeight();\r\n\t\t\tvar sx = (this.characterBlockX() + this.characterPatternX()) * pw;\r\n\t\t\tvar sy = (this.characterBlockY() + this.characterPatternY()) * ph;\r\n\t\t\t\r\n\t\t\tif(this.allBodyPartsAvailable() && this._character.isEvent() == true){\t\r\n\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._character.eventId());\r\n\t\t\t\t\r\n\t\t\t\tthis.updateHalfBodySprites();\r\n\t\t\t\r\n\t\t\t\tvar d = 24;\r\n\t\t\t\tthis._upperBody.setFrame(sx, sy, pw, ph - d);\r\n\t\t\t\tthis._upperBodyTop.setFrame(sx, sy, pw, ph - d);\r\n\t\t\t\tthis._upperBodyOverlay.setFrame(sx, sy, pw, ph - d);\r\n\t\t\t\tthis._lowerBody.setFrame(sx, sy + ph - d, pw, d);\t\r\n\t\t\t\tthis._lowerBodyOverlay.setFrame(sx, sy + ph - d, pw, d);\t\r\n\r\n\t\t\t\tif($gameSystem.isSubBattlePhase() !== 'actor_map_target_confirm' || $gameTemp.isMapTarget(this._character.eventId())){\t\t\t\t\r\n\t\t\t\t\tif(battlerArray && battlerArray[1] && $statCalc.getCurrentTerrain(battlerArray[1]) == \"water\"){\r\n\t\t\t\t\t\tthis._upperBody.setBlendColor([21, 87, 255, 64]);\t\r\n\t\t\t\t\t\tthis._upperBodyOverlay.setBlendColor([21, 87, 255, 64]);\t\r\n\t\t\t\t\t\tthis._upperBodyTop.setBlendColor([21, 87, 255, 64]);\t\r\n\t\t\t\t\t\tthis._lowerBody.setBlendColor([21, 87, 255, 64]);\r\n\t\t\t\t\t\tthis._lowerBodyOverlay.setBlendColor([21, 87, 255, 64]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._upperBody.setBlendColor([0, 0, 0, 0]);\t\r\n\t\t\t\t\t\tthis._upperBodyOverlay.setBlendColor([0, 0, 0, 0]);\t\r\n\t\t\t\t\t\tthis._upperBodyTop.setBlendColor([0, 0, 0, 0]);\r\n\t\t\t\t\t\tthis._lowerBody.setBlendColor([0, 0, 0, 0]);\r\n\t\t\t\t\t\tthis._lowerBodyOverlay.setBlendColor([0, 0, 0, 0]);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._upperBody.setBlendColor([0, 0, 0, 128]);\t\r\n\t\t\t\t\tthis._upperBodyOverlay.setBlendColor([0, 0, 0, 128]);\t\r\n\t\t\t\t\tthis._upperBodyTop.setBlendColor([0, 0, 0, 128]);\t\r\n\t\t\t\t\tthis._lowerBody.setBlendColor([0, 0, 0, 128]);\r\n\t\t\t\t\tthis._lowerBodyOverlay.setBlendColor([0, 0, 0, 128]);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tthis.visible = false;\r\n\t\t\t\t\r\n\t\t\t\t//hack to ensure there's no weird overlap issues when deploying an actor from a ship\r\n\t\t\t\tif($gameTemp.activeShip && $gameTemp.activeShip.event.eventId() != this._character.eventId()){\r\n\t\t\t\t\tif(this._character.posX() == $gameTemp.activeShip.position.x && this._character.posY() == $gameTemp.activeShip.position.y){\r\n\t\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\t\tthis.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\t\t\r\n\t\t\t\tthis.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t//this.visible = false;\r\n\t\t\t\tif ($gameSystem.isSRPGMode() == true && this._character.isEvent() == true) {\r\n\t\t\t\t\tvar battlerArray = $gameSystem.EventToUnit(this._character.eventId());\r\n\t\t\t\t\tif (battlerArray) {\t\t\t\t\r\n\t\t\t\t\t\tvar pw = this._turnEndBitmap.width / 12;\r\n\t\t\t\t\t\tvar ph = this._turnEndBitmap.height / 8;\r\n\t\t\t\t\t\tif ((battlerArray[0] === 'actor' || battlerArray[0] === 'enemy') &&\r\n\t\t\t\t\t\t\tbattlerArray[1].isAlive() && !this._character.isErased()) {\r\n\t\t\t\t\t\t\tif (battlerArray[1].isRestricted()) {\r\n\t\t\t\t\t\t\t\tvar sx = (6 + this.characterPatternX()) * pw;\r\n\t\t\t\t\t\t\t\tvar sy = (0 + this.characterPatternY()) * ph;\r\n\t\t\t\t\t\t\t\tthis.createTurnEndSprites();\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.bitmap = this._turnEndBitmap;\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.visible = true;\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t\t\t\t} else if (this.isTurnEndUnit() == true) {\r\n\t\t\t\t\t\t\t\tvar sx = (3 + this.characterPatternX()) * pw;\r\n\t\t\t\t\t\t\t\tvar sy = (0 + this.characterPatternY()) * ph;\r\n\t\t\t\t\t\t\t\tthis.createTurnEndSprites();\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.bitmap = this._turnEndBitmap;\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.visible = true;\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t\t\t\t} else if (battlerArray[1].isAutoBattle()) {\r\n\t\t\t\t\t\t\t\tvar sx = (9 + this.characterPatternX()) * pw;\r\n\t\t\t\t\t\t\t\tvar sy = (0 + this.characterPatternY()) * ph;\r\n\t\t\t\t\t\t\t\tthis.createTurnEndSprites();\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.bitmap = this._turnEndBitmap;\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.visible = true;\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.setFrame(sx, sy, pw, ph);\r\n\t\t\t\t\t\t\t} else if (this._turnEndSprite) {\r\n\t\t\t\t\t\t\t\tthis._turnEndSprite.visible = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (this._turnEndSprite) {\r\n\t\t\t\t\t\t\tthis._turnEndSprite.visible = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.setFrame(sx, sy, pw, ph);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\r\n\t\t//ターン終了の表示を作る\r\n\t\tSprite_Character.prototype.createTurnEndSprites = function() {\r\n\t\t\tif (!this._turnEndSprite) {\r\n\t\t\t\tthis._turnEndSprite = new Sprite();\r\n\t\t\t\tthis._turnEndSprite.anchor.x = 0.5;\r\n\t\t\t\tthis._turnEndSprite.anchor.y = 1;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\tthis.addChild(this._turnEndSprite);\r\n\t\t\t}\r\n\t\t};\t\r\n\t}\t\r\n\t\r\n\tfunction Sprite_Player() {\r\n        this.initialize.apply(this, arguments);\r\n    }\r\n\r\n    Sprite_Player.prototype = Object.create(Sprite_Character.prototype);\r\n    Sprite_Player.prototype.constructor = Sprite_Player;\r\n\t\r\n\tSprite_Player.prototype.updatePosition = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\tthis.y = this._character.screenY();\r\n\t\tthis.z = this._character.screenZ();\r\n\t\t\r\n\t\tif($gamePlayer.followedEvent && $gameTemp.followMove){\t\t\t\r\n\t\t\tthis.y = this.y + ($gamePlayer.followedEvent._floatOffset);\t\t\r\n\t\t} else {\r\n\t\t\tvar prevUnit = $statCalc.activeUnitAtPosition({x: this._character._prevX, y: this._character._prevY});\r\n\t\t\tvar prevHoverState = prevUnit && $statCalc.isFlying(prevUnit);\r\n\t\t\tvar newUnit = $statCalc.activeUnitAtPosition({x: this._character._x, y: this._character._y});\r\n\t\t\tvar newHoverState = newUnit && $statCalc.isFlying(newUnit);\r\n\t\t\tif(prevHoverState == newHoverState){\r\n\t\t\t\tif(prevHoverState){\r\n\t\t\t\t\tthis.y = this.y + (newUnit.event._floatOffset);\r\n\t\t\t\t}\t\t\t\r\n\t\t\t} else if(prevHoverState || newHoverState){\r\n\t\t\t\tvar floatOffset = 0;\r\n\t\t\t\tif(prevHoverState && prevUnit){\r\n\t\t\t\t\tfloatOffset = prevUnit.event._floatOffset;\r\n\t\t\t\t}\r\n\t\t\t\tif(newHoverState && newUnit){\r\n\t\t\t\t\tfloatOffset = newUnit.event._floatOffset;\r\n\t\t\t\t}\r\n\t\t\t\tvar delta = 0;\r\n\t\t\t\tif(this._character._x != this._character._realX || this._character._y != this._character._realY){\t\t\t\t\r\n\t\t\t\t\tif(this._character._x != this._character._realX){\r\n\t\t\t\t\t\tdelta = Math.abs(this._character._x - this._character._realX);\r\n\t\t\t\t\t} else if(this._character._y != this._character._realY){\r\n\t\t\t\t\t\tdelta = Math.abs(this._character._y - this._character._realY);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tvar ratio;\r\n\t\t\t\tif(newHoverState){\r\n\t\t\t\t\tratio = 1 - delta;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tratio = 0 + delta;\r\n\t\t\t\t}\r\n\t\t\t\tthis.y = this.y + (floatOffset * ratio);\r\n\t\t\t}\r\n\t\t}\t\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\r\n\r\n\r\n//====================================================================\r\n// ●Sprite_SrpgMoveTile\r\n//====================================================================\r\n    function Sprite_SrpgMoveTile() {\r\n        this.initialize.apply(this, arguments);\r\n    }\r\n\r\n    Sprite_SrpgMoveTile.prototype = Object.create(Sprite.prototype);\r\n    Sprite_SrpgMoveTile.prototype.constructor = Sprite_SrpgMoveTile;\r\n\r\n    Sprite_SrpgMoveTile.prototype.initialize = function() {\r\n        Sprite.prototype.initialize.call(this);\r\n        this.createBitmap();\r\n        this._frameCount = 0;\r\n        this._posX = -1;\r\n        this._posY = -1;\r\n        this.visible = false;\r\n    };\r\n\r\n    Sprite_SrpgMoveTile.prototype.isThisMoveTileValid = function() {\r\n        return this._posX >= 0 && this._posY >= 0;\r\n    }\r\n\r\n    Sprite_SrpgMoveTile.prototype.setThisMoveTile = function(x, y, attackFlag) {\r\n        this._frameCount = 0;\r\n        this._posX = x;\r\n        this._posY = y;\r\n        if (attackFlag == true) {\r\n            this.bitmap.fillAll('red');\r\n        } else {\r\n            this.bitmap.fillAll('blue');\r\n        }\r\n    }\r\n\r\n    Sprite_SrpgMoveTile.prototype.clearThisMoveTile = function() {\r\n        this._frameCount = 0;\r\n        this._posX = -1;\r\n        this._posY = -1;\r\n    }\r\n\r\n    Sprite_SrpgMoveTile.prototype.update = function() {\r\n        Sprite.prototype.update.call(this);\r\n        if (this.isThisMoveTileValid()){\r\n            this.updatePosition();\r\n            this.updateAnimation();\r\n            this.visible = true;\r\n        } else {\r\n            this.visible = false;\r\n        }\r\n    };\r\n\r\n    Sprite_SrpgMoveTile.prototype.createBitmap = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.bitmap = new Bitmap(tileWidth, tileHeight);\r\n        this.anchor.x = 0.5;\r\n        this.anchor.y = 0.5;\r\n        this.blendMode = Graphics.BLEND_ADD;\r\n    };\r\n\r\n    Sprite_SrpgMoveTile.prototype.updatePosition = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.x = ($gameMap.adjustX(this._posX) + 0.5) * tileWidth;\r\n        this.y = ($gameMap.adjustY(this._posY) + 0.5) * tileHeight;\r\n    };\r\n\r\n    Sprite_SrpgMoveTile.prototype.updateAnimation = function() {\r\n       /* this._frameCount++;\r\n        this._frameCount %= 40;\r\n        this.opacity = (40 - this._frameCount) * 3;*/\r\n    };\r\n\t\r\n//====================================================================\r\n// ●Sprite_MapEffect\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_MapEffect() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_MapEffect.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_MapEffect.prototype.constructor = Sprite_MapEffect;\r\n\r\n\tSprite_MapEffect.prototype.initialize = function(spriteInfo, position) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\tthis.bitmap =  ImageManager.loadNormalBitmap('img/SRWMapEffects/'+spriteInfo.name+\".png\");\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.5;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\tthis._frameSize = spriteInfo.frameSize;\r\n\t\tthis._sheetHeight = spriteInfo.sheetHeight;\r\n\t\tthis._sheetWidth = spriteInfo.sheetWidth;\r\n\t\tthis._frames = spriteInfo.frames;\r\n\t\tthis._frameCounter = 0;\r\n\t\tthis._animationSpeed = spriteInfo.animationSpeed || 2;\r\n\t\tthis._position = position;\r\n\t\tthis._positionOffset = spriteInfo.offset || {x: 0, y: 0}\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_MapEffect.prototype.updatePosition = function() {\r\n\t\tthis.x = this._position.x + this._positionOffset.x;\r\n\t\tthis.y = this._position.y + this._positionOffset.y;\r\n\t\tthis.z = 999;\r\n\t}\r\n\t\r\n\tSprite_MapEffect.prototype.update = function() {\t\r\n\t\tthis.updatePosition();\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis.parent.removeChild(this);\r\n\t\t} else {\t\t\t\t\t\t\t\t\r\n\t\t\tthis.visible = true;\r\n\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\tthis._frameCounter++;\r\n\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\tthis._animationFrame++;\r\n\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t}\t\t\t\t\r\n\t\t}\t\t\t\r\n\t};\t\r\n\t\r\n\tfunction Sprite_MapAttack() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_MapAttack.prototype = Object.create(Sprite_MapEffect.prototype);\r\n\tSprite_MapAttack.prototype.constructor = Sprite_MapAttack;\r\n\t\r\n\tSprite_MapAttack.prototype.updatePosition = function() {\r\n\t\tthis.scale.x = 1;\r\n\t\tthis.scale.y = 1;\t\t\r\n\t\tvar offset = JSON.parse(JSON.stringify(this._positionOffset));\r\n\t\tif($gameTemp.mapTargetDirection == \"left\"){\r\n\t\t\toffset.x*= -1;\r\n\t\t\tthis.scale.x = -1;\t\r\n\t\t}\r\n\t\tif($gameTemp.mapTargetDirection == \"up\" || $gameTemp.mapTargetDirection == \"down\"){\r\n\t\t\tvar tmp = offset.x;\r\n\t\t\toffset.x = offset.y;\r\n\t\t\toffset.y = tmp;\r\n\t\t\tthis.scale.y = -1;\t\t\r\n\t\t}\r\n\t\tif($gameTemp.mapTargetDirection == \"up\"){\r\n\t\t\toffset.y*= -1;\r\n\t\t}\t\t\r\n\t\tthis.x = this._position.x + offset.x;\r\n\t\tthis.y = this._position.y + offset.y;\r\n\t\tthis.z = 999;\r\n\t}\r\n\t\r\n//====================================================================\r\n// ●Sprite_WillIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_WillIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_WillIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_WillIndicator.prototype.constructor = Sprite_WillIndicator;\r\n\r\n\tSprite_WillIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\t\t\r\n\t\tthis.text = new PIXI.Text('',\r\n\t\t{\r\n\t\t  fontFamily : 'Arial',\r\n\t\t  fontSize: \"13px\",\r\n\t\t  fill : 0xffffff,\r\n\t\t  cacheAsBitmap: true, // for better performance\r\n\t\t  height: 30,\r\n\t\t  width: 20,\r\n\t\t});\r\n\t\tthis.addChild(this.text);\r\n\t\tthis._previousEventType = -1;\r\n\t};\r\n\r\n\tSprite_WillIndicator.prototype.update = function() {\r\n\t\tvar type = this._character.isType();\r\n\t\tthis._isEnemy = type === 'enemy'\r\n\t\tif(this._previousEventType != type){\r\n\t\t\tthis._previousEventType = type;\r\n\t\t\tif(this._isEnemy){\r\n\t\t\t\tthis.bitmap = ImageManager.loadSystem('WillIndicatorEnemy');\r\n\t\t\t} else {\r\n\t\t\t\tthis.bitmap = ImageManager.loadSystem('WillIndicator');\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\t\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t\t\r\n\t\t \r\n\t\tif(this._isEnemy){\r\n\t\t\tthis.text.anchor.set(0); \r\n\t\t\tthis.text.x = -23; \r\n\t\t\tthis.text.y = -49.5\t;\r\n\t\t} else {\r\n\t\t\tthis.text.anchor.set(1); \r\n\t\t\tthis.text.x = 23; \r\n\t\t\tthis.text.y = -33.5\t;\r\n\t\t}\t\r\n\t\t\r\n\t\tthis.x = this._character.screenX();\r\n\t\tthis.y = this._character.screenY();\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\tif($gameSystem.showWillIndicator && battlerArray){\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tif(unit && !this._character.isErased()){\r\n\t\t\t\tthis.opacity = 255;\r\n\t\t\t\tvar maxWill = $statCalc.getMaxWill(unit);\r\n\t\t\t\tvar will = $statCalc.getCurrentWill(unit);\r\n\t\t\t\t//this.drawText(will, 0, 0, 20);\r\n\t\t\t\tthis.text.text = will;\r\n\t\t\t\tvar color = \"#ffffff\";\t\t\t\t\r\n\t\t\t\tif(will < 100){\r\n\t\t\t\t\tcolor = \"#f1de55\";\r\n\t\t\t\t} \r\n\t\t\t\tif(will <= 50){\r\n\t\t\t\t\tcolor = \"#ff2222\";\r\n\t\t\t\t}\r\n\t\t\t\tif(will == maxWill){\r\n\t\t\t\t\tcolor = \"#00f1ff\";\r\n\t\t\t\t}\r\n\t\t\t\tthis.text.style.fill = color;\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\r\n\t\r\n//====================================================================\r\n// ●Sprite_BasicShadow\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_BasicShadow() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_BasicShadow.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_BasicShadow.prototype.constructor = Sprite_BasicShadow;\r\n\r\n\tSprite_BasicShadow.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadPicture('flight_shadow');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t};\r\n\r\n\tSprite_BasicShadow.prototype.update = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\tthis.y = this._character.screenY();\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\tif(battlerArray){\r\n\t\t\tif (this._character._characterName == \"\" || this._character._transparent || !$statCalc.isFlying(battlerArray[1])) {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t} else {\r\n\t\t\t\tthis.y-=this._character._floatOffset;\r\n\t\t\t\tthis.opacity = this._character._opacity - 128;\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\r\n\r\n//====================================================================\r\n// ●Sprite_DefendIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_DefendIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_DefendIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_DefendIndicator.prototype.constructor = Sprite_DefendIndicator;\r\n\r\n\tSprite_DefendIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadSystem('shield');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t\tthis._frameCount = 0;\r\n\t};\r\n\r\n\tSprite_DefendIndicator.prototype.update = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\t\r\n\t\tthis.y = this._character.screenY() - 2;\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\r\n\t\tif(battlerArray){\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tvar isShown = true;\r\n\t\t\tif(!$gameSystem.isEnemy(unit)){\r\n\t\t\t\tif(!$gameTemp.showAllyDefendIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() + 15;\r\n\t\t\t} else {\r\n\t\t\t\tif(!$gameTemp.showEnemyDefendIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() - 15;\r\n\t\t\t}\r\n\t\t\tif($gameSystem.isBattlePhase() === 'AI_phase' || $gameSystem.isSubBattlePhase() === 'actor_target'){\r\n\t\t\t\tvar activeEvent = $gameTemp.activeEvent();\r\n\t\t\t\tif(activeEvent){\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(activeEvent.eventId())[1];\r\n\t\t\t\t\tif($gameSystem.isFriendly(actor, $gameSystem.getFactionId(unit))){\r\n\t\t\t\t\t\tif(!actor || !$statCalc.canSupportDefend(actor, unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(!$statCalc.hasSupportDefend(unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif($gameTemp.summaryUnit && !$statCalc.canSupportDefend($gameTemp.summaryUnit, unit)){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(isShown && unit && !this._character.isErased()){\r\n\t\t\t\r\n\t\t\t\tthis._frameCount+=2;\r\n\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\tif(this._frameCount < 100){\r\n\t\t\t\t\tthis.opacity = this._frameCount + 120;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 200 + 120 - this._frameCount;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\r\n\t\r\n//====================================================================\r\n// ●Sprite_AttackIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_AttackIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_AttackIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_AttackIndicator.prototype.constructor = Sprite_AttackIndicator;\r\n\r\n\tSprite_AttackIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadSystem('sword');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t\tthis._frameCount = 0;\r\n\t};\r\n\r\n\tSprite_AttackIndicator.prototype.update = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\t\r\n\t\tthis.y = this._character.screenY() - 2;\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\r\n\t\tif(battlerArray){\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tvar isShown = true;\r\n\t\t\tif(!$gameSystem.isEnemy(unit)){\r\n\t\t\t\tif(!$gameTemp.showAllyAttackIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() - 15;\r\n\t\t\t} else {\r\n\t\t\t\tif(!$gameTemp.showEnemyAttackIndicator){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.x = this._character.screenX() + 15;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif($gameSystem.isBattlePhase() === 'AI_phase' || $gameSystem.isSubBattlePhase() === 'actor_target'){\r\n\t\t\t\tvar activeEvent = $gameTemp.activeEvent();\r\n\t\t\t\tif(activeEvent){\r\n\t\t\t\t\tvar actor = $gameSystem.EventToUnit(activeEvent.eventId())[1];\r\n\t\t\t\t\tif($gameSystem.isFriendly(actor, $gameSystem.getFactionId(unit))){\r\n\t\t\t\t\t\tif(!actor || !$statCalc.canSupportAttack(actor, unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif(!$statCalc.hasSupportAttack(unit)){\r\n\t\t\t\t\t\t\tisShown = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tif(!$gameTemp.summaryUnit || !$statCalc.canSupportAttack($gameTemp.summaryUnit, unit)){\r\n\t\t\t\t\tisShown = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(isShown && unit && !this._character.isErased()){\r\n\t\t\t\r\n\t\t\t\tthis._frameCount+=2;\r\n\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\tif(this._frameCount < 100){\r\n\t\t\t\t\tthis.opacity = this._frameCount + 120;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 200 + 120 - this._frameCount;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\t\r\n\t\r\n//====================================================================\r\n// ●Sprite_TwinIndicator\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_TwinIndicator() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_TwinIndicator.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_TwinIndicator.prototype.constructor = Sprite_TwinIndicator;\r\n\r\n\tSprite_TwinIndicator.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis._character = character;\r\n\t\tthis.bitmap =  ImageManager.loadSystem('twin');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 1;\r\n\t\tthis._frameCount = 0;\r\n\t};\r\n\r\n\tSprite_TwinIndicator.prototype.update = function() {\r\n\t\tthis.x = this._character.screenX();\r\n\t\t\r\n\t\tthis.y = this._character.screenY() - 30;\r\n\t\t//this.z = this._character.screenZ() - 1;\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\r\n\t\tif(battlerArray){\r\n\t\t\tvar unit = battlerArray[1];\r\n\t\t\tif(!$gameSystem.isEnemy(unit)){\t\t\t\t\r\n\t\t\t\tthis.x = this._character.screenX() - 15;\r\n\t\t\t} else {\r\n\t\t\t\tthis.x = this._character.screenX() + 15;\r\n\t\t\t}\t\t\r\n\t\t\t\r\n\t\t\tif($statCalc.isMainTwin(unit) && unit && !this._character.isErased()){\r\n\t\t\t\r\n\t\t\t\t/*this._frameCount+=2;\r\n\t\t\t\tthis._frameCount %= 200;\r\n\t\t\t\tif(this._frameCount < 100){\r\n\t\t\t\t\tthis.opacity = this._frameCount + 120;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.opacity = 200 + 120 - this._frameCount;\r\n\t\t\t\t}*/\r\n\t\t\t\tthis.opacity = 255;\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t};\t\r\n\t\t\r\n\t\r\n//====================================================================\r\n// Sprite_Destroyed\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Destroyed() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Destroyed.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Destroyed.prototype.constructor = Sprite_Destroyed;\r\n\r\n\tSprite_Destroyed.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\tthis.bitmap =  ImageManager.loadAnimation('Explosion1');\r\n\t\tthis._character = character;\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.6;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\tthis._frameSize = 192;\r\n\t\tthis._sheetHeight = 3;\r\n\t\tthis._sheetWidth = 5;\r\n\t\tthis._frames = 11;\r\n\t\tthis._frameCounter = 0;\r\n\t\tthis._animationSpeed = 2;\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_Destroyed.prototype.setCharacter = function(character){\r\n\t\tthis._character = character;\r\n\t}\r\n\r\n\tSprite_Destroyed.prototype.update = function() {\r\n\t\tif(this._character.manuallyErased){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis._character.isDoingDeathAnim = false;\r\n\t\t\tthis._processedDeath = false;\r\n\t\t\tthis._animationFrame = 0;\r\n\t\t} else {\r\n\t\t\tvar eventId = this._character.eventId();\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\t\r\n\t\t\tif(this._animationFrame == 3 && !this._processedDeath){\r\n\t\t\t\tthis._processedDeath = true;\r\n\t\t\t\tif(this._character.isDoingSubTwinDeath){\r\n\t\t\t\t\t$statCalc.swapEvent(this._character, true);\r\n\t\t\t\t\t//_this._currentDeath.event.appear();\r\n\t\t\t\t\t//this._character.refreshImage();\r\n\t\t\t\t\t$statCalc.getMainTwin(battlerArray[1]).subTwin = null;\r\n\t\t\t\t} else if(this._character.isDoingMainTwinDeath){\t\r\n\t\t\t\t\t$statCalc.swapEvent(this._character, true);\r\n\t\t\t\t\t$statCalc.getMainTwin(battlerArray[1]).subTwin = null;\r\n\t\t\t\t\t//battlerArray[1].subTwin.isSubTwin = false;\r\n\t\t\t\t\t//battlerArray[1].subTwin = null;\r\n\t\t\t\t} else {\t\r\n\t\t\t\t\tthis._character.erase();\t\r\n\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t}\t\t\t\t\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ() + 1;\r\n\t\t\t\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tif (this._character.isDoingDeathAnim) {\r\n\t\t\t\t\tif(this._animationFrame == 1){\r\n\t\t\t\t\t\tvar se = {};\r\n\t\t\t\t\t\tse.name = 'SRWExplosion';\r\n\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\tse.volume = 80;\r\n\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\t\t\tthis._frameCounter++;\r\n\t\t\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\t\t\tthis._animationFrame++;\r\n\t\t\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t}\t\r\n\t\t}\t\t\t\r\n\t};\t\r\n\t\r\n//====================================================================\r\n// Sprite_Appear\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Appear() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Appear.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Appear.prototype.constructor = Sprite_Appear;\r\n\r\n\tSprite_Appear.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\t\r\n\t\tthis._character = character;\r\n\t\t\r\n\t\t\r\n\t\tthis._initialized = false;\r\n\t\t\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.6;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\t\r\n\t\tthis._sheetHeight = 3;\r\n\t\t\r\n\t\tthis._frameCounter = 0;\r\n\t\t\r\n\t\t\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_Appear.prototype.setCharacter = function(character){\r\n\t\tthis._character = character;\r\n\t}\r\n\t\r\n\tSprite_Appear.prototype.erase = function() {\r\n\t\tthis._initialized = false;\r\n\t\tthis._erased = true;\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tSprite_Appear.prototype.update = function() {\r\n\t\tvar eventId = this._character.eventId();\r\n\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\tif(!this._initialized && battlerArray && battlerArray[1]){\r\n\t\t\tthis._initialized = true;\r\n\t\t\tvar animInfo = $statCalc.getSpawnAnimInfo(battlerArray[1]);\r\n\t\t\tthis.bitmap =  ImageManager.loadAnimation(animInfo.name);\r\n\t\t\tthis._frameSize = animInfo.frameSize;\r\n\t\t\tthis._sheetWidth = animInfo.sheetWidth;\r\n\t\t\tthis._frames = animInfo.frames;\r\n\t\t\tthis._animationSpeed = animInfo.speed;\r\n\t\t\tthis._appearFrame = animInfo.appearFrame;\r\n\t\t\tthis._se = animInfo.se;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis._character.isDoingAppearAnim = false;\r\n\t\t} else {\r\n\t\t\tif(this._animationFrame == this._appearFrame){\r\n\t\t\t\tthis._character.appear();\r\n\t\t\t\tthis._character.refreshImage();\r\n\t\t\t}\t\t\t\t\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ() + 1;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tif (this._character.isDoingAppearAnim) {\r\n\t\t\t\t\tif(this._animationFrame == 0){\r\n\t\t\t\t\t\tvar se = {};\r\n\t\t\t\t\t\tse.name = this._se;\r\n\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\tse.volume = 60;\r\n\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\t\t\tthis._frameCounter++;\r\n\t\t\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\t\t\tthis._animationFrame++;\r\n\t\t\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t}\t\r\n\t\t}\t\t\t\r\n\t};\t\r\n\r\n//====================================================================\r\n// Sprite_Disappear\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Disappear() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Disappear.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Disappear.prototype.constructor = Sprite_Disappear;\r\n\r\n\tSprite_Disappear.prototype.initialize = function(character) {\r\n\t\tSprite_Base.prototype.initialize.call(this);\t\t\r\n\t\tthis.bitmap =  ImageManager.loadAnimation('SRWDisappear');\r\n\t\tthis._character = character;\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.6;\r\n\t\tthis._animationFrame = 0;\r\n\t\tthis.visible = false;\r\n\t\tthis._frameSize = 192;\r\n\t\tthis._sheetHeight = 3;\r\n\t\tthis._sheetWidth = 5;\r\n\t\tthis._frames = 8;\r\n\t\tthis._frameCounter = 0;\r\n\t\tthis._animationSpeed = 2;\r\n\t\tthis.setFrame(0 * this._frameSize, 0 * this._frameSize, this._frameSize, this._frameSize);\r\n\t};\r\n\t\r\n\tSprite_Disappear.prototype.setCharacter = function(character){\r\n\t\tthis._character = character;\r\n\t}\r\n\r\n\tSprite_Disappear.prototype.update = function() {\r\n\t\tif(this._animationFrame > this._frames){\r\n\t\t\tthis.visible = false;\r\n\t\t\tthis._character.isDoingDisappearAnim = false;\r\n\t\t} else {\r\n\t\t\tif(this._animationFrame == 3){\r\n\t\t\t\tthis._character.erase();\r\n\t\t\t}\t\t\t\t\r\n\t\t\tthis.x = this._character.screenX();\r\n\t\t\tthis.y = this._character.screenY();\r\n\t\t\tthis.z = this._character.screenZ() + 1;\r\n\t\t\tvar eventId = this._character.eventId();\r\n\t\t\tvar battlerArray = $gameSystem.EventToUnit(eventId);\r\n\t\t\tif(battlerArray && battlerArray[1]){\r\n\t\t\t\tif (this._character.isDoingDisappearAnim) {\r\n\t\t\t\t\tif(this._animationFrame == 0){\r\n\t\t\t\t\t\tvar se = {};\r\n\t\t\t\t\t\tse.name = 'SRWDisappear';\r\n\t\t\t\t\t\tse.pan = 0;\r\n\t\t\t\t\t\tse.pitch = 100;\r\n\t\t\t\t\t\tse.volume = 60;\r\n\t\t\t\t\t\tAudioManager.playSe(se);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.visible = true;\r\n\t\t\t\t\tvar col = this._animationFrame % this._sheetWidth;\r\n\t\t\t\t\tvar row = Math.floor(this._animationFrame / this._sheetWidth);\r\n\t\t\t\t\tthis.setFrame(col * this._frameSize, row * this._frameSize, this._frameSize, this._frameSize);\r\n\t\t\t\t\tthis._frameCounter++;\r\n\t\t\t\t\tif(this._frameCounter >= this._animationSpeed){\r\n\t\t\t\t\t\tthis._animationFrame++;\r\n\t\t\t\t\t\tthis._frameCounter = 0;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t} \r\n\t\t\t}\t\r\n\t\t}\t\t\t\r\n\t};\t\t\r\n\t\r\n\t\r\n//====================================================================\r\n// Sprite_SrpgGrid\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_Reticule() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_Reticule.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_Reticule.prototype.constructor = Sprite_Reticule;\r\n\r\n\tSprite_Reticule.prototype.initialize = function() {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis.bitmap =  ImageManager.loadPicture('reticule');\r\n\t\tthis.anchor.x = 0.5;\r\n\t\tthis.anchor.y = 0.5;\r\n\t\tthis._duration = 10;\r\n\t\tthis._holdDuration = 20;\r\n\t};\r\n\t\r\n\tSprite_Reticule.prototype.start = function(info) {\r\n\t\tthis._time = 0;\r\n\t\tthis._actor = info.actor;\r\n\t\tthis._targetActor = info.targetActor;\r\n\t}\r\n\r\n\tSprite_Reticule.prototype.update = function() {\r\n\t\tfunction lerp(start, end, t){\r\n\t\t//\tt => 1-(--t)*t*t*t;\r\n\t\t\treturn start + (end - start) * t;\r\n\t\t}\r\n\t\t\r\n\t\tif(this._time > this._duration){\r\n\t\t\tif(this._time < this._duration + this._holdDuration){\r\n\t\t\t\tvar scaleFactor = 1.05 + (Math.sin((this._time - this._duration) / 2) / 15);\r\n\t\t\t\tthis.scale.x = scaleFactor;\r\n\t\t\t\tthis.scale.y = scaleFactor;\r\n\t\t\t} else {\r\n\t\t\t\t$gameTemp.reticuleInfo = null;\r\n\t\t\t\tthis._actor = null;\r\n\t\t\t\tthis._targetActor = null;\r\n\t\t\t\tthis._time = 0;\r\n\t\t\t\tthis.scale.x = 1;\r\n\t\t\t\tthis.scale.y = 1;\r\n\t\t\t}\t\t\t\r\n\t\t}\r\n\t\tif(this._actor && this._targetActor){\t\r\n\t\t\tif(this._time <= this._duration){\r\n\t\t\t\tthis.visible = true;\r\n\t\t\t\tthis.x = lerp(this._actor.event.screenX(), this._targetActor.event.screenX(), this._time / this._duration);\r\n\t\t\t\tthis.y = lerp(this._actor.event.screenY() - 24, this._targetActor.event.screenY() - 24, this._time / this._duration);\t\t\t\t\r\n\t\t\t}\r\n\t\t\tthis._time++;\r\n\t\t} else if($gameTemp.reticuleInfo){\r\n\t\t\tthis.start($gameTemp.reticuleInfo);\r\n\t\t} else {\t\r\n\t\t\tthis.visible = false;\r\n\t\t}\t\t\r\n\t};\r\n//====================================================================\r\n// Sprite_SrpgGrid\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_SrpgGrid() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_SrpgGrid.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_SrpgGrid.prototype.constructor = Sprite_SrpgGrid;\r\n\r\n\tSprite_SrpgGrid.prototype.initialize = function() {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\tthis.bitmap = new Bitmap($gameMap.tileWidth() * $gameMap.width(), $gameMap.tileHeight() * $gameMap.height());\r\n\t\tfor(var i = 0; i < $gameMap.width(); i++){\r\n\t\t\tthis.bitmap.fillRect(i * $gameMap.tileWidth(), 0, 1 , this.bitmap.height, \"white\");\r\n\t\t}\r\n\t\tfor(var i = 0; i < $gameMap.height(); i++){\r\n\t\t\tthis.bitmap.fillRect(0, i * $gameMap.tileHeight(), this.bitmap.width , 1, \"white\");\r\n\t\t}\r\n\t\t\r\n\t\tthis.anchor.x = 0;\r\n\t\tthis.anchor.y = 0;\r\n\t\tthis._posX = 0;\r\n\t\tthis._posY = 0;\r\n\t\t//this.blendMode = Graphics.BLEND_ADD;\r\n\t};\r\n\r\n\tSprite_SrpgGrid.prototype.update = function() {\r\n\t\tif($gameSystem.enableGrid && !$gameSystem.optionDisableGrid){\r\n\t\t\tthis.opacity = 128;\r\n\t\t} else {\r\n\t\t\tthis.opacity = 0;\r\n\t\t}\t\t\r\n\t\tthis.updatePosition();\t\t\r\n\t\t//this.bitmap.fillAll('red');\r\n\t};\r\n\t\r\n\tSprite_SrpgGrid.prototype.updatePosition = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.x = ($gameMap.adjustX(this._posX) + 0.5) * tileWidth -$gameMap.tileWidth()/2;\r\n        this.y = ($gameMap.adjustY(this._posY) + 0.5) * tileHeight -$gameMap.tileHeight()/2;\r\n\t\tthis.z = 0;\r\n    };\r\n\r\n//====================================================================\r\n// Sprite_AreaHighlights\r\n//====================================================================\t\r\n\t\r\n\tfunction Sprite_AreaHighlights() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tSprite_AreaHighlights.prototype = Object.create(Sprite_Base.prototype);\r\n\tSprite_AreaHighlights.prototype.constructor = Sprite_AreaHighlights;\r\n\r\n\tSprite_AreaHighlights.prototype.initialize = function() {\r\n\t\tSprite_Base.prototype.initialize.call(this);\r\n\t\t/*for(var i = 0; i < $gameMap.width(); i++){\r\n\t\t\tthis.bitmap.fillRect(i * $gameMap.tileWidth(), 0, 1 , this.bitmap.height, \"white\");\r\n\t\t}\r\n\t\tfor(var i = 0; i < $gameMap.height(); i++){\r\n\t\t\tthis.bitmap.fillRect(0, i * $gameMap.tileHeight(), this.bitmap.width , 1, \"white\");\r\n\t\t}*/\r\n\t\tthis.bitmap = new Bitmap($gameMap.tileWidth() * $gameMap.width(), $gameMap.tileHeight() * $gameMap.height());\r\n\t\tthis.construct();\r\n\t\tthis.anchor.x = 0;\r\n\t\tthis.anchor.y = 0;\r\n\t\tthis._posX = 0;\r\n\t\tthis._posY = 0;\r\n\t\t//this.opacity = 128;\r\n\t\t//this.blendMode = Graphics.BLEND_ADD;\r\n\t\tthis._frameCount = 0;\r\n\t\t\r\n\t\t\r\n\t};\r\n\t\r\n\tSprite_AreaHighlights.prototype.construct = function() {\r\n\t\tvar _this = this;\r\n\t\tthis._frameCount = 0;\r\n\t\tthis.bitmap.clearRect(0, 0, $gameMap.tileWidth() * $gameMap.width(), $gameMap.tileHeight() * $gameMap.height());\t\t\t\r\n\t\t\t\r\n\t\tif($gameSystem.highlightedTiles){\r\n\t\t\tfor(var i = 0; i < $gameSystem.highlightedTiles.length; i++){\r\n\t\t\t\tvar highlight = $gameSystem.highlightedTiles[i];\r\n\t\t\t\tthis.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), highlight.color);\r\n\t\t\t}\r\n\t\t}\t\r\n\t\tif($gameSystem.regionHighlights){\r\n\t\t\tObject.keys($gameSystem.regionHighlights).forEach(function(regionId){\r\n\t\t\t\tvar color = $gameSystem.regionHighlights[regionId];\r\n\t\t\t\tvar tileCoords = $gameMap.getRegionTiles(regionId);\r\n\t\t\t\tfor(var i = 0; i < tileCoords.length; i++){\r\n\t\t\t\t\tvar highlight = tileCoords[i];\r\n\t\t\t\t\t_this.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), color);\r\n\t\t\t\t}\r\n\t\t\t});\t\t\t\r\n\t\t}\t\r\n\t\tif($gameSystem.highlightedMapRetargetTiles){\r\n\t\t\tfor(var i = 0; i < $gameSystem.highlightedMapRetargetTiles.length; i++){\r\n\t\t\t\tvar highlight = $gameSystem.highlightedMapRetargetTiles[i];\r\n\t\t\t\tthis.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), highlight.color);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif($gameSystem.highlightedActionTiles){\r\n\t\t\tfor(var i = 0; i < $gameSystem.highlightedActionTiles.length; i++){\r\n\t\t\t\tvar highlight = $gameSystem.highlightedActionTiles[i];\r\n\t\t\t\tthis.bitmap.fillRect(highlight.x * $gameMap.tileWidth(), highlight.y * $gameMap.tileHeight(), $gameMap.tileWidth(), $gameMap.tileHeight(), highlight.color);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tSprite_AreaHighlights.prototype.update = function() {\r\n\t\tif($gameSystem.highlightsRefreshed){\r\n\t\t\t$gameSystem.highlightsRefreshed = false;\r\n\t\t\tthis.construct();\r\n\t\t}\t\r\n\t\tthis.updatePosition();\t\t\r\n\t\tif($gameTemp.disableHighlightGlow){\r\n\t\t\tthis.opacity = 128;\r\n\t\t} else {\r\n\t\t\tthis._frameCount+=2;\r\n\t\t\tthis._frameCount %= 200;\r\n\t\t\tif(this._frameCount < 100){\r\n\t\t\t\tthis.opacity = this._frameCount + 80;\r\n\t\t\t} else {\r\n\t\t\t\tthis.opacity = 200 + 80 - this._frameCount;\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t};\r\n\t\r\n\tSprite_AreaHighlights.prototype.updatePosition = function() {\r\n        var tileWidth = $gameMap.tileWidth();\r\n        var tileHeight = $gameMap.tileHeight();\r\n        this.x = ($gameMap.adjustX(this._posX) + 0.5) * tileWidth -$gameMap.tileWidth()/2;\r\n        this.y = ($gameMap.adjustY(this._posY) + 0.5) * tileHeight -$gameMap.tileHeight()/2;\r\n\t\tthis.z = 0;\r\n    };\r\n\t\n\n//# sourceURL=webpack:///./js/SRW_Core/Sprites.js?");

/***/ }),

/***/ "./js/SRW Core/Windows.js":
/*!********************************!*\
  !*** ./js/SRW Core/Windows.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\t/* harmony default export */ __webpack_exports__[\"default\"] = ({\r\n\t\tpatches: patches,\r\n\t\tWindow_CounterCommand: Window_CounterCommand,\r\n\t\tWindow_SRWItemBattle: Window_SRWItemBattle,\r\n\t\tWindow_SRWAbilityCommand: Window_SRWAbilityCommand,\r\n\t\tWindow_SRWTransformSelection: Window_SRWTransformSelection,\r\n\t\tWindow_StageInfo: Window_StageInfo,\r\n\t\tWindow_ConditionsInfo: Window_ConditionsInfo,\r\n\t}); \r\n\t\r\n\tfunction patches(){};\r\n\t\r\n\tpatches.apply = function(){\r\n\t\tWindow_SavefileList.prototype.drawItem = function(index) {\r\n\t\t\tvar id = index + 1;\r\n\t\t\tvar valid = DataManager.isThisGameFile(id);\r\n\t\t\tvar info = DataManager.loadSavefileInfo(id);\r\n\t\t\tvar rect = this.itemRectForText(index);\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tif (this._mode === 'load') {\r\n\t\t\t\tthis.changePaintOpacity(valid);\r\n\t\t\t}\r\n\t\t\tthis.drawFileId(id, rect.x, rect.y);\r\n\t\t\tif (info) {\r\n\t\t\t\tthis.changePaintOpacity(valid);\r\n\t\t\t\tthis.drawContents(info, rect, valid);\r\n\t\t\t\tthis.changePaintOpacity(true);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_SavefileList.prototype.drawContents = function(info, rect, valid) {\r\n\t\t\tvar bottom = rect.y + rect.height;\r\n\t\t\tif (rect.width >= 420) {\r\n\t\t\t\tthis.drawGameTitle(info, rect.x + 192, rect.y, rect.width - 192);\r\n\t\t\t\tif (valid) {\r\n\t\t\t\t\tthis.drawPartyCharacters(info, rect.x + 220, bottom - 4);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar lineHeight = this.lineHeight();\r\n\t\t\tvar y2 = bottom - lineHeight;\r\n\t\t\tif (y2 >= lineHeight) {\r\n\t\t\t\tthis.drawPlaytime(info, rect.x, y2, rect.width);\r\n\t\t\t}\r\n\t\t\tvar offSetX = 20;\r\n\t\t\tvar bottomOffset = 54;\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_funds+\": \"+info.funds, offSetX + rect.x, bottom - bottomOffset, 240);\r\n\t\t\t}\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_SR_count+\": \"+info.SRCount, offSetX + rect.x + 240, bottom - bottomOffset, 240);\r\n\t\t\t}\r\n\t\t\tif(info.funds != null){\r\n\t\t\t\tthis.drawText(APPSTRINGS.SAVEMENU.label_turn_count+\": \"+info.turnCount, offSetX + rect.x + 480, bottom - bottomOffset, 240);\r\n\t\t\t}\t\t\r\n\t\t};\t\r\n\t\t\r\n\t\tWindow_Message.prototype.isInstantText = function() {\r\n\t\t\treturn Input.isPressed('ok') && Input.isPressed('pagedown');\r\n\t\t}\r\n\t\t\r\n\t\tWindow_Message.prototype.updateMessage = function() {\r\n\t\t\tif (this._textState) {\r\n\t\t\t\twhile (!this.isEndOfText(this._textState)) {\r\n\t\t\t\t\tif (this.needsNewPage(this._textState)) {\r\n\t\t\t\t\t\tthis.newPage(this._textState);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tthis.updateShowFast();\r\n\t\t\t\t\tthis.processCharacter(this._textState);\r\n\t\t\t\t\tif(!this.isInstantText()){\t\t\t\r\n\t\t\t\t\t\tif (!this._showFast && !this._lineShowFast) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.pause || this._waitCount > 0) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tif (this.isEndOfText(this._textState)) {\r\n\t\t\t\t\tthis.onEndOfText();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.updateInput = function() {\t\t\r\n\t\t\tif (this.isAnySubWindowActive()) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (this.pause) {\r\n\t\t\t\tif (this.isTriggered() || this.isInstantText()) {\r\n\t\t\t\t\tInput.update();\r\n\t\t\t\t\tthis.pause = false;\r\n\t\t\t\t\tif (!this._textState) {\r\n\t\t\t\t\t\tthis.terminateMessage();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t\r\n\t\tWindow_Message.prototype.startPause = function() {\r\n\t\t\tvar waitCount;\r\n\t\t\tif(this.isInstantText()){\r\n\t\t\t\twaitCount = 2;\r\n\t\t\t} else {\r\n\t\t\t\twaitCount = 10;\r\n\t\t\t}\r\n\t\t\tthis.startWait(waitCount);\r\n\t\t\tthis.pause = true;\r\n\t\t};\t\t\r\n\r\n\t//====================================================================\r\n\t// ●Window_ActorCommand\r\n\t//====================================================================\r\n\t\tWindow_Command.prototype.isList = function() {\r\n\t\t\tif (this._list) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_numVisibleRows = Window_ActorCommand.prototype.numVisibleRows;\r\n\t\tWindow_ActorCommand.prototype.numVisibleRows = function() {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this.isList()) {\r\n\t\t\t\t\treturn this.maxItems();\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn _SRPG_Window_ActorCommand_numVisibleRows.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_makeCommandList = Window_ActorCommand.prototype.makeCommandList;\r\n\t\tWindow_ActorCommand.prototype.makeCommandList = function() {\r\n\t\t\tvar _this = this;\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tif (this._actor) {\r\n\t\t\t\t\t//TODO: turn different menus into subclasses\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar battler = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\t\t\t\tvar type = battler.isActor() ? \"enemy\" : \"actor\";\r\n\t\t\t\t\tvar pos = {\r\n\t\t\t\t\t\tx: $gameTemp.activeEvent().posX(),\r\n\t\t\t\t\t\ty: $gameTemp.activeEvent().posY()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar fullRange = $statCalc.getFullWeaponRange(battler, $gameTemp.isPostMove);\r\n\t\t\t\t\tvar hasTarget = $statCalc.getAllInRange($gameSystem.getPlayerFactionInfo(), pos, fullRange.range, fullRange.minRange).length > 0;\r\n\t\t\t\t\tvar hasMapWeapon = $statCalc.hasMapWeapon(battler);\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction boardingMenu(){\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.board, 'board');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction regularMenu(){\r\n\t\t\t\t\t\tif(_this._actor.battleMode() != \"fixed\"){\r\n\t\t\t\t\t\t\t_this.addMoveCommand();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(hasTarget || hasMapWeapon){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_attack, 'attack');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.isShip(_this._actor) && $statCalc.hasBoardedUnits(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.deploy, 'deploy');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_spirit, 'spirit');\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"heal\"])){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_repair, 'heal');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"resupply\"])){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_resupply, 'resupply');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getConsumables(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_item, 'item');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getAbilityCommands(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_ability, 'ability');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.canFly(_this._actor) && $statCalc.getCurrentTerrain(_this._actor) != \"space\"){\r\n\t\t\t\t\t\t\tif($statCalc.isFlying(_this._actor)){\r\n\t\t\t\t\t\t\t\tif(($statCalc.getTileType(_this._actor) == \"land\" && $statCalc.canBeOnLand(_this._actor)) || ($statCalc.getTileType(_this._actor) == \"water\" && $statCalc.canBeOnWater(_this._actor))){\r\n\t\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_land, 'land');\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_fly, 'fly');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\t\t\r\n\t\t\t\t\t\tif($gameSystem.getPersuadeOption(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_persuade, 'persuade');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif($statCalc.canCombine(_this._actor).isValid){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_combine, 'combine');\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\tif($statCalc.isCombined(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_split, 'split');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TWIN_SYSTEM && !ENGINE_SETTINGS.DISABLE_ALLY_TWINS){\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canSwap(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_swap, 'swap');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.isMainTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_separate, 'separate');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tif(!$statCalc.isShip(_this._actor) && $statCalc.canTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_join, 'join');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif($statCalc.canTransform(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_transform, 'transform');\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_status, 'status');\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addWaitCommand();\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction hitAndAwayMenu(){\r\n\t\t\t\t\t\t_this.addMoveCommand();\r\n\t\t\t\t\t\t_this.addWaitCommand();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction disabledMenu(){\r\n\t\t\t\t\t\t_this.addWaitCommand();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction postMoveMenu(){\r\n\t\t\t\t\t\tif(hasTarget || hasMapWeapon){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_attack, 'attack');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($gameSystem.getPersuadeOption(_this._actor)){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_persuade, 'persuade');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.applyStatModsToValue(_this._actor, 0, [\"heal\"])){\r\n\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_repair, 'heal');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(ENGINE_SETTINGS.ENABLE_TWIN_SYSTEM && !ENGINE_SETTINGS.DISABLE_ALLY_TWINS){\r\n\t\t\t\t\t\t\tif($statCalc.canTwin(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_join, 'join');\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t_this.addWaitCommand();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction deployMenu(){\r\n\t\t\t\t\t\t_this.addMoveCommand();\t\t\t\t\t\r\n\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_spirit, 'spirit');\r\n\t\t\t\t\t\tif($statCalc.canFly(_this._actor) && $statCalc.getCurrentTerrain(_this._actor) != \"space\"){\r\n\t\t\t\t\t\t\tif($statCalc.isFlying(_this._actor)){\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_land, 'land');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t_this.addCommand(APPSTRINGS.MAPMENU.cmd_fly, 'fly');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($statCalc.getConsumables(_this._actor).length){\r\n\t\t\t\t\t\t\t _this.addCommand(APPSTRINGS.MAPMENU.cmd_item, 'item');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif($gameSystem.isSubBattlePhase() == 'confirm_boarding'){\r\n\t\t\t\t\t\tboardingMenu();\r\n\t\t\t\t\t} else if($gameTemp.isHitAndAway){\r\n\t\t\t\t\t\thitAndAwayMenu();\r\n\t\t\t\t\t} else if($gameTemp.isPostMove){\r\n\t\t\t\t\t\tpostMoveMenu();\r\n\t\t\t\t\t} else if($gameTemp.activeShip){\r\n\t\t\t\t\t\tdeployMenu();\r\n\t\t\t\t\t} else if(this._actor.battleMode() == \"disabled\"){\r\n\t\t\t\t\t\tdisabledMenu();\r\n\t\t\t\t\t} else {\t\r\n\t\t\t\t\t\tregularMenu();\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Window_ActorCommand_makeCommandList.call(this);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.addEquipCommand = function() {\r\n\t\t\tthis.addCommand(_textSrpgEquip, 'equip', this._actor.canSrpgEquip());\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.addWaitCommand = function() {\r\n\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_wait, 'wait');\r\n\t\t};\r\n\t\t\r\n\t\tWindow_ActorCommand.prototype.addMoveCommand = function() {\r\n\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_move, 'move');\r\n\t\t};\r\n\r\n\t\tvar _SRPG_Window_ActorCommand_setup = Window_ActorCommand.prototype.setup;\r\n\t\tWindow_ActorCommand.prototype.setup = function(actor) {\r\n\t\t\tif ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\tthis._actor = actor;\r\n\t\t\t\tthis.clearCommandList();\r\n\t\t\t\tthis.makeCommandList();\r\n\t\t\t\tthis.updatePlacement();\r\n\t\t\t\tthis.refresh();\r\n\t\t\t\tthis.selectLast();\r\n\t\t\t\tthis.activate();\r\n\t\t\t\tthis.open();\r\n\t\t\t} else {\r\n\t\t\t\t_SRPG_Window_ActorCommand_setup.call(this, actor);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tWindow_ActorCommand.prototype.updatePlacement = function() {\r\n\t\t\tthis.width = this.windowWidth();\r\n\t\t\tthis.height = this.windowHeight();\r\n\t\t\tthis.x = Math.max($gameTemp.activeEvent().screenX() - $gameMap.tileWidth() / 2 - this.windowWidth(), 0);\r\n\t\t\tif ($gameTemp.activeEvent().screenY() < Graphics.boxHeight - 160) {\r\n\t\t\t\tvar eventY = $gameTemp.activeEvent().screenY();\r\n\t\t\t} else {\r\n\t\t\t\tvar eventY = Graphics.boxHeight - 160;\r\n\t\t\t}\r\n\t\t\tthis.y = Math.max(eventY - this.windowHeight(), 0);\r\n\t\t};\r\n\t\t\r\n\t\t//====================================================================\r\n\t\t// ●Window_MenuCommand\r\n\t\t//====================================================================\r\n\t\t\tvar _SRPG_Window_MenuCommand_makeCommandList = Window_MenuCommand.prototype.makeCommandList;\r\n\t\t\tWindow_MenuCommand.prototype.makeCommandList = function() {       \r\n\t\t\t\t  \r\n\t\t\t   // _SRPG_Window_MenuCommand_makeCommandList.call(this);\r\n\t\t\t   \r\n\t\t\t   if($gameSystem.isSRPGMode()){\r\n\t\t\t\t   this.addTurnEndCommand();     \r\n\t\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_search, 'search', true);\r\n\t\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_list, 'unitList', true);\r\n\t\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_conditions, 'conditions', true);\r\n\t\t\t   }\r\n\t\t\t   \r\n\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_options, 'options');\r\n\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_save, 'save');\r\n\t\t\t   this.addCommand(APPSTRINGS.MAPMENU.cmd_game_end, 'gameEnd');\r\n\t\t\t};\r\n\r\n\t\t\tWindow_MenuCommand.prototype.addTurnEndCommand = function() {\r\n\t\t\t\tthis.addCommand(APPSTRINGS.MAPMENU.cmd_end_turn, 'turnEnd', true);\r\n\t\t\t};\r\n\r\n\t\t\tvar _SRPG_Window_MenuCommand_isFormationEnabled = Window_MenuCommand.prototype.isFormationEnabled;\r\n\t\t\tWindow_MenuCommand.prototype.isFormationEnabled = function() {\r\n\t\t\t\t/*if ($gameSystem.isSRPGMode() == true) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn _SRPG_Window_MenuCommand_isFormationEnabled.call(this);\r\n\t\t\t\t}*/\r\n\t\t\t\treturn false\r\n\t\t\t};\r\n\t}\r\n\t\r\n\t//A window that lists the counter/evade/defend options for the player when counter attacking\r\n\tfunction Window_CounterCommand(){\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_CounterCommand.prototype = Object.create(Window_Command.prototype);\r\n\tWindow_CounterCommand.prototype.constructor = Window_CounterCommand;\r\n\r\n\tWindow_CounterCommand.prototype.initialize = function() {\r\n\t\tWindow_Command.prototype.initialize.call(this, 0, 0);\r\n\t\tthis._actor = null;\r\n\t\tthis._item = null;\r\n\t\tthis.openness = 0;\r\n\t\tthis.setup();\r\n\t\tthis.hide();\r\n\t\tthis.deactivate();\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.makeCommandList = function() {  \r\n\t\tthis.addCommand(\"Counter\", 'counter');\t\r\n\t\tthis.addCommand(\"Defend\", 'defend');\r\n\t\tthis.addCommand(\"Evade\", 'evade');\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.setup = function(actorArray) {\r\n\t\tthis.clearCommandList();\r\n\t\tthis.makeCommandList();\r\n\t\tthis.refresh();\r\n\t\tthis.activate();\r\n\t\tthis.open();\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.maxCols = function() {\r\n\t\treturn 1;\r\n\t};\r\n\r\n\tWindow_CounterCommand.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(3);\r\n\t};\r\n\t\r\n\t\r\n\tWindow_Base.prototype.drawSectionRect = function(x, y, w, h, margin, color) {\r\n\t\tvar lineWidth = 1;\r\n\t\tx+=margin;\r\n\t\ty+=margin;\r\n\t\tw-=2*margin;\r\n\t\th-=2*margin;\r\n\t\t//top\r\n\t\tthis.contents.fillRect(x ,y, w, lineWidth, color);\r\n\t\t//bottom\r\n\t\tthis.contents.fillRect(x, y + h, w + lineWidth, lineWidth, color);\r\n\t\t//left\r\n\t\tthis.contents.fillRect(x ,y, lineWidth, h, color);\r\n\t\t//right\r\n\t\tthis.contents.fillRect(x + w, y, lineWidth, h, color);\r\n\t}\r\n\t\r\n\tWindow_Base.prototype.drawRect = function(x, y, w, h, margin, color) {\r\n\t\tx+=margin;\r\n\t\ty+=margin;\r\n\t\tw-=2*margin;\r\n\t\th-=2*margin;\r\n\t\tthis.contents.fillRect(x ,y, w, h, color);\r\n\t}\r\n\t\r\n\tWindow_Base.prototype.windowInnerWidth = function() {\r\n        return this.windowWidth() - 38;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.setFontSize = function(size) {\r\n        this.contents.fontSize = size;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.setItalic = function(state) {\r\n        this.contents.fontItalic = state;\r\n    };\r\n\t\r\n\tWindow_Base.prototype.centerTextOffset = function(text, containerWidth) {\r\n        return containerWidth / 2 - this.textWidth(text) / 2;\r\n    };\r\n\t\r\n\t\r\n\t\r\n\tfunction Window_SRWItemBattle() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWItemBattle.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWItemBattle.prototype.constructor = Window_SRWItemBattle;\r\n\t\r\n\tWindow_SRWItemBattle.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWItemBattle.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWItemBattle.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWItemBattle.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWItemBattle.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item) {\r\n\t\t\titem = $itemEffectManager.getAbilityDisplayInfo(item.itemIdx);\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getConsumables(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWItemBattle.prototype.isEnabled = function(item) {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tvar itemDef = $itemEffectManager.getAbilityDef(item.itemIdx);\r\n\t\treturn itemDef.isActiveHandler(actor);\r\n\t};\t\r\n\t\r\n\tfunction Window_SRWAbilityCommand() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWAbilityCommand.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWAbilityCommand.prototype.constructor = Window_SRWAbilityCommand;\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWAbilityCommand.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item != null) {\r\n\t\t\titem = $abilityCommandManger.getAbilityDisplayInfo(item);\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getAbilityCommands(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWAbilityCommand.prototype.isEnabled = function(item) {\r\n\t\treturn true;\r\n\t};\t\r\n\t\r\n\tfunction Window_SRWTransformSelection() {\r\n\t\tthis._parent = Window_BattleItem.prototype;\r\n\t\tthis.initialize.apply(this, arguments);\t\r\n    }\r\n\r\n    Window_SRWTransformSelection.prototype = Object.create(Window_BattleItem.prototype);\r\n    Window_SRWTransformSelection.prototype.constructor = Window_SRWTransformSelection;\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.maxCols = function(){\r\n\t\treturn 1;\r\n\t}\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.windowWidth = function() {\r\n        return 240;\r\n    };\r\n\r\n    Window_SRWTransformSelection.prototype.windowHeight = function() {\r\n        return this.fittingHeight(4);\r\n    };\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.refresh = function(){\r\n\t\tthis._parent.refresh.call(this);\r\n\t}\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.drawItem = function(index) {\r\n\t\tvar item = this._data[index];\r\n\t\tif (item != null) {\r\n\t\t\titem = $dataClasses[item];\r\n\t\t\tvar numberWidth = 0;//this.numberWidth();\r\n\t\t\tvar rect = this.itemRect(index);\r\n\t\t\t//rect.width -= this.textPadding();\r\n\t\t\tthis.drawItemName(item, rect.x, rect.y, rect.width - numberWidth);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.drawItemName = function(item, x, y, width) {\r\n\t\twidth = width || 312;\r\n\t\tif (item) {\r\n\t\t\tthis.resetTextColor();\r\n\t\t\tthis.drawText(item.name, x + 10, y, width - 20);\r\n\t\t}\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.makeItemList = function() {\r\n\t\tvar actor = $gameSystem.EventToUnit($gameTemp.activeEvent().eventId())[1];\r\n\t\tthis._data = $statCalc.getTransformationList(actor);\r\n\t};\r\n\t\r\n\tWindow_SRWTransformSelection.prototype.isEnabled = function(item) {\r\n\t\treturn true;\r\n\t};\t\r\n\t\r\n\t\r\n\t\r\n\tfunction Window_StageInfo() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_StageInfo.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_StageInfo.prototype.constructor = Window_StageInfo;\r\n\r\n\tWindow_StageInfo.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.windowWidth = function() {\r\n\t\treturn 240;\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.windowHeight = function() {\r\n\t\tif($gameSystem.isSRPGMode()){\r\n\t\t\treturn this.fittingHeight(4);\r\n\t\t} else {\r\n\t\t\treturn this.fittingHeight(1);\r\n\t\t}\t\t\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.refresh = function() {\r\n\t\tvar lineheight = 35;\r\n\t\tvar columnOffset = 95;\r\n\t\tvar x = 5;\r\n\t\tvar y = 0;\r\n\t\tvar width = this.contents.width - this.textPadding() * 2;\r\n\t\tthis.contents.clear();\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t//this.drawCurrencyValue(this.value(), this.currencyUnit(), x, 0, width);\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_funds, x, 0, width);\r\n\t\tthis.drawText(this.value(), x + columnOffset , 0, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_turn, x,  lineheight, width);\r\n\t\t/*--text-color-highlight: #f9e343;\t\r\n\t \t--text-color-highlight2: #43dbf9;\t*/\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_turnVarID), x + columnOffset, lineheight, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_enemy, x,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#AA2222\");\r\n\t\tthis.drawText($gameVariables.value(_enemiesDestroyed), x + columnOffset,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(\"/\", x + columnOffset + 30,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_enemiesDestroyed) + $gameVariables.value(_existEnemyVarID), x + columnOffset + 45,  lineheight * 2, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.MAPMENU.label_ally, x,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#AA2222\");\r\n\t\tthis.drawText($gameVariables.value(_actorsDestroyed), x + columnOffset,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\tthis.drawText(\"/\", x + columnOffset + 30,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText($gameVariables.value(_actorsDestroyed) + $gameVariables.value(_existActorVarID), x + columnOffset + 45,  lineheight * 3, width);\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.value = function() {\r\n\t\treturn $gameParty.gold();\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.currencyUnit = function() {\r\n\t\treturn TextManager.currencyUnit;\r\n\t};\r\n\r\n\tWindow_StageInfo.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\t\r\n\tfunction Window_ConditionsInfo() {\r\n\t\tthis.initialize.apply(this, arguments);\r\n\t}\r\n\r\n\tWindow_ConditionsInfo.prototype = Object.create(Window_Base.prototype);\r\n\tWindow_ConditionsInfo.prototype.constructor = Window_ConditionsInfo;\r\n\r\n\tWindow_ConditionsInfo.prototype.initialize = function(x, y) {\r\n\t\tvar width = this.windowWidth();\r\n\t\tvar height = this.windowHeight();\r\n\t\tWindow_Base.prototype.initialize.call(this, x, y, width, height);\r\n\t\tthis.refresh();\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.windowWidth = function() {\r\n\t\treturn 760;\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.windowHeight = function() {\r\n\t\treturn this.fittingHeight(6);\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.refresh = function() {\r\n\t\tvar lineheight = 35;\r\n\t\tvar columnOffset = 95;\r\n\t\tvar x = 5;\r\n\t\tvar y = 0;\r\n\t\tvar width = this.contents.width - this.textPadding() * 2;\r\n\t\tthis.contents.clear();\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\t\r\n\t\tthis.changeTextColor(\"#43dbf9\");\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_victory_condition, x, 0, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_defeat_condition, x, lineheight * 2, width);\r\n\t\t\r\n\t\tthis.drawText(APPSTRINGS.GENERAL.label_mastery_condition, x, lineheight * 4, width);\r\n\t\t\r\n\t\tthis.changeTextColor(\"#FFFFFF\");\r\n\t\t\r\n\t\tvar valueOffset = 20;\r\n\t\tthis.drawText($gameVariables.value(_victoryConditionText) || \"\", x + valueOffset, lineheight, width - valueOffset);\r\n\t\t\r\n\t\tthis.drawText($gameVariables.value(_defeatConditionText) || \"\", x + valueOffset, lineheight * 3, width - valueOffset);\r\n\t\t\r\n\t\tvar masteryText = $gameVariables.value(_masteryConditionText);\r\n\t\tif($SRWSaveManager.isMapSRPointLocked($gameMap.mapId())){\r\n\t\t\tmasteryText = APPSTRINGS.GENERAL.label_mastery_locked;\r\n\t\t}\r\n\t\tthis.drawText(masteryText || \"\", x + valueOffset, lineheight * 5, width - valueOffset);\r\n\t\t\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.value = function() {\r\n\t\treturn $gameParty.gold();\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.currencyUnit = function() {\r\n\t\treturn TextManager.currencyUnit;\r\n\t};\r\n\r\n\tWindow_ConditionsInfo.prototype.open = function() {\r\n\t\tthis.refresh();\r\n\t\tWindow_Base.prototype.open.call(this);\r\n\t};\r\n\t\r\n\t\n\n//# sourceURL=webpack:///./js/SRW_Core/Windows.js?");

/***/ }),

/***/ "./js/SRW Core/main.js":
/*!*****************************!*\
  !*** ./js/SRW Core/main.js ***!
  \*****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Windows_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Windows.js */ \"./js/SRW Core/Windows.js\");\n/* harmony import */ var _PluginCommands_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PluginCommands.js */ \"./js/SRW Core/PluginCommands.js\");\n/* harmony import */ var _GameTemp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameTemp.js */ \"./js/SRW Core/GameTemp.js\");\n/* harmony import */ var _GameSystem_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GameSystem.js */ \"./js/SRW Core/GameSystem.js\");\n/* harmony import */ var _DataManagement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DataManagement.js */ \"./js/SRW Core/DataManagement.js\");\n/* harmony import */ var _GameInterpreter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GameInterpreter.js */ \"./js/SRW Core/GameInterpreter.js\");\n/* harmony import */ var _Sprites_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Sprites.js */ \"./js/SRW Core/Sprites.js\");\n/* harmony import */ var _Map_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Map.js */ \"./js/SRW Core/Map.js\");\n/* harmony import */ var _Entities_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Entities.js */ \"./js/SRW Core/Entities.js\");\nfunction importGlobal(exports){\r\n\tObject.keys(exports).forEach(function(className){\r\n\t\twindow[className] = exports[className];\r\n\t});\r\n}\r\n\r\n\r\n\r\nimportGlobal(_Windows_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\r\n_Windows_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].patches.apply();\r\n\r\n\r\n_PluginCommands_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].patches.apply();\r\n\r\n\r\n_GameTemp_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].patches.apply();\r\n\r\n\r\n_GameSystem_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].patches.apply();\r\n\r\n\r\n_DataManagement_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].patches.apply();\r\n\r\n\r\n_GameInterpreter_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].patches.apply();\r\n\r\n\r\nimportGlobal(_Sprites_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\r\n_Sprites_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].patches.apply();\r\n\r\n\r\n_Map_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].patches.apply();\r\n\r\n\r\n_Entities_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].patches.apply();\n\n//# sourceURL=webpack:///./js/SRW_Core/main.js?");

/***/ })

/******/ });